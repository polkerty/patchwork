[{"id":"TYAPR01MB586654E2D74B838021BE77CAF5EEA@TYAPR01MB5866.jpnprd01.prod.outlook.com","summary":"The proposed patch aims to fix a bug on Windows where `pg_ctl start` can return a success code (0) even if the postmaster has already been started, potentially leading to incorrect behavior in scripts and automation. It involves preventing `cmd.exe` autoruns and improving the process identification to ensure `pg_ctl` accurately determines if a postmaster is running and correctly reports its status.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The best way forward is unclear: should the current patch be committed, or should a platform-independent solution or using CreateProcess() directly be adopted instead? Should the /D switch be applied consistently or reverted?","would_benefit_from_new_reviewer":"YES"}, {"id":"20231231.200218.1749113750714588065.horikyota.ntt@gmail.com","summary":"This patch series aims to address an issue introduced by commit 728f86fec6, where the walreceiver in PG16 waits for a connection timeout upon receiving a promotion request in the face of network failures, instead of terminating instantly as it did in PG14. The proposed solution involves adjusting signal handling in the walreceiver to ensure immediate termination upon promotion requests, along with refactoring some related code to improve consistency and utilize existing helper functions.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"Robert Haas pointed out that the commit messages for the patches are not clear, and it's difficult to understand what is being fixed. He also asked about the target version (master only or back-patch).","would_benefit_from_new_reviewer":"NO"}, {"id":"de52b282-1166-1180-45a2-8d8917ca74c6@enterprisedb.com","summary":"This patch series aims to fix a long-standing data loss bug in logical replication during initial table synchronization, as well as issues related to dropping publications and altering publications. The primary approach involves distributing invalidation messages to in-progress transactions to ensure cache coherency, with selective invalidation of the cache to reduce the overhead.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"There is a performance regression introduced by distributing invalidation messages during logical decoding. It's been reduced with selective invalidation, but further performance testing, specifically on different combinations of invalidation volume and number of concurrent decoded transactions, is required to fully understand the overhead. Hayato Kuroda also found that the attribute pubowner is not used for now, and suggested invalidating the relcache of pubrelations when the owner is altered","would_benefit_from_new_reviewer":"YES"}, {"id":"ZWlrdQarrZvLsgIk@pryzbyj2023","summary":"The patch aims to fix a rare race condition where the postgres server gets stuck during shutdown following an OOM kill of a backend process, specifically due to the checkpointer process not being properly signaled to shut down. Noah Misch suggested an alternate approach that aligns with restart_after_crash=off behaviors, by clearing the FatalError flag to avoid unwanted side-effects.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The patch needs to be rebased and the alternate approach of clearing FatalError after launching the startup process needs to be addressed.","would_benefit_from_new_reviewer":"NO"}, {"id":"bbaaf9f9-ebb2-645f-54bb-34d6efc7ac42@fujitsu.com","summary":"The proposal aims to fix a bug where temporary tables can be assigned the same relfilenode as permanent tables, leading to errors, especially in logical replication and when using pg_filenode_relation. The proposed solution involves modifying RelidByRelfilenumber to ignore temporary relations entirely, as it's impossible to reliably get a regclass from a tablespace and relfilenode without persistence and backend ID.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The main issue is whether to exclude temporary relations from RelidByRelfilenumber and how to implement the filtering (scan key vs. loop). The existing patch needs regression tests.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+OCxoxwsgi8QdzN8A0OPGuGfu_1vEW3ufVBnbwd3gfawVpsXw@mail.gmail.com","summary":"This patch addresses a compilation error on Windows when building Postgres with both OpenSSL and GSSAPI enabled, caused by conflicting macro definitions. The proposed solution is to create a new header file, pg-gssapi.h, to encapsulate the GSSAPI includes and undefine the conflicting macro X509_NAME.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main question is whether the pg-gssapi.h approach correctly handles all necessary GSSAPI includes and whether any other libraries might cause similar conflicts with OpenSSL on Windows.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEze2WgNjODiAiTU18E06_BrRK0nqwJ1kdS_bN61c2_DpFDSnQ@mail.gmail.com","summary":"The proposed patch aims to fix a bug in the WAL logging of CREATE DATABASE, specifically when dealing with non-standard page layouts. The current implementation doesn't properly mark pages with non-standard layouts, leading to inconsistencies between primaries and replicas, especially with VM and FSM forks. The initial patch proposed assumes all pages in the source database utilize a non-standard page layout.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The main concern is the potential for significant WAL volume increase due to blindly assuming non-standard pages, especially when the holes in the pages are large, and the trade-off between correctness and performance.","would_benefit_from_new_reviewer":"NO"}, {"id":"1100715.1712265845@sss.pgh.pa.us","summary":"The patch aims to improve the reliability and debuggability of TAP tests by replacing IPC::Run::timeout with IPC::Run::timer, and adjusting the BackgroundPsql API to return undef rather than die on timeouts, along with improved error reporting. It also addresses some related issues in the test suite, such as ensuring proper cleanup of background processes and addressing misleading comments.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue is whether the proposed changes to BackgroundPsql's error handling and the use of timers instead of timeouts are correct and adequately address potential issues in the TAP tests, and waiting on additional review of the v4 patches.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGECzQQD5f9ce-D1v6vCTT94hG=JbGdTHuf8vQ=HBLz9T4dA1g@mail.gmail.com","summary":"The patch aims to fix a bug where statement timeouts are incorrectly reported as user cancellations, particularly in cases involving multiple calls to enable_statement_timeout. It addresses a buildfarm failure related to this issue.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Tom Lane questioned the change to disable_statement_timeout, and while the author responded, there is no indication that Tom Lane has confirmed he is okay with the author's justification.","would_benefit_from_new_reviewer":"YES"}, {"id":"AM5PR83MB0178D3B31CA1B6EC4A8ECC42F7529@AM5PR83MB0178.EURPRD83.prod.outlook.com","summary":"This thread discusses a proposed patch to add a non-blocking version of PQcancel to libpq, allowing cancellation requests to be sent without blocking the event loop. The latest iteration involves reissuing cancel requests to increase reliability, and a split-out test for cygwin. Some buildfarm issues were identified and addressed.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"20240523000548.58.nmisch@google.com","summary":"This patchset aims to improve the reliability of invalidations, especially for inplace updates, by addressing issues related to transactional invalidations and potential data corruption. A deadlock scenario was discovered, leading to the temporary removal of some patches, and a new patch (inplace240) was created and applied to address this.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main issue is ensuring the reliability and correctness of invalidations during inplace updates, particularly avoiding deadlocks and data corruption scenarios that can arise due to improper locking and cache management. The current focus is on reviewing the v17 patchset (inplace160+inplace240).","would_benefit_from_new_reviewer":"YES"}, {"id":"tencent_FA60D4EE3E14ACF0B936396551260A4FFD05@qq.com","summary":"The patch aims to fix an issue where historic snapshots do not track transactions committed during the BUILDING_SNAPSHOT state. The discussion is currently focused on whether the proposed changes interact correctly with fast-forwarding scenarios in WAL replay and whether a separate thread should address fast-forwarding concerns.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The main outstanding question is whether the proposed fix interacts correctly with fast-forwarding during WAL replay, and whether this should be addressed in the same patch or a separate one.","would_benefit_from_new_reviewer":"YES"}, {"id":"tencent_8DEC9842690A9B6AFD52D4659EF0700E9409@qq.com","summary":"The proposed patch aims to ensure that historic snapshots correctly track transactions committed while the snapshot is in the `BUILDING_SNAPSHOT` state, particularly focusing on catalog modifications. The author has provided several iterations of the patch and test cases.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether to use a single `if` condition or separate `if` conditions in the `heap_decode` and `heap2_decode` functions, and how to handle fast-forwarding during snapshot serialization.","would_benefit_from_new_reviewer":"YES"}, {"id":"tencent_6AAF072A7623A11A85C0B5FD290232467808@qq.com","summary":"The proposed patch addresses a bug where transactions committed during the BUILDING_SNAPSHOT state are not tracked, potentially leading to logical replication issues. The patch tracks these transactions and includes a test case.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"Bertrand suggested a few refinements to the code that would make it more future-proof and easier to understand, and the author has not yet responded to this feedback.","would_benefit_from_new_reviewer":"NO"}, {"id":"ba0edc53-4b1f-4c67-92d1-29aeddb36a18@gmail.com","summary":"The patch aims to stabilize incremental sort cost estimation by considering EquivalenceClasses when estimating the number of groups, addressing plan variations due to slight query text changes. The latest approach involves teaching estimate_num_groups to process a PathKey node inside the presortedExprs list to choose the correct number of distinct values.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The current patch needs review, and there are questions about whether it adequately handles cases where ndistinct values might change.","would_benefit_from_new_reviewer":"YES"}, {"id":"CANtu0oiktqQ2pwExoXqDpByXNCJa-KE5vQRodTRnmFHN_+qwHg@mail.gmail.com","summary":"The patch aims to fix a potential issue where non-MVCC index scans (using DirtySnapshot) might miss tuples due to concurrent updates, leading to false negatives in scenarios like unique constraint checks and logical replication. The current proposed solution has been found to be insufficient.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The proposed solution does not guarantee the absence of false negative cases due to relying on XID values which don't always reflect the transaction commitment order.","would_benefit_from_new_reviewer":"NO"}, {"id":"20140424101827.2714.39486@wrigleys.postgresql.org","summary":"The patch aims to prevent misleading entries in pg_stat_activity where the state is 'idle' but xact_start and query_start show old timestamps. The current proposed solution involves filtering out these timestamps when querying pg_stat_activity, but there is discussion about whether it would be better to prevent the incorrect data from being recorded in the first place.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The main issue is whether to fix the problem by filtering the data when querying pg_stat_activity or by preventing the incorrect data from being recorded in the first place.","would_benefit_from_new_reviewer":"YES"}, {"id":"CANtu0ojXmqjmEzp-=aJSxjsdE76iAsRgHBoK0QtYHimb_mEfsg@mail.gmail.com","summary":"The patch set addresses issues where INSERT ON CONFLICT UPDATE statements can fail with a duplicate key value violates unique constraint error during concurrent index creation or reindexing. It modifies the arbiter index selection logic to consider 'indisready' indexes in addition to 'indisvalid' indexes, while ensuring that at least one fully valid index is present to maintain UPSERT correctness, and includes fixes for named constraints and partitioned tables.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The key issue is ensuring INSERT ON CONFLICT UPDATE does not fail unexpectedly due to concurrent index operations, and that the correct arbiter indexes are selected during planning and execution.","would_benefit_from_new_reviewer":"YES"}, {"id":"70BF24D6-DC51-443F-B55A-95735803842A@amazon.com","summary":"This patch aims to fix a race condition in EXEC_BACKEND builds, particularly on Windows, where concurrent reads and writes to the pg_control file can lead to data corruption. The proposed solution involves passing a copy of the 'proto-controlfile' to child processes to avoid early reads of the actual pg_control file before proper locking can be established.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The optimal way to handle the data required from the control file in child processes is still being discussed, weighing the benefits of different approaches like passing a full copy, individual variables, or a proto control file with certain fields nulled out. The thread is not very recent, though.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFGqpvg-pRw=cdsUpKYfwY6D3d-m9tw8WMcAEE7HHWfm-oYWvw@mail.gmail.com","summary":"The proposed patch fixes an issue where the psql client on Windows fails to handle WSAEWOULDBLOCK errors when connecting to a PostgreSQL server with GSSAPI enabled. The fix involves using SOCK_ERRNO instead of errno to check for non-blocking socket errors in the gss_read function.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The reviewer questioned why the proposed fix only addresses one call to pqsecure_raw_read() in gss_read() and doesn't account for the second call, as well as pqsecure_raw_write() in pqsecure_open_gss().","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAccyYKrRojjO-weeXFs1EqLFHWSBfjBzObwVDv4u-ZxmU=7Rg@mail.gmail.com","summary":"The proposed patch aims to fix a crash scenario where a standby server crashes during replay after a switchover when reconnecting to a new primary. The crash occurs because the walreceiver's flushedUpto value might not reflect the data actually flushed to disk, leading to the startup process attempting to open a non-existent WAL file. The latest version of the patch compares walrcv->receiveStart with recptr and resets walrcv->flushedUpto only if walrcv->receiveStart is greater than recptr.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The reviewer is concerned that resetting flushedUpto can cause the standby to re-request data it already has, which could be wasteful, especially when WAL application is delayed.","would_benefit_from_new_reviewer":"YES"}, {"id":"18396-03cac9beb2f7aac3@postgresql.org","summary":"The patch relaxes an overly strict assertion in gistFindCorrectParent() that occurs when inserting large tuples into a GiST index, potentially during page splits. The author has also identified a potential out-of-bounds access in BufferGetLSNAtomic() when dealing with local buffers and has provided a patch for that issue as well.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether the potential out-of-bounds access in BufferGetLSNAtomic() is a real issue and whether the provided patch for that is correct.","would_benefit_from_new_reviewer":"YES"}, {"id":"b611015f-b423-458c-aa2d-be0e655cc1b4@postgresql.org","summary":"The proposed patch adds a TOAST table to pg_index to allow storage of large expressions in indexes, which is necessary for use cases such as vector search with binary quantization. This exposed a number of issues with missing snapshot management when updating catalog tuples, which are being addressed in follow-up patches.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The author is re-evaluating some of the original fixes regarding snapshot handling for catalog updates, and there's a question of whether to enforce snapshot checks more broadly or only when varlena columns are touched.","would_benefit_from_new_reviewer":"NO"}, {"id":"0acde6ec-7413-4a27-a2be-49897ae67e61@postgrespro.ru","summary":"The patch aims to fix the creation of empty .log files when log_destination is set to 'csvlog' by preventing unnecessary rotation of the stderr log file when it's not the intended destination.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The main issue is where to place the check to avoid unnecessary log file creation, and whether stderr should always remain open even when logging is directed elsewhere. The most recent discussion is about the correct conditional logic to close the stderr file.","would_benefit_from_new_reviewer":"NO"}, {"id":"2a62f138c9dcb6fcf5889b076d123aa2@oss.nttdata.com","summary":"The patch aims to fix the `consume_xids` function, which incorrectly advances transaction IDs (XIDs) under certain conditions (outside transaction blocks, or on the first call within a transaction block). The patch also addresses the behavior of `consume_xids(0)` by raising an error, clarifies the return value of the function with added comments, and provides support for 32k block sizes.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The author needs to address review comments, including simplifying the conditional logic, reconsidering the comment updates, and clarifying the rationale for the value '4000' used for larger block sizes.","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+hUKGLO02j2WLiQ73iZ+CEY1G+LPmHo3PXaYTaFY9Hj222mEQ@mail.gmail.com","summary":"The proposed patch addresses a potential data loss issue related to concurrent WAL flushing and the InstallXLogFileSegment() function. The core issue is a potential race condition where a concurrent backend might open, write, and fdatasync a new WAL segment before the rename operation that creates the segment is durable on disk, potentially leading to data loss during recovery after a crash. Several approaches have been discussed, including waiting for InstallXLogFileSegment() to finish or ensuring rename durability via fsync, with a preference for the former to avoid unconditional syncs.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether durable_rename() has a window that makes it less atomic than it seems, and whether other uses of durable_rename() can suffer a similar issue.","would_benefit_from_new_reviewer":"YES"}, {"id":"CANtu0ojmVd27fEhfpST7RG2KZvwkX=dMyKUqg0KM87FkOSdz8Q@mail.gmail.com","summary":"The patch fixes an issue in bt_index_parent_check where it incorrectly reports valid concurrently built indexes as invalid due to the use of SnapshotAny during the heap scan instead of an MVCC snapshot.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Andrey Borodin questioned the snapshot business in the previous patch, but Mikhail has stated that it seems correct to him. Further review might be useful to verify the snapshot handling.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJDiXgj72Axj0d4ojKdRWG_rnkfs4uWY414NL=15sCvh7-9rwg@mail.gmail.com","summary":"The patch aims to address the issue of accessing temporary tables of other sessions. Initially, the proposal was to forbid dropping temporary tables of other sessions. However, due to feedback, the current proposal is to add a GUC that allows superusers to drop temporary tables of other sessions, while disabling the ability to read and modify other session's temp tables due to existing bugs.","status":"WAITING_ON_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main issue is deciding how to handle access to temporary tables of other sessions, balancing the need for isolation with the desire for superusers to have administrative capabilities, along with the potential performance impact of different approaches.","would_benefit_from_new_reviewer":"YES"}, {"id":"873c33c5-ef9e-41f6-80b2-2f5e11869f1c@garret.ru","summary":"The proposed patch disables an optimization in Bitmap Heap Scan that skips fetching heap pages when all tuples on a page are visible, as this optimization can lead to incorrect query results due to a race condition with concurrent VACUUM operations. The patch aims to fix a bug where bitmap heap scans return incorrect results in certain concurrency scenarios involving VACUUM.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The key issue is the race condition between bitmap heap scan and concurrent vacuum, where a page marked as all-visible can have its tuples removed by vacuum after the bitmap index scan but before the bitmap heap scan, leading to incorrect counts.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEze2WiWt+9+OnqW1g9rKz0gqxymmt=oe6pKAEDrutdfpDMpTw@mail.gmail.com","summary":"The patch addresses a bug where mdunlinkfiletag was incorrectly unlinking segment 0 of the main fork instead of the specified fork and segment. The proposed solution has shifted from fixing the bug to simplifying the code by renaming register_unlink_segment to register_unlink_tombstone and removing the fork/seg arguments, as the unlink functionality is only intended for tombstones.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Whether to fix the original bug, or simply clarify and restrict existing functionality to tombstones only, is resolved in favor of the latter.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACX+KaMz2ZoOojh0nQ6QNBYx8Ak1Dkoko=D4FSb80BYW+o8CHQ@mail.gmail.com","summary":"The patch modifies the pg_prewarm extension to check SELECT privileges on the underlying table when prewarming indexes, rather than checking privileges on the index itself. This aligns with the existing behavior that a user with SELECT privilege can manually prewarm a table by reading it.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue is whether the proposed change adequately addresses the privilege check for pg_prewarm on indexes, and if the locking is done safely to avoid deadlocks.","would_benefit_from_new_reviewer":"YES"}, {"id":"79755a2b18ed4fe5e29da6a87a1e00d1@postgrespro.ru","summary":"The patch aims to fix an issue where `check_foreign_key()` reuses the same cached plan for cascade `UPDATE`/`DELETE` operations, leading to incorrect cascade delete order after a primary key update, especially when using connection poolers. The latest version (v4) is a rebased version of a previous proposed solution.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The proposed solution might not be comprehensive enough, as a user could create their own BEFORE trigger that triggers check_primary_key and cause issues. It is unclear if v4 is the preferred patch to review.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAH2-Wz=PqOziyRSrnN5jAtfXWXY7-BJcHz9S355LH8Dt=5qxWQ@mail.gmail.com","summary":"The proposed patch aims to fix a race condition in GiST and SP-GiST index-only scans that can lead to incorrect query results when concurrent VACUUM operations are running. The fix involves ensuring that GiST and SP-GiST VACUUM acquire cleanup locks and that index-only scans hold onto a leaf page buffer pin while the visibility map or heap proper is accessed.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issue is whether the proposed fix, which involves extending buffer pinning for GiST and SP-GiST index-only scans, is the correct approach, and whether Mikhail's latest revisions have addressed the SP-GiST crash and other implementation issues.","would_benefit_from_new_reviewer":"YES"}, {"id":"tencent_F34922C91C41E76C734773E767C9FBDB9906@qq.com","summary":"The patch aims to fix a potential memory leak in pg_amcheck by ensuring PQclear(result) is called before disconnectDatabase(conn).","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z5sd5O9JO7NYNK-C@paquier.xyz","summary":"The proposed patch aims to address issues with 2PC (two-phase commit) handling during recovery, specifically related to CLOG lookups and the GlobalTransactionData shmem area. The patchset involves refactoring the 2PC code to integrate FullTransactionIds more deeply and to ensure that CLOG lookups and other checks are only performed when the cluster is in a consistent state.","status":"WAITING_FOR_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The biggest outstanding question is whether to remove stale two-phase state files during recovery (as the current patch does), or to fail recovery in such cases, as suggested by Noah Misch, to alert the user to a potentially serious problem.","would_benefit_from_new_reviewer":"NO"}, {"id":"bebd457e-5b43-46b3-8fc6-f6a6509483ba@uni-muenster.de","summary":"The patch adds the missing [NO] INDENT flag to XMLSerialize backward parsing in ruleutils.c, ensuring that the indentation option is correctly preserved when views or similar objects using XMLSERIALIZE are recreated from their definitions.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAEudQArbTWVSbxq608GRmXJjnNSQ0B6R7CSffNnj2hPWMUsRNg@mail.gmail.com","summary":"The patch fixes a memory management error in `src/bin/pg_amcheck/pg_amcheck.c` where `free` was used instead of `PQfreemem` to free memory allocated by `PQescapeIdentifier`. This mirrors a similar fix previously applied.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"B2FD26B4-8F64-4552-A603-5CC3DF1C7103@yesql.se","summary":"This patch introduces a new variable, WATCH_INTERVAL, to allow users to configure the default interval for the \\watch command in psql. If no interval is explicitly provided to \\watch, the value of WATCH_INTERVAL will be used. The default value remains 2 seconds.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The latest patch (v5) has been posted and is waiting for review before it is committed.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKK5BkESSc69sp2TiTWHvvOHCUey0rDWXSrR9pinyRqyfamUYg@mail.gmail.com","summary":"The proposed patch adds an option to libpq that allows it to check all addresses for a given host when attempting to match `target_session_attr`, even if the first address fails to match. This addresses a scenario where DNS returns multiple IP addresses, but libpq only checks the first one.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The author needs to rebase the patch, write a real commit message, adjust tests, add documentation, and change how the 'check_all_addrs' option is implemented to be consistent with other libpq options.","would_benefit_from_new_reviewer":"NO"}, {"id":"2039ac58-d3e0-434b-ac1a-2a987f3b4cb1@greiz-reinsdorf.de","summary":"The patch aims to fix an issue in libpq's asynchronous API where it fails to handle SSL records larger than 8kB, leading to starvation in certain PostgreSQL-compatible servers like AWS Aurora Serverless, YugabyteDB, and CockroachDB. The proposed solution involves repeatedly calling pqReadData() in PQconsumeInput() until all buffered SSL data is processed.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether other parts of libpq assume that a single call to pqReadData will drain the buffers, and whether GSSAPI connections have the same issue.","would_benefit_from_new_reviewer":"YES"}, {"id":"CABUevEyTMyXC6OvCWkj+rPnHrfi8_Rw_+DD_jzgFFNPqgf+Oig@mail.gmail.com","summary":"The proposal is to add the default version of an extension to the \\dx command in psql, to make users aware of when they need to run ALTER EXTENSION UPDATE after upgrading an extension. The patch needs a few minor adjustments including changing the alias 'c' to 'd' for pg_description and adding spaces around the '=' sign in the join condition. Also, the label 'Version' should be changed to 'Installed Version'.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"The author needs to address the requested changes, including alias naming, spacing, and column label consistency.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKiP-K85C8uQbzXKWf5wHQPkuygGUGcufke713iHmYWOe9q2dA@mail.gmail.com","summary":"This patch adds support for logging SSL secrets used in TLS connections on the client side (psql) to a file specified via a connection parameter, allowing tools like Wireshark to decrypt and analyze the traffic. The patch includes changes to handle file permissions and incorporates tests and documentation.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"Several issues have been identified in the latest patch, including the location of the test output, documentation inconsistencies, error handling, the method for setting file permissions, compatibility with older LibreSSL versions, and test implementation details.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAM527d8kG2qPKvbfJ=OYJkT7iRNd623Bk+m-a4ngm+nyHYsHog@mail.gmail.com","summary":"This patch adds a `--no-policies` option to `pg_dump`, `pg_dumpall`, and `pg_restore` to exclude policies from the backup and restore process. This allows users to redefine policies in the target system or move data between environments with different security requirements.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"A potential missing assignment in `pg_dump.c` and failing tests on the build farm have been identified.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAO6_XqroE7JuMEm1sWz55rp9fAYX2JwmcP_3m_v51vnOFdsLiQ@mail.gmail.com","summary":"This patch adds pipelining support to psql with new meta-commands (\\startpipeline, \\endpipeline, \\syncpipeline, \\flushrequest, \\flush, \\getresults) to allow testing pipelined query behavior using psql regression tests. It also introduces new prompt variables to track pipeline status.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"The main patch has been applied, but there are two remaining patches related to tests and prompt support that are on standby for a few days pending buildfarm results.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAO_rXXBS0NictfmXodASjxqKgFDtUj_J1xUL100oeGJ3Mt+K8w@mail.gmail.com","summary":"This patch adds the -k/--link option to pg_combinebackup, allowing it to use hard links instead of copying files, potentially improving performance and reducing disk usage when creating synthetic backups. It includes a warning about the potential for invalidating input backups if the synthetic backup is modified or started without being moved.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The current patch needs review to ensure it is safe, well-tested, and handles different segment sizes appropriately, and that the added tests pass on CI.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKFQuwbwNue2bDA4_SW2UZ-Yrj91FVre76SJXVsvBrJf2cteUQ@mail.gmail.com","summary":"This patch aims to improve the documentation of NULL values in PostgreSQL by providing an introduction to the topic and an overview of how NULL is handled throughout the system. The patch includes changes to the documentation structure and content, with a focus on SQL NULL behavior, and addresses various aspects like filtering, data types, settings, and partition keys.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main issue currently being discussed revolves around clarifying specific examples and wording choices in the documentation, with recent feedback focusing on JSON null handling, array elements, and terminology.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAD68Dp3L6yW_nWs+MWBs6s8tKLRzXaQdQgVRm4byZe0L-hRD8g@mail.gmail.com","summary":"This patch adds tab completion for the ONLY option in VACUUM and ANALYZE commands, which was recently introduced, and also adds auto-completion for starting parenthesis '(' to improve usability.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKFQuwa=iY13UkH2K4-Srut9iaXBi2FkLzWRxbok+mdSMPEDuA@mail.gmail.com","summary":"The patch aims to improve the clarity and reduce verbosity in the PostgreSQL documentation regarding hostssl related descriptions and option presentations, addressing redundancy in the overview section.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"No specific issues have been raised, but the author is waiting for general feedback on the proposed documentation changes.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGECzQQoc+V94TrF-5cMikCMaf-uUnU52euwSCtQBeDYqXnXyA@mail.gmail.com","summary":"This patch proposes renaming protocol extensions to protocol options throughout the PostgreSQL documentation and code, to avoid confusion with PostgreSQL extensions created with CREATE EXTENSION.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"The main issue is choosing the best terminology, with various alternatives like 'protocol options,' 'protocol extensions,' and 'protocol parameters' being considered.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKFQuwaS6DtSde4TWpk133mfaQbgh8d+Pkk0kDN=6jf6qEWbvQ@mail.gmail.com","summary":"The proposal is to move the standalone backup documentation section in the PostgreSQL documentation to a more logical location under file system backups and to mention the -X argument. The reviewer suggested a more comprehensive re-organization of the backup documentation.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The current organization of the backup documentation is incoherent, and the proposed patch may not go far enough in addressing this issue.","would_benefit_from_new_reviewer":"NO"}, {"id":"CADE6Lvg=tW7pNNLT=2c0W6G9egm8fFmmSHgmtV16AbuSuqZExw@mail.gmail.com","summary":"The proposed patch introduces a new psql metacommand, \\dh, to provide a concise overview of high-level (root) relations, including tables and indexes, particularly useful in databases with extensive partitioning. It includes variants \\dht and \\dhi for tables and indexes respectively, and a '+' option for additional details like size.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch is awaiting review.","would_benefit_from_new_reviewer":"YES"}, {"id":"54d16298-da71-48f1-96e0-8f011cf5c6ce@dalibo.com","summary":"The proposal aims to improve the organization of the PostgreSQL documentation regarding backups, specifically the 'Standalone Hot Backups' section, by moving it from 'Tips and Examples' and integrating it more logically within the 'Continuous Archiving, backups and Point-in-Time Recovery (PITR)' section. This includes renaming sections and adjusting the hierarchy to better reflect the relationship between different backup methods.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The main issue is determining the most appropriate location and naming for the 'Standalone Hot Backups' section within the documentation to avoid misinterpretations, particularly its relation to PITR.","would_benefit_from_new_reviewer":"YES"}, {"id":"CADrHaBFMWsMxGoPBPqY570HSDQZeJ3BtJHhSbUg5LFdErZX6ug@mail.gmail.com","summary":"The thread discusses the inconsistency in PostgreSQL's handling of timezones, specifically the POSIX vs ISO interpretation of timezone offsets with the 'AT TIME ZONE' syntax. The final resolution was to improve the documentation to highlight this behavior and prevent user confusion.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"00e6eb5f5c793b8ef722252c7a519c9a@oss.nttdata.com","summary":"The patch aims to improve the documentation for ALTER TABLE ADD COLUMN by clarifying when a table rewrite is necessary, specifically addressing cases beyond volatile DEFAULT values, such as adding an IDENTITY column or a column with a domain data type that has constraints.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"4c5dee3a-8381-4e0f-b882-d1bd950e8972@dalibo.com","summary":"This patch aims to clarify the documentation of pgstatindex, specifically explaining index fragmentation in more detail.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"bf110561-f774-4957-a890-bb6fab6804e0@dalibo.com","summary":"This patch aims to improve the documentation of the pg_stat_index view, specifically the avg_leaf_density and leaf_fragmentation columns, to provide users with a better understanding of index fragmentation and its performance implications.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"While the patch is marked ready for committer, there is still some curiosity about why fragmentation slows down SSD performance, even though random reads are generally considered fast on SSDs.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHut+Pt_7GV8eHSW4XQsC6rF13TWrz-SrGeeiV71=SE14DC4Jg@mail.gmail.com","summary":"The proposal is to add examples to the documentation section on generated column replication to clarify the feature and make it easier for users to understand and experiment with it.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"Whether the existing documentation is sufficient, or whether examples are needed to clarify subtle rules and encourage experimentation.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxFgAh1--EMwOjMuANe=VTmjkNaZjH+AzSe04-8ZCGiESA@mail.gmail.com","summary":"The proposal is to split the func.sgml file into 31 individual files, one for each section, named with the prefix func-. A python script and patch are provided to automate this process.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The reviewer suggests breaking up the changes into multiple commits to ease review burden.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKZiRmwBcALLrDgCyEhHP1enUxtPMjyNM_d1A2Lng3_6Rf4Qfw@mail.gmail.com","summary":"The proposal aims to add a recommendation to the documentation for `hot_standby_feedback` to advise users to synchronize system clocks between the primary and standby servers. This is because significant time discrepancies or time jumps on the standby can disrupt the feedback mechanism and lead to prolonged dead row retention on the primary.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":2,"problem":"The current wording of the documentation patch needs to be updated to accurately reflect the impact of clock discrepancies, especially clock jumps on the standby server, on the hot_standby_feedback mechanism. There also appears to be a question on whether backporting the documentation changes is the correct approach.","would_benefit_from_new_reviewer":"NO"}, {"id":"TYVPR01MB113306AB19264E89AD360A40EE4522@TYVPR01MB11330.jpnprd01.prod.outlook.com","summary":"The patch aims to improve the documentation for building PostgreSQL with Meson on Windows, specifically clarifying how to specify the locations of dependencies using PKG_CONFIG_PATH, -Dextra_include_dirs, and -Dextra_lib_dirs.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHut+PtxXLJFhwJFvx+M=Ux8WGHU85XbT3nDqk-aAUS3E5ANCw@mail.gmail.com","summary":"The proposal aims to standardize the capitalization of TOAST (The Oversized-Attribute Storage Technique) in PostgreSQL documentation, distinguishing it from the common word toast. The latest version of the patch focuses on uncontroversial changes in the documentation, leaving more complex cases for future consideration.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Whether to consistently uppercase TOAST even in combined forms like toasting and whether terms like TOAST table are preferable to toast table.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKFQuwYgYR3rWt6vFXw=ZWZ__bv7PqvdOnHujG+UyqE11f+3sg@mail.gmail.com","summary":"The patch adds documentation to the COMMIT reference page and the transaction section of the tutorial to clarify how PostgreSQL handles aborted transactions, specifically that COMMIT acts like ROLLBACK in such cases and outputs 'ROLLBACK'.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKFQuwYfMV-2SdrP-umr5SVNSqTn378BUvHsebetp5=DhT494w@mail.gmail.com","summary":"The patch aims to improve the documentation for CREATE TABLE, addressing issues like the unclear explanation of UNLOGGED tables in partitioned tables, framing temporary and unlogged tables as persistence modes, shortening excessive line lengths in syntax blocks, and clarifying column storage syntax.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"The main issue discussed is the best way to describe the persistence modes of tables (default, temporary, and unlogged) and whether 'reliability' is the appropriate term.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACbFw60UOk6fCC02KsyT3OfU9Dnuq5roYxdw2aFisiN_p1L0bg@mail.gmail.com","summary":"The patch corrects the documentation regarding the aggressive vacuum threshold for multixact members storage, clarifying that the threshold is about 10GB and the maximum storage size is 20GB.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAGECzQTpdujCEt2SH4DBwRLoDq4HJArGDaxJSsWX0G=tNnzaVA@mail.gmail.com","summary":"The proposal aims to provide more flexible control over when backtraces are included in PostgreSQL logs. It introduces a `log_backtrace_mode` GUC to specify whether backtraces should be included for all errors, internal errors, or none, along with a `backtrace_min_level` GUC to filter backtraces by error level and `backtrace_functions` GUC to filter based on function names.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main concern is whether having three inter-dependent GUCs to control backtrace behavior is the right approach, particularly if the user wants the pre-existing behavior for adding backtraces to all elog/ereport calls to specific functions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKFQuwY0SK6JdCci1VJX6xsztRXgGeVEY-grkENZx+3CZpyPcQ@mail.gmail.com","summary":"This patch improves the documentation for custom settings, placeholders, and administrative functions like `set_config` and `current_setting`, clarifying that settings cannot have NULL values and explaining the behavior of custom options and placeholders.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The initial patch suggested changing the documentation of `current_setting` to say it returns the current non-null value, but a reviewer pointed out it can return NULL when `missing_ok` is true. The author has clarified that the NULL return is in lieu of an error and doesn't represent the value of the setting itself, and the reviewer has indicated LGTM.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEze2Wg-+EV4HdbQiut7X3KQd39xwmrpV4CeCmoJFFjH8cGdhw@mail.gmail.com","summary":"The initial patch aimed to expand the applicability of the aggregate's sortop optimization for MIN/MAX aggregates with ORDER BY clauses by ensuring the orderings are compatible. This has evolved into a proposal to introduce aggregate prosupport functions to allow more flexible optimization of aggregates, including potentially removing redundant ordering or distinct clauses, and swapping count(<non-nullable-col>) for count(*).","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The latest patch introducing prosupport functions for aggregates is causing deadlocks in regression tests, likely due to modifications affecting concurrency or shared resources during parallel test execution.","would_benefit_from_new_reviewer":"NO"}, {"id":"CADrsxdYj2SMquRgf=DS9d_qLMW_gnF7PxzRp0VKTM7OfBsPpVg@mail.gmail.com","summary":"The patch disallows the use of empty strings for the column_name, schema_name, and table_name options in CREATE or ALTER FOREIGN TABLE statements when using postgres_fdw. This prevents errors during remote query execution where empty column names cause issues.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAEZATCXpGyfjXCirFk9au+FvM0y2Ah+2-0WSJx7MO368ysNUPA@mail.gmail.com","summary":"This patch proposes adding the gamma() and lgamma() functions to PostgreSQL, which are commonly used mathematical functions found in C99 and other libraries. The latest version of the patch (v4) aims to align the behavior of these functions with the POSIX specification, particularly concerning the handling of special values like NaN, infinity, and overflow.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The behavior of gamma() near zero needs to be resolved: should it return an error or infinity, and whether the current implementation of error/infinity handling is correct and useful.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJ7c6TPtOp6+kFX5QX3fH1SVr7v65uHr-7yEJ=GMGQi5uhGtcA@mail.gmail.com","summary":"This patch adds casts between bytea and integer types (int2, int4, int8), using big-endian representation and two's complement. The get_bytes() and set_bytes() functions were dropped due to lack of support.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Reviewers need to examine the latest patch (v9) incorporating requested changes, particularly focusing on endianness.","would_benefit_from_new_reviewer":"YES"}, {"id":"ZiYjn0eVc7pxVY45@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch aims to avoid orphaned object dependencies by acquiring a lock on each referenced object during dependency recording. It implements a special case for relations, acquiring a lock only if one doesn't already exist. The latest version addresses concerns about getObjectDescription() and provides the object OID instead of a meaningful error message when the object is dropped.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether the current locking strategy is correct and complete, especially regarding RelationRelationId and whether the additional locking overhead is acceptable.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAHewXN=8aW4hd_W71F7Ua4+_w0=bppuvvTEBFBF6G0NuSXLwUw@mail.gmail.com","summary":"The patch proposes removing an unnecessary check in the `semijoin_target_ok()` function within `postgres_fdw.c`. The check `!bms_is_member(var->varno, outerrel->relids)` is deemed redundant because if `bms_is_member(var->varno, innerrel->relids)` is true, the former condition is always true as well.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"4f0cea802476d23c6e799512ffd17aff@postgrespro.ru","summary":"The patch allows postgres_fdw to deparse ArrayCoerceExpr, enabling pushdown of field = ANY($1) expressions when selecting data from foreign tables with varchar(N) fields, even when the local and remote types require a cast. This addresses a situation where prepared statements with array parameters could not be pushed down to the foreign server when using generic plans, due to the need to translate the input array type.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"The patch changes cast behavior in cases where local and foreign types are mismatched, which may be undesirable if local type conversion failures do not necessarily imply remote conversion failures.","would_benefit_from_new_reviewer":"NO"}, {"id":"vximpev4vsyqvzvjn3qxb2apltuaxw7j4uxc4lggyjh3ejjbzx@66clgfgm6vlk","summary":"This patch introduces two new system views: pg_system_versions, which displays core, compiler, and LLVM versions, and pg_system_libraries, which lists linked shared objects, to facilitate bug reporting.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether to include versions of all linked dependencies automatically or require manual registration for specific components in pg_system_versions, and whether the current set of information is sufficient.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+E0NR4S+NC6+QHyY_vUuQZMzLhKqczMx-jJVqtjAxF6+=JwAA@mail.gmail.com","summary":"This patch introduces a new parameter, max_log_size, that defines the maximum size of a logged query, in bytes, truncating anything beyond that size. The patch has undergone several revisions and has addressed concerns about patch application, default values, documentation, and compilation warnings.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAFY6G8eLyz7+sccegZYFj=5tAUR-GZ9uEq4Ch5gvwKqUwb_hCA@mail.gmail.com","summary":"This patch aims to replace ReadBufferExtended usage with the read stream API in the amcheck extension, potentially benefiting from AIO in the future. The latest version (v3) incorporates feedback from previous reviews.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"Whether READ_STREAM_SEQUENTIAL flag should always be set, or only when skip_option == SKIP_PAGES_NONE.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAN55FZ0h_YoSqqutxV6DES1RW8ig6wcA8CR9rJk358YRMxZFmw@mail.gmail.com","summary":"This patch adds three new functions to pg_buffercache: pg_buffercache_evict_all(), pg_buffercache_mark_dirty(), and pg_buffercache_mark_dirty_all(). These functions provide a way to efficiently evict all shared buffers or mark them as dirty, primarily for testing and benchmarking purposes.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The current implementation of pg_buffercache_evict_all() might not accurately report 'flushed' status, and pg_buffercache_mark_dirty() could potentially dirty buffers even when the relation is exclusively locked.","would_benefit_from_new_reviewer":"NO"}, {"id":"146349e4-4687-4321-91af-f235572490a8@eisentraut.org","summary":"The proposal involves updating the Unicode data to version 16.0.0. This includes a patch to update the Unicode data itself, and a subsequent patch to add a pg_upgrade check for potentially affected indexes due to the Unicode update.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main issue is mitigating the potential need to rebuild indexes after a Unicode update, and ensuring that pg_upgrade can detect and warn about such dependencies.","would_benefit_from_new_reviewer":"YES"}, {"id":"dd4d1b59-d0fe-49d5-b28f-1e463b68fa32@gmail.com","summary":"This proposal aims to add module information (name, version, etc.) into the Postgres binary file using the PG_MODULE_MAGIC_EXT macro, allowing extensions to expose version and identity information, particularly useful for extensions not installed via CREATE EXTENSION. The information would be accessible via a new system SRF function, potentially named pg_get_modules().","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The latest feedback requests changes to tests, SQL function name, git diff formatting and asks for documentation. Also, there's the open question of whether to switch all in-core libraries to use PG_MODULE_MAGIC_EXT().","would_benefit_from_new_reviewer":"NO"}, {"id":"603c8f070905281830g2e5419c4xad2946d149e21f9d@mail.gmail.com","summary":"The proposal aims to improve the readability and usefulness of EXPLAIN ANALYZE output by displaying fractional digits for the row count when the number of loops is greater than 1. This would help users understand the average row count per loop more precisely, especially when the average is less than 1 and currently gets rounded to 0. The current accepted plan is to show 2 digits after the decimal, when nloops > 1.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"Whether to show fractional digits only when iterations yield different numbers of tuples, or to show 2 fractional digits whenever nloops > 1, and whether the complexity of the documentation example is warranted.","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+14426e8dbmMjGLu8jO8CQAb9-FKiM-CQhvQHUB=3OnJwWpzQ@mail.gmail.com","summary":"This thread proposes incorporating Coccinelle, a pattern matching and text transformation tool for C code, into PostgreSQL development. The initial patches include a coccicheck.py script, build system integration (Autoconf and Meson), and example semantic patches to identify and correct bugs, enforce APIs, improve coding patterns, and refactor code (e.g., using palloc_array/palloc_object).","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The main question is whether to use coccicheck to automatically refactor code to use palloc_array/palloc_object more widely, and whether such a change should be limited to HEAD or backported.","would_benefit_from_new_reviewer":"YES"}, {"id":"07d5fd6a-71f1-4ce8-8602-4cc6883f4bd1@oss.nttdata.com","summary":"The patch optimizes FastPathTransferRelationLocks() by recalculating the fast-path group only once per iteration and extends similar optimization logic to GetLockConflicts(). It also removes the check for pid == 0 during lock transfer, relying instead on proc->fpLockBits[group] == 0.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether clearing databaseid on backend exit is needed.","would_benefit_from_new_reviewer":"YES"}, {"id":"20250121122937.edfdba2b3dfa3dba330a6b66@sraoss.co.jp","summary":"The proposal is to add a function, get_extension_version, that allows an extension to determine its own version. An additional idea is to allow version requirements in the requires list in extension control files.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The primary issue is that the use case for the get_extension_version function isn't clear, and it's not obvious how an extension would determine its own OID to call the function. There are also compilation errors.","would_benefit_from_new_reviewer":"NO"}, {"id":"93e7f77bf4e1ef4640e4ee733f9e2a78@postgrespro.ru","summary":"The patch aims to display the plperl version in the meson setup summary screen, which currently only shows 'YES' or 'NO'. The latest version of the patch attempts to use perl's 'version' instead of 'api_versionstring' for consistency with the configure script.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Whether to use 'version' or 'api_versionstring' from perl, and how to handle colorizing the output in the meson setup summary.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAPpHfdsjtZLVzxjGT8rJHCYbM0D5dwkO+BBjcirozJ6nYbOW8Q@mail.gmail.com","summary":"This patch implements a new utility command `WAIT FOR LSN 'target_lsn' [, TIMEOUT 'timeout'][, THROW 'throw']` to allow a standby server to wait for a specific LSN to be replayed, providing a mechanism for read-your-writes consistency. The implementation avoids deadlocks by using a custom syntax to prevent snapshot issues.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the custom syntax using unreserved keywords is appropriate for future extensions of the `WAIT` command for other scenarios.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGECzQQh6VSy3KG4pN1d=h9J=D1rStFCMR+t7yh_Kwj-g87aLQ@mail.gmail.com","summary":"The proposal involves bumping the soft open file limit (RLIMIT_NOFILE) to the hard limit on startup for Postgresql, particularly for postmaster and pgbench. The goal is to avoid too many open files errors and improve performance, especially with features like AIO and threading, while taking into account compatibility with legacy programs using select(2). The pgbench part of the patch has been committed; discussion continues on the postmaster part of the patch, including how to account for io_uring and monitoring file descriptor usage.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"How to adjust RLIMIT_NOFILE to account for io_uring file descriptors and whether RestoreOriginalOpenFileLimit() is actually viable, as well as how to properly communicate issues with file descriptor limits to the DBA","would_benefit_from_new_reviewer":"NO"}, {"id":"b8b8502915e50f44deb111bc0b43a99e2733e117.camel@cybertec.at","summary":"The proposal is to change the default value of `log_lock_waits` to `on`.  There is also a related idea to decouple `log_lock_waits` from `deadlock_timeout`, but this is seen as more complex and is not a prerequisite for the main proposal.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":2,"problem":"Whether the increased log volume due to enabling `log_lock_waits` by default will be detrimental for most users. Tom Lane is opposed to the change because of this concern, while several others have voiced support.","would_benefit_from_new_reviewer":"NO"}, {"id":"CB11ADBC-0C3F-4FE0-A678-666EE80CBB07@amazon.com","summary":"This patch series aims to fix a pg_trgm comparison bug that occurs in cross-architecture replication due to differences in the default signedness of the 'char' type on different platforms (x86 vs ARM). It achieves this by adding a default_char_signedness field to the control file, set at initdb time. pg_upgrade is modified to preserve this setting or allow it to be overridden, and pg_resetwal is extended with a --char-signedness option for manual adjustment. The pg_trgm extension then utilizes this control file setting to ensure consistent trgm comparisons.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"All concerns raised during the patch review process have been addressed, and the author is ready to commit the changes.","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+q6zcWtUbT_Sxj0V6HY6EZ89uv5wuG5aefpe_9n0Jr3VwntFg@mail.gmail.com","summary":"The patch aims to improve pg_stat_statements by preventing pollution from queries with varying lengths of constant arrays in IN clauses. It introduces a GUC to squash these arrays, replacing the constants with a representation indicating a merged list. Recent discussion revolves around whether to include support for prepared statements and how to handle type conversions and function calls within the array expressions, as well as the best approach to represent it.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The key issue is determining the right level of complexity and scope for the patch, specifically whether to include support for prepared statements and different data types from the start, and how best to handle function calls and implicit conversions within the array expressions and how to display it on query normalization.","would_benefit_from_new_reviewer":"NO"}, {"id":"pxr5b3z7jmkpenssra5zroxi7qzzp6eswuggokw64axmdixpnk@zbwxuq7gbbcw","summary":"This patch series aims to replace the existing pg_attribute_noreturn() macro with a more modern and standard-compliant approach using _Noreturn (C11) and __declspec(noreturn) (MSVC) where applicable, while also addressing issues related to function pointers and third-party header conflicts. It also introduces pg_nodiscard support for non-GNU compilers that support C23, and enforces stylistic consistency.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main issues are related to how to handle function pointers with noreturn attributes, potential conflicts with third-party headers that also use noreturn attributes, and ensuring compatibility across different compilers and C standards.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAH2-WzkRqvaqR2CTNqTZP0z6FuL4-3ED6eQB0yx38XBNj1v-4Q@mail.gmail.com","summary":"This patch adds instrumentation to EXPLAIN ANALYZE to display the number of index searches performed by index scan nodes, providing insight into the efficiency of index scans, particularly for features like skip scan and ScalarArrayOps (SAOP) optimizations. The most recent version of the patch does not divide the count by nloops.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The primary outstanding question is where to store the state (the count of index searches) - whether in IndexScanDesc, BTScanOpaque, or some other global structure, and how to expose the information without adding unnecessary clutter to EXPLAIN output.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAOYmi+=60deN20WDyCoHCiecgivJxr=98s7s7-C8SkXwrCfHXg@mail.gmail.com","summary":"The proposed patch aims to make slow or hanging authentication processes more visible in `pg_stat_activity`. It involves reporting a 'starting' state during backend initialization and client authentication and introducing a new Auth wait class for external authentication systems, providing more granular insights into authentication-related delays.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"There is ongoing debate regarding the safety of exposing SSL/GSS related information in `pg_stat_activity` before authentication completes, and whether to allow `pgstat_bestart_security` to be called multiple times.","would_benefit_from_new_reviewer":"NO"}, {"id":"b4220d15-2e21-0e98-921b-b9892543cc93@dalibo.com","summary":"This patch set introduces a new GUC, `log_parallel_workers`, to control the logging of parallel worker usage in queries and utility statements (VACUUM, CREATE INDEX, REINDEX). The GUC has three settings: 'none', 'all', and 'shortage'. It aims to help DBAs audit and understand parallel worker usage, particularly in environments where they have limited prior knowledge or use external schedulers.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"45AC9B0A-2B45-40EE-B08F-BDCF5739D1E1@yandex-team.ru","summary":"This thread discusses a patch to add amcheck verification support for GiST and GIN indexes, allowing users to check for corruption in these index types. The latest version of the patchset (v35) addresses issues related to incorrect maxoff calculations and the handling of high keys on rightmost pages in GIN indexes, as well as addressing memory leaks in the GiST code and incorporating feedback from reviewers. The patchset also includes integration of GiST index verification into pg_amcheck.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The gin_index_check utility still does not work properly under some conditions. There are also issues with ensuring the AM returns a consistent fingerprintable binary output.","would_benefit_from_new_reviewer":"YES"}, {"id":"ZlGYokUIlERemvpB@ip-10-97-1-34.eu-west-3.compute.internal","summary":"The proposed patch aims to add relfilenode statistics to track dirtied and written blocks on a per-relation basis, even when the relation OID is not available, particularly during buffer writes. The goal is to improve write accounting and potentially benefit features like physical replication by enabling population of statistics like n_dead_tup during WAL replay.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The biggest issue is determining the best way to incorporate relfilenode statistics without negatively impacting performance or creating inconsistencies in how stats are tracked and presented to the user, especially regarding relation rewrites.","would_benefit_from_new_reviewer":"YES"}, {"id":"411280a186cc26ef7034e0f2dfe54131@oss.nttdata.com","summary":"This patch introduces a new GUC parameter, `log_lock_failure`, to enable detailed logging of lock failures caused by `NOWAIT`. The discussion is currently focused on the best approach to implement this, particularly concerning how to handle the interaction with `SKIP LOCKED` and how to modify the locking functions to accommodate the new logging behavior.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"How to best integrate the new logging functionality into the existing locking mechanisms, especially concerning avoiding excessive logging with SKIP LOCKED and modifying the locking functions without significant code refactoring.","would_benefit_from_new_reviewer":"NO"}, {"id":"fe99e0ca-e564-480e-b865-5f0cee30bc60@tantorlabs.com","summary":"The patch aims to reduce spinlock contention in pg_stat_statements by introducing a mechanism to selectively track queries. The latest approach proposes using an execution time threshold: queries exceeding the threshold are tracked, while others are ignored.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Sami believes that the sample rate approach would be a better fit, since the queries that a user would care about the most are usually the most frequently executed, and sampling them would still provide enough good data without the risk of not capturing statistics about them at all. Also, the query normalization is not working for all cases when pg_stat_statements.track is changed after queries have been parsed.","would_benefit_from_new_reviewer":"YES"}, {"id":"bee34abe-fe87-49b3-8523-8ae19e641ccf@yandex.ru","summary":"This patch proposes adding extended vacuum statistics to help administrators better understand and tune vacuum processes. The feature involves new system views and a GUC to control the level of detail collected. The latest iteration focuses on database-level statistics always being collected, with relation statistics enabled by the GUC.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"How to manage the increased size of statistics and balance the benefits of detailed information with the overhead of storing it. There is also concern that new statistics won't work for alternative table AMs.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAH2L28v8mc9HDt8QoSJ8TRmKau_8FM_HKS41NeO9-6ZAkuZKXw@mail.gmail.com","summary":"This patch introduces a new function, pg_get_process_memory_contexts, to provide a SQL view of memory context statistics for all PostgreSQL backends and auxiliary processes. It improves upon existing methods by offering on-demand statistics retrieval without relying on log files, using a shared DSA for communication and implementing mechanisms to handle concurrent requests and avoid timeouts. The function is restricted to superusers and users with pg_read_all_stats privileges.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issues are ensuring the reliability and performance of the statistics retrieval process, especially in concurrent scenarios, and making a final decision about best approach to ensure atomicity and minimize impact in the target backends.","would_benefit_from_new_reviewer":"YES"}, {"id":"Z3zqc4o09dM/Ezyz@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch proposes adding per-backend WAL statistics, accessible via the function pg_stat_get_backend_wal(). The patch has gone through several revisions, with recent discussion focusing on reducing the scope of statistics provided by pg_stat_get_backend_wal() and removing redundant WAL statistics from pg_stat_wal, in favor of using pg_stat_io.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Whether to remove wal_write, wal_write_time, wal_sync and wal_sync_time from pg_stat_wal, and the implications for the track_wal_io_timing GUC, are currently under discussion in a separate thread. The author is expected to provide a new version of the patch based on this discussion.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAKRu_b_smAHK0ZjrnL5GRxnAVWujEXQWpLXYzGbmpcZd3nLYw@mail.gmail.com","summary":"This patch adds logging of connection establishment timings, including authentication duration, fork duration, and total connection time, to aid in debugging slow connection issues.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The primary issue is whether to use TimestampTz or instr_time for measuring durations, considering potential inaccuracies due to system time changes. Also, there's a question about where exactly to record the timestamp in SubPostmasterMain.","would_benefit_from_new_reviewer":"NO"}, {"id":"c20f6340eb26f3b736abc59471bfada8@oss.nttdata.com","summary":"The proposed patch adds storage I/O statistics (reads and writes) to the EXPLAIN command, accessible via the BUFFERS option. It leverages `ru_inblock` and `ru_oublock` from `getrusage()` to provide insights into disk I/O activity during query execution. The patch aims to help diagnose query performance issues by distinguishing between I/O from shared buffers, OS cache, and actual disk reads/writes.","status":"LACKS_SUPPORT","activity":"ACTIVE","complexity":3,"problem":"The patch is fundamentally incompatible with asynchronous I/O (AIO), which is planned to be the default in the near future. The statistics provided by the patch would be misleading or inaccurate when using worker-based AIO, as it doesn't track I/O performed by background workers.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAP53Pkyow59ajFMHGpmb1BK9WHDypaWtUsS_5DoYUEfsa_Hktg@mail.gmail.com","summary":"This patchset introduces a new in-core facility to track Plan IDs by hashing plan nodes during the treewalk in setrefs.c, controlled by the 'compute_plan_id' GUC, along with a pg_stat_plans extension in contrib for illustration and usage of the plan IDs. The goal is to enable tracking of plan changes for the same query over time.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The naming of the jumbling functions and node attributes is under discussion, with 'fingerprint' being considered as an alternative to 'jumble'. Also, there is a broader discussion of whether queryId computation can/should be tweaked in core to handle temporary tables more gracefully.","would_benefit_from_new_reviewer":"NO"}, {"id":"d68c3ae31672664876b22d2dcbb526d2@postgrespro.ru","summary":"This patch proposes a function, pg_log_query_plan(), to log the query plan of a running backend process. The latest iteration wraps all ExecProcNode calls in the planstate tree to handle interrupt signals safely. It has faced challenges related to re-entrancy, potential deadlocks, and overhead, leading to multiple revisions and discussions on the best approach to ensure stability and minimal performance impact. There have been questions raised about whether it should be merged into auto_explain to reduce code duplication, or have portions of auto_explain merged into core.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current approach of wrapping all ExecProcNode calls may have performance implications and interactions with JIT. Concerns remain about ensuring the safety of EXPLAIN code execution within interrupt handlers, particularly regarding re-entrancy and potential conflicts with other subsystems.","would_benefit_from_new_reviewer":"YES"}, {"id":"cb103623-8ee6-4ba5-a2c9-f32e3a4933fa@dunslane.net","summary":"This patch adds support for non-text (directory, custom, and tar) formats to pg_dumpall, allowing for more efficient and parallel backups of entire database clusters. It also introduces corresponding changes to pg_restore to restore these backups. The latest version of the patch series restructures the code, addresses various bug fixes and cosmetic improvements proposed by reviewers, and handles edge cases related to options like --exclude-database, --globals-only and --list.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The evergrowing on_exit list needs to be addressed with a better solution than increasing MAX_ON_EXIT_NICELY and all code needs to be pgindented.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKZiRmxh6KWo0aqRqvmcoaX2jUxZYb4kGp3N=q1w+DiH-696Xw@mail.gmail.com","summary":"This patch aims to add basic NUMA (Non-Uniform Memory Access) observability to PostgreSQL, allowing users to see which NUMA zone the buffer cache pages are allocated in. The current approach involves using move_pages() to determine the NUMA zone, but there are concerns about its accuracy and potential side effects, and the discussion is shifting towards a sampling approach using get_mempolicy().","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The main issue is determining the most accurate and efficient method to map buffer cache pages to NUMA zones, considering the limitations of move_pages() and get_mempolicy(). The trade-offs between performance and accuracy are being discussed, with a possible solution involving sampling a subset of the buffer cache.","would_benefit_from_new_reviewer":"NO"}, {"id":"02db8cd8e1f527a8b999b94a4bee3165@oss.nttdata.com","summary":"The proposal is to change the log level of a DEBUG1 message related to hot standby recovery waiting for non-overflowed snapshots to a higher level like NOTICE. This aims to improve the visibility of this issue for users, making diagnosis easier when a hot standby becomes inaccessible after a restart due to subtransaction overflow.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The key issue is whether the current log level is appropriate for users to diagnose the problem and whether a NOTICE level is sufficient.","would_benefit_from_new_reviewer":"YES"}, {"id":"192f7185defa370d083e3a237727b066@postgrespro.ru","summary":"The patch aims to improve the pg_stat_statements save/load routines by excluding the slock_t mutex field from being written to and read from the dump file, as it is not used after loading.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The main question is whether the small reduction in disk space usage justifies the change, given the infrequency of statistics dumping.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEP4nAx-Mp52k=tyAEJrD5SS4nOJm60uz4J3KgtKfTt2qPRyzA@mail.gmail.com","summary":"The proposal is to add a new function, pg_accept_connections_start_time(), that returns the time when the database became ready to accept connections. This is intended to provide a more accurate measure of database uptime than pg_postmaster_start_time() and to help distinguish between server restarts and other connection issues.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The function name is considered too verbose, and there is a question of whether to add similar information to `pg_ctl status`. There is also a question about the best place to capture the timestamp during startup in single-user mode.","would_benefit_from_new_reviewer":"NO"}, {"id":"cf85f46f-b02f-05b2-5248-5000b894ebab@enterprisedb.com","summary":"This thread discusses a patch that adds prefetching to regular index scans to improve performance by anticipating heap page access. The latest iteration moves the prefetching logic to indexam.c, introduces a new amgettuplebatch() callback for index AMs to efficiently return batches of TIDs, and utilizes the StreamingRead API for asynchronous I/O. The design aims to balance prefetching benefits with existing database functionalities like kill_prior_tuple and index-only scans, ensuring robustness and minimizing performance regressions.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The integration of prefetching with the index AM API, while maintaining existing functionality such as kill_prior_tuple, needs further refinement to determine the optimal balance between control in the index AM and higher-level components like the executor. The best strategy for handling the potential disruption to kill_prior_tuple remains an open question.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJ2pMkZNCgoUKSE+_5LthD+KbXKvq6h2hQN8Esxpxd+cxmgomg@mail.gmail.com","summary":"This patch series aims to reduce planning time for queries on partitioned tables by optimizing EquivalenceClass member lookups. The latest version, v32, refactors the code to reduce redundancy, improve code maintainability, and balance planning time and memory usage. It introduces an iterator mechanism to avoid unnecessary memory allocations and refactors the code to remove child EquivalenceMembers from EquivalenceClass, while ensuring the continued ability to search for child members when necessary.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding problem is a need to evaluate the impact of the changes on memory usage more thoroughly, and to potentially move the indexing from PlannerInfo to RelOptInfo using aliases, while balancing various benchmarks to avoid regressions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAA5RZ0vyWd4r35uUBUmhngv8XqeiJUkJDDKkLf5LCoWxv-t_pw@mail.gmail.com","summary":"The proposal is to allow extensions to set a 64-bit plan identifier (planId) that can be exposed in pg_stat_activity (via pg_stat_get_activity) to allow users to identify long-running or high-load plans and correlate them with plan text from the extension. This involves adding a planId field to PgBackendStatus and PlannedStmt, as well as APIs for extensions to set the current planId. Patches have been provided.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main question is whether the proposed implementation is the best approach, especially considering alternative suggestions like an 'extended list' pointer for more general extensibility.","would_benefit_from_new_reviewer":"YES"}, {"id":"CADkLM=cB0rF3p_FuWRTMSV0983ihTRpsH+OCpNyiqE7Wk0vUWA@mail.gmail.com","summary":"This mailing list thread discusses a patch to enable importing and exporting of table statistics in Postgresql. The patch introduces new functions, pg_set_relation_stats and pg_set_attribute_stats, for injecting statistics, and integrates with pg_dump, pg_restore and pg_upgrade to allow for preserving statistics across upgrades. The discussion covers various aspects of the design, including API design (variadic vs. named parameters), error handling, security, interaction with autovacuum, and integration with existing tools.","status":"DONE","activity":"ACTIVE","complexity":4,"problem":"A few more users found bugs after the commit, but it appears those are being addressed.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAExHW5s=bCLMMq8n_bN6iU+Pjau0DS3z_6Dn6iLE69ESmsPMJQ@mail.gmail.com","summary":"This patchset aims to reduce memory consumption in partitionwise join planning by avoiding repeated translations of RestrictInfo nodes. It introduces a hash table in PlannerInfo to store and reuse translated RestrictInfos, and also optimizes the creation of join clauses by using the hash table to store child derived clauses, which improves planning time in scenarios with many partitions. The latest version drops a patch that used simplehash and includes fixes based on review feedback.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"There is a planning time regression for lower numbers of partitions and joins that the author is seeking guidance on investigating.","would_benefit_from_new_reviewer":"YES"}, {"id":"415721CE-7D2E-4B74-B5D9-1950083BA03E@yesql.se","summary":"The patch proposes to add special-case expression steps for common combinations in the executor to improve performance and simplify JIT-generated code. This includes specialized steps for strict functions with 1 or 2 arguments, a specialized step for one-argument aggregates, and replacing EEOP_DONE with EEOP_DONE_RETURN and EEOP_DONE_NO_RETURN to skip extra setup.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether there are any objections to committing the v4 patches.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAAaqYe8Bo4bf_i6qKj8KBsmHMYXhe3Xt6vOe3OBQnOaf3_XBWg@mail.gmail.com","summary":"The patch teaches predtest about IS [NOT] <boolean> proofs, improving the planner's ability to use partial indexes by understanding the relationship between boolean values and IS <boolean> expressions. The latest iteration refactors predicate_refuted_by_recurse to improve efficiency.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"Tom Lane is not happy with the approach taken in predicate_refuted_by_recurse and believes there is a more efficient and correct way to handle refutation tests.","would_benefit_from_new_reviewer":"YES"}, {"id":"CANtu0oiLc-+7h9zfzOVy2cv2UuYk_5MUReVLnVbOay6OgD_KGg@mail.gmail.com","summary":"This patchset aims to improve CREATE/REINDEX INDEX CONCURRENTLY by enabling xmin horizon to propagate freely during concurrent index builds and building concurrent indexes with a single heap scan, thereby reducing the impact on vacuum and improving performance. It achieves this by introducing a Short-Term Index Replacement (STIR) access method and automatically resetting snapshots during the initial heap scan.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"The patchset is large and complex, making it difficult to review, and requires careful consideration to ensure correctness and avoid regressions.","would_benefit_from_new_reviewer":"YES"}, {"id":"6ab4003f-a8b8-4d75-a67f-f25ad98582dc@enterprisedb.com","summary":"This thread discusses a patch series to enable parallel CREATE INDEX for GIN indexes, improving index creation performance, particularly for large tables. The latest patches address various performance considerations like memory limits, TID list compression, and single tuplesort usage.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"A few XXX and FIXME comments with questions remain in the latest version. Also, the use of `work_mem` instead of `maintenance_work_mem` for memory limits during parallel builds is questionable.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAH2-Wzmn1YsLzOGgjAQZdn1STSG_y8qP__vggTaPAYXJP+G4bw@mail.gmail.com","summary":"This patch adds skip scan functionality to nbtree indexes in Postgresql, enabling more efficient use of composite indexes for queries that omit leading index columns. The latest iterations focus on improving performance and reducing regressions in unsympathetic cases, as well as refining the cost model and code structure. The current focus is on improving primscan scheduling and refining the 'skipskip' optimization.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"Minimizing regressions in performance in cases where skip scan is unlikely to help, particularly due to the overhead of skip array maintenance and ensuring that the existing _bt_checkkeys_look_ahead is effective.","would_benefit_from_new_reviewer":"YES"}, {"id":"52257607-57f6-850d-399a-ec33a654457b@postgrespro.ru","summary":"The proposed patch aims to improve the cost estimation of HashJoins when multiple hash clauses are present, by using extended statistics to estimate bucket size more accurately, potentially preventing the planner from incorrectly choosing MergeJoin over HashJoin.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether to revise the calculation of bucket size and MCV frequency to use the minimum instead of the maximum value across clauses, and the need for regression tests.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAN55FZ3n8Gd+hajbL=5UkGzu_aHGRqnn+xktXq2fuds=1AOR6Q@mail.gmail.com","summary":"This patch proposes to use read streams in autoprewarm to improve performance. The author observed a ~10% performance gain with this change.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"uvrtrknj4kdytuboidbhwclo4gxhswwcpgadptsjvjqcluzmah@brqs62irg4dt","summary":"This patchset introduces asynchronous I/O (AIO) to PostgreSQL, aiming to improve performance by allowing I/O operations to occur in the background. The latest version includes significant refactoring, renaming, and improvements based on community feedback, including the introduction of a batching mechanism to control I/O submission. It addresses issues with I/O worker failures, improves testing, and integrates with Thomas Munro's read_stream.c improvements.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"Remaining challenges include improving test coverage (particularly for corner cases and temporary tables), handling file descriptor exhaustion, and further refining the interaction between AIO and the buffer manager.","would_benefit_from_new_reviewer":"YES"}, {"id":"64486b0b-0404-e39e-322d-0801154901f3@postgrespro.ru","summary":"The proposed patch implements self-join elimination, an optimization that removes unnecessary inner joins of a table with itself on a unique column. The latest version focuses on enabling SJE for SELECT queries, while excluding the target relation of UPDATE/DELETE/MERGE queries to avoid issues with EPQ and RETURNING clauses, and improves code clarity and reliability.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"The code is complex and touches many parts of the planner, and there's concern about potential regressions or overhead, especially related to EPQ with data-modifying queries and ensuring complete coverage of planner data structures. Also some tests have only been run on code with assertions enabled, making it more difficult to assess overall impact on performance in a production setting.","would_benefit_from_new_reviewer":"NO"}, {"id":"437ccbcf-8f80-2919-411d-a3af88becf6c@cybertec.at","summary":"This patch adds sortsupport for range types and btree_gist, which significantly improves index creation speed and potentially index quality by enabling a sorted build strategy by default. The latest version of the patch includes fixes for cidr sortsupport and addresses whitespace issues, and the regression tests were reverted to the original ones (injection point tests removed).","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAKRu_aj-P7YyBz_cPNwztz6ohP+vWis=iz3YcomkB3NpYA--w@mail.gmail.com","summary":"This patch introduces a new column, relallfrozen, to pg_class, which tracks the number of all-frozen pages in a table. It then modifies the autovacuum trigger logic for insert-heavy tables to consider only the unfrozen portion of the table when calculating the vacuum insert threshold, resulting in more frequent vacuums and reduced I/O overhead. The goal is to more proactively freeze tuples and reduce the occurrence of anti-wraparound vacuums for insert-only tables.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether the relallfrozen statistic should be included in the statistics import/export process, and whether the capping of the relallfrozen value should be removed entirely or kept for certain stat updates.","would_benefit_from_new_reviewer":"YES"}, {"id":"0184212d-1248-4f1f-a42d-f5cb1c1976d2@tantorlabs.com","summary":"The proposed patch aims to improve performance by converting `IN (VALUES(...))` constructs to `ANY` expressions during query optimization. This involves refactoring code to handle type coercion and parameter handling, and extracting common code for generating ArrayExpr.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The outstanding issues involve correctly handling parameters, addressing limitations on `is_simple_values_sequence()`, and ensuring correct processing of vars elements based on their position in the query. There are also some style issues and TODOs in the code that need to be resolved.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAD21AoAEfCNv-GgaDheDJ+s-p_Lv1H24AiJeNoPGCmZNSwL1YA@mail.gmail.com","summary":"This thread discusses a patch to enable parallel heap vacuuming in PostgreSQL. The original patch focused on parallel heap scans during lazy vacuum, but the latest version concentrates on parallelizing the second pass over the heap during the vacuuming process. The goal is to speed up vacuuming, particularly for large tables with spread-out garbage.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main challenge currently being discussed is integrating the parallel heap vacuum feature with the existing eager vacuum scan feature, specifically how to handle the eager_scan_remaining_fails counter in a parallel environment. The author is currently leaning towards only supporting the second heap pass initially to avoid these complexities.","would_benefit_from_new_reviewer":"YES"}, {"id":"Zyvop-LxLXBLrZil@nathan","summary":"The proposed patch introduces a catalog-swap mode to pg_upgrade that moves the entire data directory from the old cluster to the new cluster, then swaps the catalog relation files, potentially speeding up upgrades for clusters with many relations, especially since v15 where relfilenodes are preserved.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":4,"problem":"The author has indicated they plan to get the patches into a more reviewable state, but hasn't done so since December 2nd, 2024. It's not clear what specifically needs to be done before the author considers them 'reviewable'.","would_benefit_from_new_reviewer":"YES"}, {"id":"8216639.NyiUUSuA9g@aivenlaptop","summary":"The proposal aims to improve the performance of SQL functions by utilizing the CachedPlan machinery, enabling custom plans and avoiding generic plans that can be inefficient, especially with partitioned tables. The latest iteration includes a plan cache for SQL functions, addressing performance issues and invalidation concerns, but introduces significant complexity to handle rewriting target lists and avoiding memory bloat during replanning.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current implementation involves significant complexity to handle cases where the target list of a SQL function needs to be rewritten due to type mismatches, leading to non-cached plans in such scenarios. In addition, it needs review from Tom Lane, who is very familiar with the subject.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAN-LCVPxnWB39CUBTgOQ9O7Dd8DrA_tpT1EY3LNVnUuvAX1NjA@mail.gmail.com","summary":"The proposed patch modifies the Append node to consider fractional path costs when evaluating the cheapest path, potentially leading to better plan choices when a LIMIT clause is present. This is achieved by accounting for the tuple_fraction in add_paths_to_append_rel.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The main concern revolves around the use of root->tuple_fraction at the RelOptInfo level, given that it might not always accurately represent the fraction of tuples needed from a subquery.","would_benefit_from_new_reviewer":"YES"}, {"id":"TYYPR01MB82310B308BA8770838F681619E5E2@TYYPR01MB8231.jpnprd01.prod.outlook.com","summary":"This patch adds a STATS option to the EXPLAIN command to display information about which extended statistics were used in query planning. The discussion is currently focused on whether to show the specific clauses that the statistics were used for, or simply a summary of the statistics used in the plan.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The primary issue is whether to display the specific clauses used in the plan with the extended statistics or just a summary of the used statistics, and how to handle nested OR clauses and RestrictInfo nodes when deparsing expressions.","would_benefit_from_new_reviewer":"NO"}, {"id":"DBD427E0-7E57-41D3-AEE1-7DFFA3CAB4EE@yandex-team.ru","summary":"This patch proposes to use the read_stream API to streamline the B-tree, GiST, and SP-GiST index vacuum process, potentially improving performance when DIRECT_IO is involved. The latest version includes fixes for CI failures and TAP tests.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":4,"problem":"The main issue is to ensure the correctness of the stream resetting logic and to address potential interactions between the buffer access strategy and the larger reads introduced by the stream API, which may lead to increased WAL syncs and writes. Also, the author was asked to add TAP testing for GiST and SP-GiST vacuum like B-tree vacuum already has.","would_benefit_from_new_reviewer":"NO"}, {"id":"dc6a29eb78064f5a3305049d8cd453c5@postgrespro.ru","summary":"This patch allows pushing joins with function RTEs to PostgreSQL data sources, improving the efficiency of queries that join foreign tables with the results of function calls. The latest version of the patch addresses issues with functions returning records and includes performance benchmarks, but there are still unresolved issues with how to handle rte->functions, which is currently being worked around by storing function lists in the fdw_private field.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The key issue currently being discussed is the proper handling of rte->functions for function scan pushdown in the context of FDWs, particularly how to ensure the correct function list is associated with the RTE after flattening during planning.","would_benefit_from_new_reviewer":"YES"}, {"id":"0b1f670d-b39d-4966-bf32-f0d502ebc564@postgrespro.ru","summary":"The patch aims to improve EXISTS subquery pull-up optimization by considering join conditions specified in the JOIN ON clause, in addition to those in the WHERE clause. This allows the planner to generate more efficient query plans in certain cases. The author is currently addressing issues related to constant quals in the subquery and failures in postgres_fdw extension tests.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The current patch causes failures in postgres_fdw extension tests, potentially related to LIMIT clauses.","would_benefit_from_new_reviewer":"NO"}, {"id":"39b39e7a-41b4-4f34-b3f5-db735e74a723@postgrespro.ru","summary":"This thread proposes a patch to remove WALBufMappingLock and replace it with a lockless algorithm based on atomic variables and a condition variable to improve scalability of WAL writes. The patch also includes an optimization to the WAL insert lock mechanism.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"The initial version of the patch caused failures on buildfarm, leading to its reversion, however, later messages indicate it was committed anyway. It is not clear if the identified errors were resolved or if they are still present.","would_benefit_from_new_reviewer":"NO"}, {"id":"20241220032226.9a3429207417d28b7e482024@sraoss.co.jp","summary":"The proposed patch enables the use of btree and SP-Gist indexes for ILIKE forward matching, by generating OR clauses for the upper and lower case variations of the first case-varying character in the search pattern. This approach can significantly improve query performance compared to sequential scans when dealing with case-insensitive pattern matching.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Whether the current approach, which only considers the first case-varying character, is the best long-term solution, compared to deeper integration with the indexing infrastructure to handle multiple case variations and Unicode characters more effectively.","would_benefit_from_new_reviewer":"NO"}, {"id":"010101936e4aaa70-b474ab9e-b9ce-474d-a3ba-a3dc223d295c-000000@us-west-2.amazonses.com","summary":"This thread discusses a patch to implement SVE (Scalable Vector Extension) popcount support for PostgreSQL. The patch aims to improve the performance of the popcount function on ARMv8-A architectures with SVE by utilizing SVE intrinsics. There are actually two competing patches from different authors, both attempting to accomplish the same goal.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Nathan Bossart has identified several issues with the Fujitsu patch, including the need to remove alignment code due to negligible performance gains, questions about loop unrolling, and compilation issues on macOS. The author has addressed some, but perhaps not all, concerns.","would_benefit_from_new_reviewer":"YES"}, {"id":"OSZPR01MB8499D4884C4541159FA00ECC8B132@OSZPR01MB8499.jpnprd01.prod.outlook.com","summary":"This patch proposes optimized hex_encode and hex_decode functions for ARM (aarch64) machines using SVE (Scalable Vector Extension) to improve the performance of encoding and decoding binary data in the bytea data type. The latest version casts `size_t` to `uint64` to fix compilation errors on macOS.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The patch requires review to ensure the macOS compilation fix is correct and to evaluate the performance impact of the inlined functions.","would_benefit_from_new_reviewer":"YES"}, {"id":"PH8PR11MB82869FF741DFA4E9A029FF13FBF72@PH8PR11MB8286.namprd11.prod.outlook.com","summary":"This patch aims to improve the performance of the SSE4.2 CRC32C algorithm by using the pclmulqdq instruction and processing 64 bytes at a time instead of the current 8 bytes. The discussion has converged on using a branching strategy for runtime CPU feature detection to avoid performance regressions on older hardware and VMs without pclmul support.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issue is how to handle CPU capability initialization on MSVC, where there is no equivalent to the __attribute__((constructor)) used on GCC/clang.","would_benefit_from_new_reviewer":"NO"}, {"id":"1ea167aa-457d-422a-8422-b025bb660ef3@vondra.me","summary":"The proposed patch aims to improve the planning time for OLTP star join queries by implementing a fast-path planning strategy. This involves detecting star join patterns (a fact table joined with multiple dimension tables via foreign keys), and then optimizing the join order by grouping the dimensions and joining them at the end, thus reducing the number of join orders the planner needs to explore.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The key issue currently being discussed is how to reliably identify star joins and ensure that reordering joins for dimensions does not violate join order restrictions imposed by outer joins or other constraints.","would_benefit_from_new_reviewer":"NO"}, {"id":"30aa0030-f694-44ef-a19d-6ef7ddb69374@postgrespro.ru","summary":"The patch replaces the msgnumLock spinlock in sinvaladt.c with atomic operations on maxMsgNum, using memory barriers for synchronization, to improve performance by reducing contention. It also converts minMsgNum and nextThreshold to uint32 for consistency.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether signed arguments of SIInsertDataEntries, SIGetDataEntries, SICleanupQueue should be changed to unsigned, and if MSGNUMWRAPAROUND limit is still necessary.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAApHDvpMpRQvsTqZo3FinXkgytwxwF8sCyZm83xDj-1s_hLe+w@mail.gmail.com","summary":"The original patch aimed to correct an outdated CHUNKHDRSZ value in nodeAgg.c. However, the discussion evolved to focus on reducing memory usage in HashAgg, particularly by using a bump allocator for TupleHashEntryData.firstTuple and per-group states, potentially leading to significant memory savings.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":4,"problem":"The author moved the patch to another thread related to reducing memory usage of HashAgg, so further updates are expected there, not here.","would_benefit_from_new_reviewer":"NO"}, {"id":"78574B24-BE0A-42C5-8075-3FA9FA63B8FC@amazon.com","summary":"The patch expands HOT update eligibility to cases involving expression and partial indexes by evaluating the index expressions and partial index predicates to determine if the indexes actually require updating. The latest version focuses solely on expression and partial indexes, reverting changes related to summarizing indexes.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The biggest outstanding issue is ensuring the performance overhead is minimized, particularly when there are many indexes, and that the code interacts correctly with the index AM.","would_benefit_from_new_reviewer":"YES"}, {"id":"7cac7e66-9a3b-4e3f-a997-42aa0c401f80@gmail.com","summary":"The patch optimizes the lower(), upper(), and casefold() functions by using a range-based binary search approach on Unicode case tables, which reduces table size and improves performance. The author has presented multiple versions of the patch and has compared its performance against other approaches like radix trees.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether micro-optimizations, such as using unused bits for flags, are worth the added code complexity and if the range-based binary search is the best approach compared to radix trees for all Unicode related functions.","would_benefit_from_new_reviewer":"YES"}, {"id":"817d244237878cebdff0bc363718feaf49a1ea7d.camel@j-davis.com","summary":"The proposal aims to reduce the memory footprint of HashAgg and set operations by reducing the size of TupleHashEntryData and AggStatePerGroupData structures and optimizing memory allocation strategies. The latest approach focuses on using a Bump allocator for hash table entries and avoiding unnecessary memory copies.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"There appears to be a slowdown in some cases (particularly with by-reference types) when using the Bump allocator, potentially due to changes in caching behavior. It's unclear why this is happening, and the author is seeking an explanation for the performance regression.","would_benefit_from_new_reviewer":"YES"}, {"id":"9789f79b-34f0-49ee-9852-783392a3615c@sigaev.ru","summary":"The proposal aims to improve the selectivity estimation in `var_eq_non_const()` by incorporating MCV (Most Common Values) knowledge to prevent underestimation in cases of non-uniform data distribution, which can lead to suboptimal query plans (e.g., nested loop joins instead of hash joins). The patch suggests using the quadratic mean of the non-null fraction divided by the number of distinct values and the set of MCV selectivities to provide a more accurate estimation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"What is the statistical interpretation of using the average MCV selectivity and how does the number of MCVs stored affect the accuracy of the result?","would_benefit_from_new_reviewer":"YES"}, {"id":"ee410de1-1e0b-4770-b125-eeefd4726a24@eisentraut.org","summary":"This patch modifies PL/Python to use the Python limited API to ensure ABI stability, allowing PL/Python to be built against and run with different Python 3.x versions. The patch disables the limited API on Windows due to build issues.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch currently disables the limited API on Windows due to unresolved build issues with meson.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFj8pRB7V0FCZ6fZv4LG9voAQQMc3A+dO5nJYzRJKLuew38G2Q@mail.gmail.com","summary":"This patch introduces a new 'strict_expr_check' option for plpgsql that performs post-parse tree checks to disallow undocumented syntax for plpgsql expressions, aiming to prevent unexpected behavior and errors caused by missing semicolons or other syntax issues. The latest version of the patch is significantly less invasive, focusing solely on plpgsql grammar.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The primary outstanding issue is whether the new checks introduce any false alarms and whether the proposed approach is the most appropriate way to enforce stricter syntax rules in plpgsql.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFj8pRA3d0ARQEMbABa1n6q25AUdNmyO8aGs56XNf9pD4sRMjQ@mail.gmail.com","summary":"This patch proposes to enhance plpgsql to allow the use of the ANSI/SQL standard syntax `argname => value` for named arguments when opening cursors, in addition to the existing proprietary syntax `argname := value`.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Tom Lane asked if a new test case was needed and Pavel responded that it was not, and updated the tests accordingly. So now the updated patch is ready for review.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFj8pRD053CY_N4=6SvPe7ke6xPbh=K50LUAOwjC3jm8Me9Obg@mail.gmail.com","summary":"This thread discusses a proposed feature to add schema variables (now session variables) to PostgreSQL, providing a mechanism similar to package variables in Oracle PL/SQL for storing session-specific data. The implementation involves a new system catalog, the `CREATE VARIABLE` and `DROP VARIABLE` commands, and a `LET` command to assign values. The feature is designed to handle data type consistency, access control via GRANT/REVOKE, and memory management. The later part of thread is focusing on code refactor/simplify and about to solve a naming collision problem.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":5,"problem":"The thread is currently grappling with how to best manage naming collisions between schema variables and existing database objects (tables, columns) to prevent unexpected query behavior. A satisfactory solution is still being sought and may involve a new mechanism for referencing variables.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAFj8pRDY+m9OOxfO10R7J0PAkCCauM-TweaTrdsrsLGMb1VbEQ@mail.gmail.com","summary":"This thread discusses a proposal to add session variables to PostgreSQL, which are persistent, typed, session-based, and non-transactional.  The proposal includes a new database object created with CREATE VARIABLE and modified by LET. A key point of discussion is the handling of identifier collisions and how to manage the non-transactional nature of the variables, especially concerning security implications and data consistency. The author, Pavel Stehule, has been actively revising the patch in response to reviewer feedback, focusing on code cleanup, bug fixes, and documentation improvements.  There are now several smaller patches to facilitate the review process and make it easier to potentially commit portions of the overall feature.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The main outstanding problems involve managing identifier collisions between session variables and column names, and ensuring type safety and consistent behavior when session variables are used in various SQL contexts. Determining the best default behavior related to variable fencing, and simplifying the syntax of CREATE and ALTER VARIABLE statements are also ongoing topics.","would_benefit_from_new_reviewer":"YES"}, {"id":"3766675.7eaCOWfIcx@thinkpad-pgpro","summary":"This patch introduces a new, unified option engine for PostgreSQL to handle relation options, aiming to consolidate scattered option definitions and provide a reusable API for various option types (core-AM, contrib-AM, and local options). It refactors existing code to use OptionSpec objects and functions for parsing, validating, and converting options between different representations.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The patch is large and complex, making it difficult to review. The author is considering splitting it into smaller parts for easier review, but is unsure of the best way to do so without introducing inconsistencies.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAAKRu_ZwCwWFeL_H3ia26bP2e7HiKLWt0ZmGXPVwPO6uXq0vaA@mail.gmail.com","summary":"This mailing list thread discusses a series of patches to refactor BitmapHeapScan to use the streaming read API, improve code organization, and address performance regressions. The focus is now on refactoring patches that offer benefits independent of the streaming read API, as there are concerns about the stability and performance impact of the streaming read user patch.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Performance regressions have been observed with the streaming read API implementation, particularly related to effective_io_concurrency and readahead. It is difficult to consistently reproduce those regressions and identify their root cause.","would_benefit_from_new_reviewer":"NO"}, {"id":"CWZBBRR6YA8D.8EHMDRGLCKCD@neon.tech","summary":"The goal is to improve locale thread safety, particularly in ECPG, by using thread-safe locale APIs and removing the HAVE_USELOCALE configure check, requiring uselocale(3) on non-Windows platforms. Patches are being developed to use strtod_l and snprintf_l where available, and to ensure consistent handling of locales, especially the 'C' locale, in formatting and parsing.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue is determining the best approach to handle locale-specific formatting and parsing in ECPG to ensure thread safety and avoid potential issues related to global locale state, particularly concerning error handling and code duplication.","would_benefit_from_new_reviewer":"YES"}, {"id":"CABBtG=cDTCBDCBK7McSy6bJR3s5xUTOg0vSFfuW8oLdUYyCscA@mail.gmail.com","summary":"The patch aims to remove a duplicated smgrclose() call in the smgrDoPendingDeletes() function, as smgrclose() is already called within smgrdounlinkall(). The change was later split into two patches, with the second patch addressing similar redundant calls in other locations.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+hUKGJqVe0+Pv9dvC9dSums_PXxGo9SWcxYAMBguWJUGbWz-A@mail.gmail.com","summary":"This patchset aims to make nl_langinfo() and localeconv() thread-safe by using thread-safe alternatives like nl_langinfo_l() and pg_localeconv_r(). It also removes setlocale() calls from check_locale().","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Uncertainty regarding the correct error handling of _create_locale() on Windows and whether per-category locale checking is necessary.","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+hUKGJc4s+Wyb3EFOQNN9VVK+Qv40r2LK41o9PkS9ThxviTvQ@mail.gmail.com","summary":"This patch replaces explicit casts to (unsigned long long) when using printf-like interfaces with uint64_t variables by using the PRIu64 macro from <inttypes.h> to avoid compiler warnings and ensure correct formatting across different platforms and architectures.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The remaining issue appears to be related to off_t and ensuring it's handled correctly, especially in mingw_cross_warning and Visual Studio builds where sizeof(off_t) might be different from int64_t. However, no patch has been presented addressing the off_t issue.","would_benefit_from_new_reviewer":"YES"}, {"id":"2830211e1b6e6a2e26d845780b03e125281ea17b.camel@j-davis.com","summary":"This patch series refactors collation and ctype behavior into method tables and provides a way to hook the creation of a pg_locale_t, allowing extensions to create custom method tables. This facilitates replacing components like ICU with different versions or entirely different methods. The latest version, v15, is a rebase and the author is looking for input.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Performance regressions have been observed in certain worst-case scenarios involving UTF8 and LATIN9 encodings, raising concerns about whether the method table approach should be abandoned or if these scenarios are sufficiently rare to be acceptable.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJ7c6TOy7fUW9MuNeOWor3cSFnQg9tgz=mjXHDb94GORtM_Eyg@mail.gmail.com","summary":"This patch refactors SLRU to always use long file names, removing the `SlruCtl->long_segment_names` flag and simplifying the code and API. It also includes corresponding changes to pg_upgrade. The author has provided manual testing steps.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The primary outstanding issue is whether the proposed manual testing is sufficient, or whether automated TAP tests are needed for pg_upgrade.","would_benefit_from_new_reviewer":"YES"}, {"id":"stj36ea6yyhoxtqkhpieia2z4krnam7qyetc57rfezgk4zgapf@gcnactj4z56m","summary":"The proposal aims to avoid modifying pages while they are undergoing IO, particularly in the context of AIO, checksums, and hint bit setting. The current solution involves introducing a 'BM_SETTING_HINTS' bit in each buffer's state to manage hint bit modifications without conflicting with IO operations. The latest iteration includes optimizations to reduce overhead and improve performance, especially in worst-case scenarios.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"There are odd bimodal performance distributions that the author can't figure out in whole-table indexscan on an unhinted relation","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+TgmoYutMw1Jgo8BWUmB3TqnOhsEAJiYO=rOQufF4gPLWmkLQ@mail.gmail.com","summary":"The proposal is to refactor the `explain.c` file by moving some of its code into two new files, `explain_format.c` and `explain_dr.c`, to reduce the size of the original file and improve code organization.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"149ff9264db27cdf724b65709fbbaee4bf316835.camel@j-davis.com","summary":"This patch introduces the ability to create subscriptions using a server object instead of a connection string, enabling better management of connections, separation of privileges, and easier modification of connection parameters. The latest version delegates the construction of the connection string to the foreign data wrapper (FDW) associated with the server, making postgres_fdw the primary way to use this feature.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The primary outstanding issue is whether the delegation of connection string construction to the FDW is the right approach and if it is testable enough without postgres_fdw.","would_benefit_from_new_reviewer":"YES"}, {"id":"97820ce8-a1cd-407f-a02b-47368fadb14b@tantorlabs.com","summary":"This patch aims to eliminate repetitive code in SLRU bootstrap functions by introducing new functions BootStrapSlruPage, SimpleLruZeroAndLogPage, and SimpleLruZeroPage to handle nullifying SLRU pages with and without WAL logging.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The latest version introduces new functions and a new approach to zeroing and logging SLRU pages, so further review is needed to ensure the design is sound and the code is correct.","would_benefit_from_new_reviewer":"YES"}, {"id":"e2636c5d-c031-43c9-a5d6-5e5c7e4c5514@pgmasters.net","summary":"The patchset aims to harden recovery by introducing a flag in the pg_control file that enforces the presence of a backup_label file, preventing recovery if it's missing. It is split into two parts: the first modifies basebackup to set the flag during backup, and the second provides a SQL function to retrieve the pg_control file with the flag set.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The author has addressed the alignment issue and rebased the patch, and is now awaiting further review. The discussion has raised concerns about the maintenance cost vs. user impact of the SQL function part, with a suggestion to focus primarily on the basebackup changes for setting the flag.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAPhYifF25q5xUQWXETfKwhc0YVa_6+tfG9Kw4bCvCjpCWxYs2A@mail.gmail.com","summary":"This patch extends the postgres_fdw_get_connections function to return the process ID (PID) of the remote backend server handling the connection, to aid in monitoring, deadlock detection, and distributed statistics.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The latest patch needs to be updated with documentation and the regression tests should verify that the remote_backend_pid matches a remote backend's PID by querying pg_stat_activity.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAMPB6wfe4zLjJL8jiZV5kjjpwBM2=rTRme0UCL7Ra4L8MTVdOg@mail.gmail.com","summary":"This patch adds a new, optional parameter 'pid' to the pg_replication_origin_session_setup function, allowing users to specify the PID that acquired the replication origin. This facilitates parallel logical replication by allowing multiple connections to advance the replication origin.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch lacks tests, though this is a general problem for replication functions and will be addressed separately.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACLU5mSr+t+6K_Ww6z1fk_=jP=5-U0CEqMsHjii8uG_6UWQo-g@mail.gmail.com","summary":"The proposed patch aims to simplify recovery after accidental table drops (and potentially database drops, truncate table, or mass delete/updates) by logging the LSN at the time the drop lock is acquired, enabling easier point-in-time recovery to before the drop.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":2,"problem":"The author needs to respond to the feedback provided regarding temporary and unlogged tables, log message readability, and consistency with existing log formats containing LSNs.","would_benefit_from_new_reviewer":"NO"}, {"id":"b81db436-8262-4575-b7c4-bc0c1551000b@app.fastmail.com","summary":"This patch introduces a new GUC, `max_replication_origin_sessions`, to control the maximum number of simultaneously configured replication origins on a subscriber, separate from `max_replication_slots`, to avoid confusion and limitations in setups with many subscriptions or replication slots.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The latest patch needs an update in logical-replication.sgml to reflect the change from max_replication_slots to max_replication_origin_sessions in the context of subscriber upgrades.","would_benefit_from_new_reviewer":"NO"}, {"id":"OS0PR01MB5716BE80DAEB0EE2A6A5D1F5949D2@OS0PR01MB5716.jpnprd01.prod.outlook.com","summary":"This thread discusses a patch to improve conflict detection in logical replication for `update_deleted` scenarios. The latest approach involves creating a shared replication slot to prevent premature removal of dead tuples, with a GUC `max_conflict_retention_duration` to limit the retention time and avoid excessive bloat. It also resolves LSN<->timestamp inversion issue and takes into account physical standby configuration.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"There are discussions around the best approach for handling clock skew, and how to balance performance and the accuracy of `update_deleted` conflict detection. Specifically, there is no agreement on how to handle the case where a publisher is also a physical standby. There are also performance concerns to consider for high-volume scenarios.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAHv8RjLPdFP=kA5LNSmWZ=+GMXmO+LczvV6p9HJjsXxZz10KGA@mail.gmail.com","summary":"This patch adds the '--enable-two-phase' option to the 'pg_createsubscriber' utility, enabling users to create subscriptions with two-phase commit enabled during initial setup. It also updates the documentation and adjusts the code to reflect this new functionality.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The patch needs to be rebased to apply cleanly to the current HEAD.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAA4eK1LC+KJiAkSrpE_NwvNdidw9F2os7GERUeSxSKv71gXysQ@mail.gmail.com","summary":"This patch series introduces the ability to logically replicate sequences in Postgresql, primarily to facilitate major version upgrades. It includes a new command, ALTER SUBSCRIPTION ... REFRESH PUBLICATION SEQUENCES, to synchronize sequence values from publisher to subscriber. The design focuses on providing a manual mechanism for copying sequence values, with ongoing discussion about the best approach for managing sequence synchronization and handling potential inconsistencies between publisher and subscriber.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current design approach, particularly the interaction between copy_data and the refresh commands, requires further clarification and potentially a revised syntax. There are also several minor comments, and the long-running nature of the review may mean that a fresh set of eyes could be helpful to resolve some of the remaining design issues.","would_benefit_from_new_reviewer":"YES"}, {"id":"06c02ef916d85e77778e5cdfdf67a3df@postgrespro.ru","summary":"This patch introduces a new SQL function to distinguish between a server in point-in-time recovery (PITR) mode and an ordinary replica, which pg_is_in_recovery() cannot currently do. The solution involves tracking recovery state using a bitmask and providing a SQL function that returns a text array with the recovery states.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The main outstanding issue is whether the changes related to standby and archive recovery flags are implemented correctly, particularly regarding the use of local flags and the interaction with shared memory.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAD21AoCVLeLYq09pQPaWs+Jwdni5FuJ8v2jgq-u9_uFbcp6UbA@mail.gmail.com","summary":"The proposal aims to enable logical decoding without requiring a server restart when `wal_level` is set to 'replica'. The current approach involves making `wal_level` a PGC_SIGHUP parameter and uses a background worker to manage the online transition between different wal_levels, using reserved background worker slots and a 'bgtask' infrastructure to guarantee resources.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issue involves ensuring a smooth and reliable transition between wal_levels, particularly regarding how to handle processes like walsenders when decreasing wal_level to 'minimal', and ensuring available bgworker slots.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAHv8RjL4OvoYafofTb_U_JD5HuyoNowBoGpMfnEbhDSENA74Kg@mail.gmail.com","summary":"This patch introduces the `--cleanup-existing-publications` option to the `pg_createsubscriber` utility. This feature allows users to remove publications that were replicated from the source server, ensuring a clean logical replication setup. The cleanup process is optional and only affects publications that existed on the source server and were replicated to the subscriber, leaving manually created publications intact.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The option name and the overall logic for dropping publications are being questioned, with suggestions for alternative names and a refactoring of the drop_publication function.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAO6_XqoZb2czT=i=VBQjwBwwo3d21cnMm-EpfYfx0m-O+abFrQ@mail.gmail.com","summary":"The patch aims to prevent recovery from being blocked for extended periods due to a client process stuck in ClientWrite holding a buffer pin. It achieves this by handling recovery conflict interrupts during client writes, terminating the session if a conflict occurs. The latest version refactors the error handling to account for interrupts being held during error reporting.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issue is how to reliably handle recovery conflicts when interrupts are held due to ongoing error reporting, and how to ensure the connection is terminated in all cases when a conflict occurs.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAHv8RjKhA=_h5vAbozzJ1Opnv=KXYQHQ-fJyaMfqfRqPpnC2bA@mail.gmail.com","summary":"This patch adds an '--all' option to pg_createsubscriber to automatically create subscriptions for all non-template databases on the source server on the target server. It has undergone multiple rounds of review and revisions.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The test cases need to be properly split into separate files, and there is a concern that the test for subscriptions is not correctly verifying the creation of subscriptions on the target databases.","would_benefit_from_new_reviewer":"NO"}, {"id":"20240424115242.236b499b2bed5b7a27f7a418@sraoss.co.jp","summary":"The proposal is to extend ALTER DEFAULT PRIVILEGES to support large objects, allowing default privileges to be set for large objects similar to other database objects.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"Whether a committer will find the change worthwhile, considering that large objects are a feature that should fade out.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAGECzQQzDqDzakBkR71ZkQ1N1ffTjAaruRSqppQAKu3WF+6rNQ@mail.gmail.com","summary":"This patch adds an 'owned_schema' option to extension control files, allowing extensions to create and own their schema during installation, thereby mitigating security risks associated with search_path manipulation. It also includes pg_upgrade support.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The main outstanding issue is the lack of a clear upgrade path for existing extensions to transition to using owned schemas, although the author has indicated this is not critical for the feature to be committable.","would_benefit_from_new_reviewer":"YES"}, {"id":"CABdArM7FW-_dnthGkg2s0fy1HhUB8C3ELA0gZX1kkbs1ZZoV3Q@mail.gmail.com","summary":"This patch proposes a new conflict detection type, 'multiple_unique_conflicts', for logical replication. It identifies when an incoming row violates multiple UNIQUE constraints, allowing users to resolve several conflicts at once instead of individually.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch is awaiting initial review.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGfChW51P944nM5h0HTV9HistvVfwBxNaMt_s-OZ9t=uXz+Zbg@mail.gmail.com","summary":"The proposal is to filter out irrelevant changes (changes to relations not part of a publication) during logical decoding before transactions are reassembled, aiming to reduce disk I/O and memory usage. A new output plugin callback is introduced to facilitate this filtering, along with caching to minimize overhead. The current implementation aims for 'best-effort' filtering, skipping filtering when snapshot construction is complex or potentially inaccurate.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The patch needs further testing and refinement to address concerns regarding overhead, snapshot construction correctness, and interactions with toast tables. Specifically, performance needs to be compared with HEAD, not just earlier versions of the patch.","would_benefit_from_new_reviewer":"YES"}, {"id":"508d0505-8b7a-4864-a681-e7e5edfe32aa@iki.fi","summary":"This patchset proposes to increase the length of query cancellation keys to improve security, bumping the minor protocol version to 3.2. It includes changes to libpq to support a new connection option for specifying the minimum and maximum acceptable protocol versions, and utilizes a constant-time memory comparison function to mitigate potential timing attacks.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"What should be the documented maximum size of the cancel key?","would_benefit_from_new_reviewer":"YES"}, {"id":"Zz91RagtQg2s9497@nathan","summary":"The proposal aims to revamp row-security tracking in Postgres to avoid bugs-of-omission when propagating RLS information to the top-level query. The current discussion revolves around whether to use a global queue, modify fireRIRrules, or implement a query tree walker to discover RLS flags, potentially considering the has-sublinks marking problem as well.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The biggest question is how to reliably and efficiently track and propagate row-security information throughout the query tree, addressing potential performance concerns associated with alternatives like query tree walkers.","would_benefit_from_new_reviewer":"NO"}, {"id":"1C81CD0D-407E-44F9-833A-DD0331C202E5@yesql.se","summary":"This patch adds server-side SNI (Server Name Indication) support to libpq, allowing the server to select different SSL certificates based on the hostname provided by the client during the TLS handshake. It introduces a new configuration file, pg_hosts.conf, to manage the mapping between hostnames and SSL certificates, keys, and CA certificates.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether HBA clientname settings should be supported per certificate set in the SNI configuration, and if using SSL_set_SSL_CTX() is the right approach.","would_benefit_from_new_reviewer":"YES"}, {"id":"c763235a2757e2f5f9e3e27268b9028349cef659.camel@oopsware.de","summary":"This patch adds modern SHA-2 based password hashes (sha256crypt and sha512crypt) to pgcrypto, aiming for compatibility with crypt() implementations on FreeBSD and Linux. The latest discussion revolves around how strictly to validate the salt string, with options ranging from Drepper's permissive approach to passlib's strict base64 encoding and a consensus emerging to reject salts shorter than 4 bytes.","status":"WAITING_FOR_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"How strictly should the salt string be validated, and how should invalid salt strings be handled?","would_benefit_from_new_reviewer":"NO"}, {"id":"ZWlohtKAs0uVVpZ3@paquier.xyz","summary":"This patch proposes the implementation of sequence access methods, allowing users to define custom methods for generating sequence values. This includes splitting the in-core sequence access method into more files, providing a way to implement distributed sequences or custom computations, and adding a contrib module that introduces a sequence access method for snowflake IDs.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The design of the callbacks and the level of abstraction is still under discussion, particularly regarding custom data types beyond int64 and the best way to integrate with generated columns and existing nextval() functions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+hUKGLM+t+SwBU-cHeMUXJCOgBxSHLGZutV5zCwY4qrCcE02w@mail.gmail.com","summary":"This patch introduces a new GUC, `file_copy_method`, to allow users to choose between 'copy' and 'clone' when creating a database using CREATE DATABASE. The 'clone' option leverages OS-level copy-on-write functionality for faster and more disk-efficient database cloning on supported file systems.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether the function should be called *clone_file*, since copy_file_range may not be a 'true' clone operation.","would_benefit_from_new_reviewer":"YES"}, {"id":"ce35e97b-cf34-3f5d-6b99-2c25bae49999@postgrespro.ru","summary":"This patch series aims to implement k-Nearest Neighbors (kNN) search for btree indexes, allowing for faster execution of ORDER BY distance queries. The latest version rebased the patch and noted an inconsistency with commit 5bf748b86 that affects query results.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":4,"problem":"The patch exhibits incorrect query results related to commit 5bf748b86, requiring further investigation and correction.","would_benefit_from_new_reviewer":"YES"}, {"id":"E7C7BFFB-8857-48D4-A71F-88B359FADCFD@justatheory.com","summary":"The proposal is to add a new GUC variable, `extension_control_path`, which functions similarly to `dynamic_library_path`, to allow PostgreSQL to locate extension control files in alternative directories. Peter Eisentraut has implemented a patch to this effect, and the thread is now discussing refinements and how it interacts with existing extension build and installation practices.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The current patch does not properly handle the 'directory' parameter within extension control files and may need adjustments to PGXS to fully support prefix-based installs and directory-based extension organization.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFj8pRDK89FtY_yyGw7-MW-zTaHOCY4m6qfLRittdoPocz+dMQ@mail.gmail.com","summary":"This thread discusses the implementation of a REPACK command, intended to replace VACUUM FULL and CLUSTER, with the primary goal of providing a concurrent version of VACUUM FULL. The concurrent version utilizes logical decoding to capture changes during the repack process. The latest discussions concern the integration of the REPACK command and how to address problems with unlogged tables and the impact of long-running snapshots on vacuuming other tables, with a current preference towards deferring those problems for a later patch.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issues are the handling of unlogged tables, the impact of long-running snapshots on other vacuum operations, and the specific design of logical decoding, such as how to enable it transiently and minimize performance impacts from it. There is also a smaller issue of how to handle command progress reporting when planning locks are released.","would_benefit_from_new_reviewer":"NO"}, {"id":"E72EAA49-354D-4C2E-8EB9-255197F55330@enterprisedb.com","summary":"This patch series aims to clean up the Index Access Method (AM) API in PostgreSQL by addressing layering violations and limitations, particularly regarding non-core index AMs. It introduces infrastructure for testing these changes and proposes a standardized way to map index AM-specific strategy numbers to a common set of comparison types, allowing for more generic handling of index AM functionality in core code. Several patches have already been committed.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The latest issue is whether to use the pseudotype 'any' when registering the gist stratnum support function to avoid needing opcintype, and dropping opcintype from index AM strategy translation APIs.","would_benefit_from_new_reviewer":"YES"}, {"id":"cnthxg2eekacrejyeonuhiaezc7vd7o2uowlsbenxqfkjwgvwj@qgzu6eoqrglb","summary":"This patch series aims to allow changing the shared_buffers configuration parameter without requiring a full PostgreSQL restart. It achieves this by modifying the shared memory layout to allow for resizing via mremap, using multiple shared memory segments, and potentially reserving address space in advance.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"The main outstanding issues revolve around synchronization between backends during resizing, ensuring memory safety during the resize process, and guaranteeing the stability and predictability of memory mappings on Linux and other platforms, along with the ability to handle huge pages and cgroup limitations.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxHitd5LGLBSSAPShhtDWxT0ViVKTHinkYW-skBX93TcpA@mail.gmail.com","summary":"The patch aims to refactor AlterDomainAddConstraint to improve error messages and simplify the syntax, particularly focusing on handling NO INHERIT, NOT ENFORCED, and deferrability options for domain constraints.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue is improving the error messages related to constraint options like NO INHERIT, NOT ENFORCED, and deferrability when adding constraints to domains.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAAJ_b962c5AcYW9KUt_R_ER5qs3fUGbe4az-SP-vuwPS-w-AGA@mail.gmail.com","summary":"This thread discusses a patch adding the ability to define CHECK and FOREIGN KEY constraints as NOT ENFORCED, which means they are defined in the database but not checked during data modification. The discussion has focused on the interaction of NOT ENFORCED with other constraint properties like VALID, DEFERRABLE, and INHERITABLE, and also the correct behavior and error messages for various ALTER TABLE commands related to constraints.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The key issue currently is determining the correct behavior of the VALID flag in conjunction with the NOT ENFORCED flag, especially when changing a constraint's enforcement status and how these flags should interact with ALTER TABLE commands.","would_benefit_from_new_reviewer":"NO"}, {"id":"CADkLM=dpz3KFnqP-dgJ-zvRvtjsa8UZv8wDAQdqho=qN3kX0Zg@mail.gmail.com","summary":"This patchset introduces functions to set, clear, and restore extended statistics (pg_set_extended_stats, pg_clear_extended_stats, pg_restore_extended_stats), analogous to existing functions for regular column statistics. It also addresses input validation and data type handling for pg_ndistinct and pg_dependencies, and integrates them into pg_dump/pg_restore.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The most recent patches address validation of attnums and special value handling, but are waiting for further review.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxFiW=4k1is=F1J=r-Cx1RuByXQPUrWB331U47rSnGz+hw@mail.gmail.com","summary":"The proposed patch speeds up the process of adding NOT NULL constraints to a table by using an index scan to check for existing null values in the column, rather than scanning the entire table. This optimization applies when the column being constrained is the leading key column of an existing btree index.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the current implementation adequately addresses concurrency and visibility issues while using index scans to check for null values.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACG=ezaWg7_nt-8ey4aKv2w9LcuLthHknwCawmBgEeTnJrJTcw@mail.gmail.com","summary":"The proposal is to make multixact offsets 64-bit to avoid overflows, along with necessary pg_upgrade changes and output formatting adjustments. The latest version (v13) addresses previous issues and includes tests, with the remaining concern being comprehensive test coverage for pg_upgrade, specifically handling cases with `oldestOffsetKnown==false`.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Ensuring complete test coverage for pg_upgrade, especially regarding handling the `oldestOffsetKnown==false` scenario and ensuring a smooth upgrade path from older, potentially buggy, PostgreSQL versions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAG0ozMpD27fCyVFoa82G7uV4md4wVYw7DWC-PVA6P5=1v35tsA@mail.gmail.com","summary":"The proposed patch introduces a feature called Progressive Explain, which allows printing execution plans of active queries to a shared memory location, enabling other sessions to visualize them via the pg_stat_progress_explain view. The patch has evolved to use timeouts instead of sampling, reuses allocated objects, uses DSAs for shared memory, and introduces GUCs for controlling instrumentation (buffers, timing, WALs).","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The latest version of the patch is awaiting review after addressing previous feedback, particularly around memory allocation and instrumentation control.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxHTBkymh06D4mGKNe1YfRNFN+gFBybmygWk=PtMqu00LQ@mail.gmail.com","summary":"The patch proposes adding argument names to the substring and substr functions to improve readability and clarity, similar to the existing practice with the SIMILAR TO regular expression function.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"Whether or not to add a note regarding the substring alias to the substr function in the documentation, specifically in Table 9.10.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAFY6G8ercA1KES=E_0__R9QCTR805TTyYr1No8qF8ZxmMg8z2Q@mail.gmail.com","summary":"This patch adds SCRAM pass-through authentication for dblink connections when using dblink_fdw, eliminating the need for plain-text passwords in user mapping properties. It also refactors connection routines to centralize SCRAM logic and adds a function to validate dblink fdw options.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The main issue is how to enforce the use of SCRAM keys on the remote server when using SCRAM pass-through, and whether to prohibit other authentication types when use_scram_passthrough is set, considering the existing functionality that allows different auth types for the same server.","would_benefit_from_new_reviewer":"NO"}, {"id":"262624.1738460652@sss.pgh.pa.us","summary":"This patch series adds cross-type comparison support to the btree_gin extension, allowing GIN indexes to be used with queries that compare indexed columns to values of different but compatible data types. This involves refactoring some existing code, adding new conversion routines, and updating documentation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether the documentation for comparePartial() should be adjusted to explicitly state that partial_key is the same datum returned by extractQuery, and if the refactoring of core routines to expose xxx2yyy_opt_overflow interfaces is a good idea.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxHArQysbDkWFmvK+D1TPHQWWTxWN15cMuUaTYX3xhQXgg@mail.gmail.com","summary":"This patch implements NOT NULL constraints on virtual generated columns, ensuring that an error is raised if the generated expression evaluates to NULL during INSERT.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch needs review to ensure the implementation in ExecConstraints is correct and efficient.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxHVxnyRYy67hiPePNCPwVBMzhTQ6FaL9_Te5On9udG=yg@mail.gmail.com","summary":"The proposal is to allow `COPY table_name TO` for materialized views, which is currently disallowed and requires the `COPY (SELECT ...) TO` syntax, potentially offering a performance improvement. The main point of contention is whether this introduces an undesirable asymmetry, as some relations might only support one direction of COPY.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The primary issue is whether allowing `COPY table_name TO` for materialized views introduces an asymmetry that the project has historically avoided, and whether the benefits outweigh the potential downsides of this asymmetry.","would_benefit_from_new_reviewer":"YES"}, {"id":"c73a1746-0cd0-6bdd-6b23-3ae0b7c0c582@postgrespro.ru","summary":"This thread proposes adding SPLIT PARTITION and MERGE PARTITIONS commands to PostgreSQL to simplify working with partitioned tables, specifically for range and list partitioning. After several iterations and reviews, there are concerns about security vulnerabilities and design issues related to owner and permissions and that the commands will create inconsistencies such as copying or not copying parent's constraints. Robert Haas recommends a complete redesign of the feature and suggests an alternative approach of adjusting constraints and using INSERT to merge partitions.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The primary outstanding issues are security vulnerabilities related to owner and permissions during split/merge, data movement, and inconsistent handling of table properties like constraints and triggers after SPLIT/MERGE.","would_benefit_from_new_reviewer":"YES"}, {"id":"20230625.210509.1276733411677577841.t-ishii@sranhm.sra.co.jp","summary":"This thread discusses a patch to implement Row Pattern Recognition (RPR) in PostgreSQL, focusing on the WINDOW clause (R020) part of the SQL standard. The latest version of the patch (v28) includes optimizations, bug fixes, and code style improvements, and aims to reduce the patch size while addressing performance concerns. The author has been actively working on incorporating feedback and addressing issues raised by reviewers.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"Performance optimization and achieving a consensus on the minimum viable feature set from the SQL standard for initial commit.","would_benefit_from_new_reviewer":"YES"}, {"id":"20230601235909.0e1572c27e59112f9d0cbe86@sraoss.co.jp","summary":"This patch set introduces Incrementally Maintainable Materialized Views (IMMV) to PostgreSQL. IMMVs are automatically updated after modifications to underlying tables, offering performance advantages over full refreshes for frequently updated views. The latest version, v34, includes version bumps and addresses previous review comments and CFBot failures. Outstanding concerns relate to the SQL syntax, the implementation of hidden columns for DISTINCT support, the complexity of apply delta queries, and potential integration with different table access methods.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Recent feedback from Kirill Reshke has raised several important design and implementation questions, including the use of hidden columns, support for different table access methods and more complex aggregate expressions, improved EXPLAIN output for debugging and SQL syntax concerns, all of which need to be addressed by the author.","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+renyUApHgSZF9-nd-a0+OPGharLQLO=mDHcY4_qQ0+noCUVg@mail.gmail.com","summary":"The thread discusses a series of patches aimed at adding SQL:2011 application-time support (aka valid-time) to PostgreSQL. The latest iteration (v48) focuses on refining foreign key behavior, particularly with RESTRICT constraints and handling empty ranges. The project also addresses logical replication issues and proposes a way to expose FOR PORTION OF details to plpgsql triggers. The recent focus has been resolving build farm errors related to the interactions between these new features and existing database functionalities.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":5,"problem":"There's ongoing discussion about whether RESTRICT constraints should apply to temporal tables, what exactly the standard says and what are the practical consequences. There's also work to be done around logical replication and empty ranges in btree_gist, as well as on how for portion of is implemented, and further work is needed to address a handful of corner cases that may crop up with such a complex proposal.","would_benefit_from_new_reviewer":"NO"}, {"id":"67fa8560-8d61-5d06-8178-fc9c7684db90@uni-muenster.de","summary":"This thread proposes adding a function, xmlcanonicalize(xml, bool keep_comments), to serialize XML documents in their canonical form, as described in the W3C Canonical XML Version 1.1 specification. This provides a standardized way to compare XML documents by removing differences in formatting, attribute order, and other variations.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"4BCECCD5-4F40-4313-9E98-9E16BEB0B01D@gmail.com","summary":"The proposal is to add an optional boolean argument to the jsonb_strip_nulls and json_strip_nulls functions to allow stripping nulls from arrays in addition to objects.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAK98qZ1JNNAx4QneJG+eX7iLesOhd6A68FNQVvvHP6Up_THf3A@mail.gmail.com","summary":"The proposal is to add SQL:2023 JSON simplified accessor support (dot notation) for accessing JSONB fields, similar to composite types. The latest version (v7) implements this using jsonb's existing typesubscript support function by translating dot notation into a jsonpath expression.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether to generalize the existing jsonb typesubscript support function to handle both bracket subscripting and dot notation, and if the refactoring and patch splitting is acceptable.","would_benefit_from_new_reviewer":"YES"}, {"id":"7b99d466-985f-4d27-8c93-9b98c6945ebb@uni-muenster.de","summary":"This patch implements XMLCast (SQL/XML X025), enabling conversions between SQL and XML data types. It handles casting XML values containing XSD literals to their equivalent SQL data types, and vice versa, including special handling for datatypes like timestamps and intervals. The latest version removes a libxml2 dependency and adds missing regression tests.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Ensuring consistency with existing PostgreSQL features like XMLTABLE() in terms of time zone handling and data conversion, especially for timestamps and intervals.","would_benefit_from_new_reviewer":"YES"}, {"id":"20231204.153548.2126325458835528809.kou@clear-code.com","summary":"The proposal aims to make the COPY format extendable in PostgreSQL. The latest iteration involves refactoring the COPY code to introduce CopyToRoutine and CopyFromRoutine structs for handling different format implementations. The discussion is currently focused on the optimal design of the callback functions and how to avoid performance regressions for the existing text, CSV, and binary formats while enabling extensibility. It's unclear if introducing custom function call will lead to significant performance degradation. The discussion has reached a point where specific implementation details and performance benchmarks are the main focus.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"Whether to inline certain code sections in the patch or create a new set of callback functions.","would_benefit_from_new_reviewer":"NO"}, {"id":"a855795d-e697-4fa5-8698-d20122126567@eisentraut.org","summary":"This thread discusses a proposed patch for implementing SQL Property Graph Queries (SQL/PGQ) in PostgreSQL, following the SQL:2023 standard. The patch introduces new syntax for creating and querying property graphs, which are graphs whose vertices and edges can have properties associated with them. The latest version incorporates numerous bug fixes, RLS tests, and improvements to property collation and edge-vertex link support. There is an ongoing effort to refine the patch, improve code quality, and resolve issues identified during testing and review.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":5,"problem":"The most recent issue revolves around unstable collation tests causing CI errors, and the need to add positive tests for a recently added refactoring.","would_benefit_from_new_reviewer":"NO"}, {"id":"0427cced-93df-4e50-aaa0-645438a2dbe4@uni-muenster.de","summary":"This patch adds flags to XMLSerialize to control the XML version and the inclusion or exclusion of the XML declaration in the output. It introduces the VERSION flag, and the INCLUDING/EXCLUDING XMLDECLARATION flags.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether the version string should be validated, and how to handle different XML versions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAP+B4TD=iy-C2EnsrJgjpwSc7_4pd3Xh-gFzA0bwsw3q8u860g@mail.gmail.com","summary":"This patch proposes adding a feature to postgres_fdw to display the query execution plans used by remote PostgreSQL servers in the output of the EXPLAIN command. This is enabled via a GUC and retrieves the remote plan, similar to auto_explain. The author has provided a patch for review.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The patch needs to be reviewed to ensure it handles various EXPLAIN options correctly, avoids unintended side effects on the remote server (especially with ANALYZE), and deals with parameter placeholders in the generated SQL.","would_benefit_from_new_reviewer":"YES"}, {"id":"CANqtF-oXKe0M=0QOih6H+sZRjE2BWAbkW_1+9nMEAMLxUJg5jA@mail.gmail.com","summary":"This thread discusses adding the ability to enable or disable indexes using ALTER INDEX and CREATE INDEX commands, controlled by a new indisvisible attribute in pg_index. A GUC, use_invisible_index, is also proposed to force the use of invisible indexes. The latest patch (v11) incorporates feedback on grammar, pg_dump behavior, partition support, and interaction with ALTER TABLE SET DATA TYPE.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"It's unclear whether ALTER INDEX ATTACH PARTITION should change the attached partition's visibility status, and there are other potential issues highlighted by the latest round of review.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGPqQf0KitkNack4F5CFkFi-9Dqvp29Ro=EpcWt=4_hs-Rt+bQ@mail.gmail.com","summary":"This patch enables the use of NOT VALID and VALIDATE CONSTRAINT options for named NOT NULL constraints, modifies the pg_attribute.attnotnull column to accommodate the 'INVALID' state, updates pg_dump to handle invalid NOT NULL constraints, and adds corresponding test cases.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The current patch has issues related to inheritance with varying column shapes, requires additional test cases for scenarios involving invalid constraints, and needs documentation updates to reflect the new functionality.","would_benefit_from_new_reviewer":"NO"}, {"id":"d22cfe49-1567-4848-b7b7-9e1fe75f8828@uni-muenster.de","summary":"This patch proposes the implementation of the XMLDocument function (SQL/XML X030). In PostgreSQL, this function simply returns its input XML argument unchanged, or NULL if the argument is NULL, and is provided for compatibility with the SQL/XML standard. This is because PostgreSQL's single XML type already corresponds to the document node structure as defined in the standard.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"Whether there is an existing function in the codebase that is equivalent to the identity function, which could be used instead of creating a new one.","would_benefit_from_new_reviewer":"NO"}, {"id":"408f399e7de1416c47bab7e260327ed5ad92838c.camel@cybertec.at","summary":"This patch introduces a new parameter, log_suppress_errcodes, which allows superusers to suppress ERROR and FATAL messages with certain error codes from client backend processes, reducing log spam. The default setting for this parameter is now an empty string.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The thread is waiting on the author to address Rafia Sabih's review comments from July regarding code style and potential locale issues with certain functions.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAF1DzPVfOW6Kk=7SSh7LbneQDJWh=PbJrEC_Wkzc24tHOyQWGg@mail.gmail.com","summary":"This patch enables changing named NOT NULL constraints from NO INHERIT to INHERIT, and vice versa, using the syntax ALTER TABLE <tabname> ALTER CONSTRAINT <constrname> SET INHERIT/NO INHERIT;. The latest iteration involves refactoring to align with recent changes regarding constraint enforcedness, requiring the author to adjust the patch to utilize a new flag within the ATAlterConstraint struct and implement recursion using find_inheritance_children.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The patch needs to be re-worked to integrate with a recent refactoring of the ALTER TABLE ALTER CONSTRAINT infrastructure, specifically to handle the inheritance flag within ATExecAlterConstraintInternal and use find_inheritance_children for recursion.","would_benefit_from_new_reviewer":"NO"}, {"id":"237def1a-e318-40fa-baa3-0e3195be564e@uni-muenster.de","summary":"This patch implements the XMLNAMESPACES option for the XMLElement function, allowing users to specify XML namespaces within the element. The patch also addresses related issues with XMLTABLE and ensures correct handling of namespace declarations within views.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether ColumnRef/Expr should be allowed for namespaces, especially the default namespace.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAExHW5uF5V=Cjecx3_Z=7xfh4rg2Wf61PT+hfquzjBqouRzQJQ@mail.gmail.com","summary":"This patch adds a new test case to pg_upgrade that performs a pg_dump, pg_restore, pg_dump, and compare cycle to ensure objects left behind by regression are correctly dumped and restored. The test is disabled by default and can be enabled by setting the PG_TEST_EXTRA environment variable.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Michael Paquier has reviewed the proposed patch and provided some recommendations for changes and refactoring. The author needs to address these comments.","would_benefit_from_new_reviewer":"NO"}, {"id":"Z5O1bpcwDrMgyrYy@nathan","summary":"This patch set introduces a --missing-only option to vacuumdb that can be used with --analyze-only and --analyze-in-stages to analyze only relations that are missing statistics, addressing the need for efficient post-upgrade analysis, particularly if extended statistics are not carried over during pg_upgrade.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the implementation of the --missing-only option is correct, especially regarding extended statistics and inherited tables, and whether the server version check is appropriate.","would_benefit_from_new_reviewer":"YES"}, {"id":"e85c6671-1600-4112-8887-f97a8a5d07b2@app.fastmail.com","summary":"The proposal aims to change log_min_messages to allow different log levels based on the backend type (e.g., autovacuum, checkpointer). The configuration syntax has been changed to accept a comma-separated list of LOGLEVEL:BACKENDTYPE pairs, while still supporting the old syntax for backward compatibility.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The format of the configuration string, whether to use 'backendtype:loglevel' or 'loglevel:backendtype', and how to handle a global default log level with exceptions for specific backend types, are key issues. Also, the documentation needs to be improved.","would_benefit_from_new_reviewer":"NO"}, {"id":"e5d472c7-e9be-4710-8dc4-ebe721b62cea@pgbackrest.org","summary":"The patch aims to improve the verification of the recovery_target_timeline GUC by adding endptr checking to catch conversion errors and range checking to exclude values less than 2 and greater than UINT_MAX, and also to provide more helpful error messages.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"Michael Paquier has requested changes to the patch including using strtou64(), allowing a recovery_target_timeline of 1, and improving the log message.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHut+PtX8P0EGhsk9p=hQGUHrzxeCSzANXSMKOvYiLX-EjdyNw@mail.gmail.com","summary":"The patch adds a test case to CREATE SUBSCRIPTION to verify that an error is raised when the subscriber table is missing expected columns. The latest proposal is to add the test to 008_diff_schema.pl.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Whether the proposed test is necessary, and whether it should be added as a standard test or as an optional test behind a PG_TEST_EXTRA flag. Tomas has suggested it is fine as is.","would_benefit_from_new_reviewer":"YES"}, {"id":"ZuGOyYht8behJlSC@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch renames the `ci-os-only` option in `.cirrus.tasks.yml` to `ci-task-only` to allow users to run specific CI tasks like compiler warnings, instead of filtering by OS.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"57957aca-3eae-4106-afb2-3008122b9950@eisentraut.org","summary":"The patch allows pg_upgrade to be used between clusters with different checksum settings by enabling or disabling checksums on the fly during the upgrade process when using the --copy mode. It also allows enabling or disabling checksums using explicit flags.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"Should checksum enabling/disabling be automatic with --copy, or require explicit flags, and how should the Windows code path be handled?","would_benefit_from_new_reviewer":"NO"}, {"id":"CAN55FZ0GXrojT2yUTrST5McJk8UWmYxUX8b696XjL01B1pKsxg@mail.gmail.com","summary":"This patch adds NetBSD and OpenBSD as CI platforms for Postgresql, which includes setting up the build environment, configuring tests, and collecting core files.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"The current discussion revolves around investigating why NetBSD and OpenBSD CI runs are significantly slower than Linux and FreeBSD runs, and exploring potential solutions such as using tmpfs.","would_benefit_from_new_reviewer":"NO"}, {"id":"CANOn0EzoMyxA1m-quDS1UeQUq6FNki6+GGiGucgr9tm2R78rKw@mail.gmail.com","summary":"This patch adds regression tests for ecpg command notices (warnings and errors). The author is rewriting the patch based on a reference implementation using the TAP test mechanism provided by Fujii Masao.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The author is rewriting the patch to use the TAP test mechanism instead of shell scripts and python code.","would_benefit_from_new_reviewer":"NO"}, {"id":"CACJufxFazq-bfyhiO0KBojR=yOr84E25Rqf6mHB0Ow0KPidkKw@mail.gmail.com","summary":"The patch adds a regression test for `pg_stat_progress_copy.tuples_skipped` to verify that the `pgstat_progress_update_param(PROGRESS_COPY_TUPLES_SKIPPED)` function works as intended.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CAExHW5tK-QqayUN0+N3MF5bjV6vLKDCkRuGwoDJwc7vGjwCygQ@mail.gmail.com","summary":"This thread discusses adding functionality to Meson to allow running selected tests under src/test/regress, similar to the 'make check-tests' functionality. The proposed solution involves modifying the Meson build system to conditionally pass the list of tests to pg_regress, and a subsequent patch expands the test selection behavior to all test types.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":3,"problem":"The first patch is ready for committer, while the second patch needs to be extended to make as well, to keep feature parity between meson and make.","would_benefit_from_new_reviewer":"NO"}, {"id":"18741-e4ef6f7aa8a956cb@postgresql.org","summary":"The patch addresses a bug where detaching a partition referencing a partitioned table fails due to a trigger-related error. The proposed solution is to disallow attaching a partition if it references another partitioned table that is unrelated to the target table being attached to.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The core issue is how to handle attaching a partition that references an unrelated partitioned table without creating inconsistent catalog data.","would_benefit_from_new_reviewer":"YES"}, {"id":"18dcfb7f-5deb-4487-ae22-a2c16839519a@gmail.com","summary":"The publication and subscription tests are not concurrent-safe, leading to tuple concurrently updated errors due to modifying the same pg_database entry. The proposed solution is to prevent these tests from running in parallel to avoid the conflict.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"The main issue is the concurrency conflict in accessing pg_database. Jelte's patch attempts to address it by preventing parallel execution of these tests.","would_benefit_from_new_reviewer":"YES"}, {"id":"Z6oQXc8LmiTLfwLA@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch addresses a race condition in the 035_standby_logical_decoding.pl test that can occur on slow machines when a logical slot's catalog_xmin advances past the conflict point, preventing the conflict from being reported. It introduces a new injection point to prevent this advancement and includes adjustments to existing injection point functionality with the addition of injection_points_wakeup_detach().","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the changes to the injection point module should bump the module version to 1.1.","would_benefit_from_new_reviewer":"YES"}, {"id":"c3d617d4-1696-4aa7-8a4d-5a7d19cc5618@pgbackrest.org","summary":"The patch fixes a logging issue where the checkpoint logged in the error message for an invalid recovery timeline was being pulled from the control file instead of the backup label, leading to confusion. The patch updates the checkpoint and TLI to the correct values for logging.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CANOn0Ez_t5uDCUEV8c1YORMisJiU5wu681eEVZzgKwOeiKhkqQ@mail.gmail.com","summary":"The patch fixes a bug in ecpg that prevented it from warning about the use of 'COPY ... FROM STDIN', which is not supported. The fix involves correcting a variable check and has been back-patched to supported versions.","status":"DONE","activity":"INACTIVE","complexity":2,"problem":"A follow-up patch to add a regression test for the fix has been suggested but not yet implemented.","would_benefit_from_new_reviewer":"NO"}, {"id":"18146-04e908c662113ad5@postgresql.org","summary":"This thread discusses a fix to prevent data corruption that can occur when a file truncation fails during autovacuum, particularly on Windows. The proposed solution involves adding a critical section around the RelationTruncate function to prevent interruptions during the truncation process and ensuring that the operation is atomic. This involves a backport-compatible approach and a modification to pg_truncate_visibility_map to ensure WAL consistency.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"17821-dd8c334263399284@postgresql.org","summary":"This patch addresses a race condition in heap_update() that can lead to assertion failures and potentially page header corruption when pruning occurs concurrently with catalog updates using syscache entries. The proposed solution involves adding a runtime check in heap_update() to return TM_Deleted if the ItemId is not normal, preventing the corruption.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue is whether the proposed solution is the best approach, and whether it adequately addresses the underlying problem without introducing new issues. There's also a related unfixed case concerning loss of DDL changes, that will be spun off into a new thread.","would_benefit_from_new_reviewer":"YES"}, {"id":"20240410212344.GA1824549@nathanxps13","summary":"This patch introduces the ability to change the `autovacuum_max_workers` GUC without requiring a server restart. This is achieved by introducing a new `autovacuum_worker_slots` GUC, which requires a restart to change, and capping `autovacuum_max_workers` to this value. To avoid breaking existing systems, initdb is modified to adjust the default of autovacuum_worker_slots based on max_connections.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"The initial implementation caused problems on systems with very low semaphore limits, which was resolved by adjusting the default value of `autovacuum_worker_slots` during `initdb`.","would_benefit_from_new_reviewer":"NO"}, {"id":"GV1P251MB1004DDEE2EE8B2AE12C3C37CCD3F2@GV1P251MB1004.EURP251.PROD.OUTLOOK.COM","summary":"The proposed patch addresses potential SIGSEGV and FPE errors in pg_controldata when processing corrupted pg_control files. Specifically, it adds a check for NULL values returned by `localtime()` and adjusts the check for `WalSegSz` to prevent floating-point exceptions.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether to change the signed `WalSegSz` to unsigned, and if not, how best to handle potential negative values in `pg_controldata` without a larger refactor.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEudQApsZ8sdoRsn_oE=KEwkSMjh-sgsjuGWaE6CmHwQ+3xt1g@mail.gmail.com","summary":"The patch aimed to avoid a potential null pointer dereference in `src/backend/optimizer/path/allpaths.c` by removing an Assert and adding a null check, based on a Coverity finding. However, the patch was withdrawn after discussion revealed the Assert was intentionally placed as a logic cross-check and that the reported scenario should not occur.","status":"LACKS_SUPPORT","activity":"INACTIVE","complexity":2,"problem":"The primary issue was whether the Assert was valid and whether the Coverity warning indicated a real bug or a misunderstanding of the code's intended behavior.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAA5RZ0ujeNgKpE3OrLtR=eJGa5LkGMekFzQTwjgw=rzaLufQLQ@mail.gmail.com","summary":"The proposed patch prevents the use of COPY FREEZE on foreign tables, as the optimization is not applicable to remote tables and can mislead users. The patch throws an error when COPY FREEZE is attempted on a foreign table.","status":"DONE","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"18815-2a0407cc7f40b327@postgresql.org","summary":"The patch addresses a segmentation fault in the logical replication worker when replicating huge partitioned tables with BRIN indexes, specifically when brininsertcleanup is called multiple times due to incorrect index opening/closing in apply_handle_tuple_routing. The fix involves hardening brininsertcleanup and removing duplicate calls to ExecOpenIndices/ExecCloseIndices in worker.c.","status":"DONE","activity":"ACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAEP4nAzqiT6VbVC5r3nq5byLTnPzjniVGzEMpYcnAHQyNzEuaw@mail.gmail.com","summary":"This patch adds tab completion for ALTER USER RESET and ALTER DATABASE RESET commands in psql, so that only currently set variables are suggested for resetting, which is much more convenient than displaying all possible variables.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKAnmm+7o93fQV-RFkGaN1QnP-0D4d3JTykD+cLueqjDMKdfag@mail.gmail.com","summary":"This patch enhances psql by providing more intuitive titles for commands like \\dt, \\di, etc., by displaying titles like 'List of views' instead of the generic 'List of relations' when a specific relation type is requested.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":2,"problem":"Tom Lane suggested using pg_log_error_internal for the no-match case to avoid burdening translators with a '???' string, but is waiting on feedback/implementation of that suggestion from Greg.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAM6Zo8woa62ZFHtMKox6a4jb8qQ=w87R2L0K8347iE-juQL2EA@mail.gmail.com","summary":"The proposed patch addresses a bug that causes major version upgrades to fail when there are orphan role entries in the pg_auth_members catalog. The fix involves adding missing dependencies for pg_auth_members entries to prevent a race condition between GRANT and DROP ROLE, and also modifies pg_dumpall to handle dangling OIDs in pg_auth_members by issuing a warning instead of silently ignoring them.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the first patch should be back-patched, as it implies more pg_shdepend entries than currently exist.","would_benefit_from_new_reviewer":"YES"}, {"id":"198a8d1e-0792-4e7f-828e-902aa342f36e@Spark","summary":"The patch fixes outdated code comments in nodeAgg.c by updating references to the removed function lookup_hash_entry() to the correct function.","status":"DONE","activity":"ACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"20241225.123704.1194662271286702010.ishii@postgresql.org","summary":"This patch adds new APIs to the StringInfo package, `makeStringInfoExt` and `initStringInfoExt`, which allow callers to specify the initial allocation size of the StringInfo object. Existing APIs `makeStringInfo` and `initStringInfo` are now macros using the new APIs with a default size of 1024. The patch has been modified to maximize inlining for performance.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHewXNku-o46-9cmUgyv6LkSZ25doDrWq32p=oz9kfD8ovVJMg@mail.gmail.com","summary":"The patch fixes a potential unsafe access to the BufferDescriptors array in the BufferGetLSNAtomic() function when dealing with local buffers. Specifically, it prevents a negative buffer ID from being cast to an unsigned integer and used as an out-of-bounds array index.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z4chOKfnthRH71mw@nathan","summary":"The patch converts libpgport's pqsignal() to a void function, which is now possible due to a previous commit that decoupled legacy-pqsignal.c. It also addresses issues related to signal handling on Windows, including removing the redefinition of SIG_ERR and fixing instances of pqsignal() being called with invalid signal numbers in frontend programs.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+COZaB+9CN_f63PPRoVhHjYmCwwmb_9CWLxqCJdMWDqs1a-JA@mail.gmail.com","summary":"The proposal is to remove the debugging functions PrintBufferDescs and PrintPinnedBufs from bufmgr.c, as they have not compiled since 2016 and are considered to be of limited use.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CP8P284MB24965CB63DAC00FC0EA4A475EC462@CP8P284MB2496.BRAP284.PROD.OUTLOOK.COM","summary":"The proposal aims to enhance the \\conninfo meta-command in psql by displaying more detailed connection information in a tabular format. The latest suggestion involves modifying the existing \\conninfo command to output a table with essential settings, instead of creating a separate \\conninfo+ command.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The thread is debating whether to replace the existing \\conninfo output with a table or create a new command. Also, there's discussion on which specific connection parameters to include in the output, with concerns about clutter and long-term maintainability.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAA5RZ0uVOGBYmPEeGF2d1B_67tgNjKx_bKDuL+oUftuoz+=Y1g@mail.gmail.com","summary":"This patch adds new columns to pg_stat_all_tables to track the cumulative time spent performing vacuum and analyze operations per relation, which can be used to track the average time of these operations and identify tuning opportunities.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z6SOha5YFFgvpwQY@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch series moves wal_buffers_full to the WalUsage structure, allowing it to be reported in pg_stat_statements, EXPLAIN/auto_explain, and VACUUM/ANALYZE (VERBOSE). The patches also reorder the attributes in pg_stat_statements to group WAL-related information together.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"ZmaXmWDL829fzAVX@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch adds a new field, delay_time, to the pg_stat_progress_vacuum and pg_stat_progress_analyze views, reporting the total accumulated time spent sleeping due to cost-based vacuum delay settings. The feature is controlled by the track_cost_delay_timing parameter, which is off by default, and the delay_time is also added to the output of VACUUM/ANALYZE VERBOSE.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z6aIy4aywxUZHAo6@nathan","summary":"The initial patch aimed to standardize the descriptions of GUCs (Grand Unified Configuration parameters) by consistently describing special values like -1 or , which have specific meanings such as disabling a feature. A follow-up patch addresses inconsistencies in auto_explain GUCs.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The latest patch (v9) needs review to ensure the changes to auto_explain's GUC descriptions are accurate and follow the agreed-upon conventions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAA5RZ0trTUL6_vpvW79daGgkp7B-ZtWUc5yrPz5Sjm8Ns4KRgQ@mail.gmail.com","summary":"The initial proposal was to improve DEBUG1 logging for CREATE INDEX to provide information about parallel workers. This evolved into a discussion about adding a VERBOSE option to CREATE INDEX and potentially ALTER TABLE to provide more detailed information, similar to REINDEX VERBOSE, but was eventually withdrawn by the author pending further discussion about the best approach.","status":"LACKS_SUPPORT","activity":"INACTIVE","complexity":3,"problem":"The main issue is disagreement on the best approach for providing users with information about parallel worker usage during CREATE INDEX and related operations, with concerns about the scalability of adding VERBOSE options to multiple commands versus the complexity of extending EXPLAIN.","would_benefit_from_new_reviewer":"NO"}, {"id":"50fe6779-ee2d-4256-bc64-cd661bc4029a@gmail.com","summary":"The patch improves statistics estimation by considering GROUP BY clauses as a 'uniqueiser' similar to DISTINCT clauses, to improve row estimations in joins over groupings. The original patch from Andrei Lepikhov has been pushed, and a separate patch from Vlada Pogozhelskaya has been rejected.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAKRu_Yf3gvXGcCnqqfoq0Q8LX8UM-e-qbm_B1LeZh60f8WhWA@mail.gmail.com","summary":"This patch set refactors vacuum's lazy_scan_heap() to use the streaming read API, which includes confining vacuum's skip logic to lazy_scan_skip(). The streaming read API allows for larger, more efficient I/O operations, and also facilitates asynchronous I/O in the future. Several iterations have focused on code readability, valgrind errors, performance tuning, and interactions with the buffer access strategy.","status":"DONE","activity":"ACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"7bed6c08-72a0-4ab9-a79c-e01fcdd0940f@vondra.me","summary":"The patch aims to mitigate the impact of hash join batch explosions by balancing memory usage between the in-memory hash table and spill files. It achieves this by dynamically adjusting the number of batches and the size of the hash table to minimize overall memory consumption, particularly in scenarios where a small number of batches lead to excessive memory usage due to batch files. The main part of the patch has been committed, while a second part addressing premature disabling of nbatch growth is still under consideration.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"098A3E67-E4A6-4086-9C66-B1EAEB1DFE1C@yandex-team.ru","summary":"This thread discusses a patch to specialize sorting functions for int arrays in PostgreSQL, specifically within the intarray contrib module. The aim is to improve performance by using specialized sorting routines for common data types like integers, and the final version of the patch focuses on making the sorting function private to the intarray module, streamlining the code, and addressing potential regressions related to pre-sorted arrays.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAKRu_ZF_KCzZuOrPrOqjGVe8iRVWEAJSpzMgRQs=5-v84cXUg@mail.gmail.com","summary":"The patch introduces a mechanism for 'eagerly scanning' all-visible but not all-frozen pages during normal vacuums to amortize the I/O cost of aggressive vacuums and avoid performance spikes. It also introduces a GUC `vacuum_max_eager_freeze_failure_rate` to control the maximum fraction of pages that can be scanned and fail freezing before eager scanning is disabled for the remainder of the vacuum. The patch has been committed.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+HiwqFGkMSge6TgC9KQzde0ohpAycLQuV7ooitEEpbKB0O_mg@mail.gmail.com","summary":"This patch series aims to improve the performance of generic plans on partitioned tables by deferring the locking of runtime-prunable partitions from the plan cache to the executor. This involves refactoring parts of the executor to support deferred locking and to handle plan invalidation during execution. The latest version focuses on an approach that performs pruning before lock acquisition in executor startup, and then remembers the decisions that have been made.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The core question is the safety and correctness of using plans which have been partly invalidated, with the need for changes in extension code using hooks for ExecutorStart.","would_benefit_from_new_reviewer":"NO"}, {"id":"CALzhyqzmZ6b9Sbp4jCORJV48t4kz2a1EqR3z4DUxX4RfRYR2xA@mail.gmail.com","summary":"The proposed patch aims to address a quadratic planning time issue for ordered paths over partitioned tables by caching the position of the previously found Equivalence Member (EM) in the `find_ec_member_matching_pathkeys()` function. However, the consensus seems to be moving towards reviewing and contributing to a more comprehensive patch series by Yuya Watari that addresses the same issue.","status":"LACKS_SUPPORT","activity":"INACTIVE","complexity":2,"problem":"The proposed quick fix is considered too much of a kludge with potential negative performance impacts and limited applicability compared to a more comprehensive refactoring.","would_benefit_from_new_reviewer":"NO"}, {"id":"3068812.1738206654@sss.pgh.pa.us","summary":"The proposal was to replace CaseTestExpr with Params during eval_const_expressions to remove CaseTestExpr from the executor and address bugs related to its loose connection with its value. However, the author withdrew the patch due to concerns about breaking the matching of index expressions containing CASE or ArrayCoerce to query quals after the transformation.","status":"LACKS_SUPPORT","activity":"INACTIVE","complexity":4,"problem":"The transformation might cause CASE expressions that would have been seen as equal() to no longer be equal, breaking the matching of index expressions containing a CASE or ArrayCoerce to query quals.","would_benefit_from_new_reviewer":"NO"}, {"id":"CACxu=vJaKFNsYxooSnW1wEgsAO5u_v1XYBacfVJ14wgJV_PYeg@mail.gmail.com","summary":"This thread discusses a patch to improve the performance of expanded objects (other than arrays) within plpgsql functions. The patch introduces a new optimization rule for updates of expanded objects and allows extension functions to participate in in-place updates, leveraging support functions to avoid unnecessary flattening and expansion of these objects. The goal is to allow custom types to be treated more efficiently in plpgsql, similar to arrays.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAJ7c6TO3X88dGd8C4Tb-Eq2ZDPz+9mP+KOwdzK_82BEz_cMPZg@mail.gmail.com","summary":"The proposal is to refactor the bytea_sortsupport() function and related code, potentially moving all bytea-related code from varlena.c into a new bytea.c file to reduce the risk of bugs and allow for better optimization.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The patch needs to be more ambitious, potentially splitting varlena.c into varlena.c and bytea.c.","would_benefit_from_new_reviewer":"NO"}, {"id":"Z7RkQ0EfYaqqjgz/@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch removes wal_[sync|write][_time] fields from pg_stat_wal, as this information is now available in pg_stat_io, simplifying the code and encouraging users to use the latter for WAL statistics.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAD21AoDht9Pz_DFv_R2LqBTBbO4eGrpa9Vojmt5z5sEx3XwD7A@mail.gmail.com","summary":"This patch introduces a CLOG lookup to skip decoding changes for already-aborted transactions in logical decoding, enhancing performance especially for large rolled-back transactions, and makes some adjustments to prepared transaction flag names for better clarity and consistency.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAPBGcbxo9ASzq14VTpQp3mnUJ5omdgTWUJOvWV0L6nNigWE5jw@mail.gmail.com","summary":"This thread discusses the addition of AES-128-CFB mode support to the pgcrypto extension. A patch was submitted by Umar Hayat, reviewed by Alvaro Herrera and Daniel Gustafsson, and ultimately committed by Daniel Gustafsson after a small documentation change.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHv8Rj+deqsQXOMa7Tck8CBQUbsua=+4AuMVQ2=MPM0f-ZHbjA@mail.gmail.com","summary":"This patch adds a warning to pg_createsubscriber when max_slot_wal_keep_size is not set to -1 on the publisher, as it may lead to replication failures. The patch fetches the max_slot_wal_keep_size setting from the publisher and logs a warning during dry-run mode if it's misconfigured.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CALj2ACW4aUe-_uFQOjdWCEN-xXoLGhmvRFnL8SNw_TZ5nJe+aw@mail.gmail.com","summary":"This thread discusses a proposal to introduce a GUC, idle_replication_slot_timeout, to invalidate replication slots that have been inactive for a specified duration, as well as a potential max_slot_xid_age parameter.  The patch has gone through many iterations. Currently, the implementation invalidates inactive replication slots during checkpoint, sets a new 'inactive_since' parameter and accounts for sync slots correctly.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"582b2613-0900-48ca-8b0d-340c06f4d400@eisentraut.org","summary":"This patch enables the use of text position search functions (position, strpos, replace, split_part, string_to_array, string_to_table) with nondeterministic collations.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The reviewer suggested some minor edits to the documentation and code, and suggested a better commit title. Also, the 'greedy' semantics of the callers should be considered, meaning that we need to find the longest substring, not the shortest. ","would_benefit_from_new_reviewer":"NO"}, {"id":"CAGECzQTg2hcmb5GaU53uuWcdC7gCNJFLL6mnW0WNhWHgq9UTgw@mail.gmail.com","summary":"This thread discusses a proposal to add a new protocol message to Postgresql for setting GUCs, intended primarily for use by connection poolers and drivers. The proposal has evolved to focus on protocol extensions and parameters, and the discussion now centers on the best way to handle protocol versioning and feature negotiation, specifically whether a minor protocol bump should be used, or if the new facilities should be enabled via the existing mechanism for protocol options.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The key issues currently being discussed are: 1) How best to expose the capability to set protocol-level variables: as a GUC, or something else; 2) How to signal the presence of the feature to clients: via protocol version or a new connection option; and 3) what is the best approach for feature negotiation: a function for every feature or some other mechanism?","would_benefit_from_new_reviewer":"YES"}, {"id":"d1b467a78e0e36ed85a09adf979d04cf124a9d4b.camel@vmware.com","summary":"This thread discusses a proposal to add Federated Authentication/Authorization with OAUTHBEARER support to PostgreSQL. The patchset adds OAuth support to libpq using libcurl, provides a server-side API for extension modules to implement OAuth provider-specific validation, and extends the SASL support to carry the OAuth access tokens. Many iterations and reviews have been done, resulting in significant refactoring and improvements, and it has now been committed.","status":"DONE","activity":"ACTIVE","complexity":5,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"a368248e-69e4-40be-9c07-6c3b5880b0a6@eisentraut.org","summary":"This thread discusses a patch to implement virtual generated columns in PostgreSQL. The latest iteration focuses on expanding the functionality in the planner to address issues with outer joins and grouping sets, with ongoing refactoring to reduce code duplication. The feature is near completion, with a few remaining issues to resolve before it can be committed.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"There are issues with correctness in the planner, specifically with outer join semantics, and the current implementation has code duplication.","would_benefit_from_new_reviewer":"NO"}, {"id":"8bb3af8a-796c-440f-b775-d05437b75e6f@eisentraut.org","summary":"This patch allows subfield references in column references without parentheses, subject to certain conditions, implementing rules from the SQL standard (since SQL99). Specifically, identifier chains of three or more items now have an additional possible interpretation, like (A.B).C.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The main question is whether to perform correlation checks in transformColumnRef() or use transformIndirection() after constructing an A_Indirection node, and also how to deal with view definitions that may be modified when dumped and restored.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAJ_b96Bp=-ZwihPPtuaNX=SrZ0U6ZsXD3+fgARO0JuKa8v2jQ@mail.gmail.com","summary":"This patch allows NOT VALID foreign key constraints on partitioned tables. When merging a NOT VALID FK constraint from a child table with a VALID parent constraint, it implicitly validates the child constraint and marks it as VALID.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"42d3f855-2275-4361-a42a-826172ca2dc4@Spark","summary":"This patch adds the ability to create foreign tables using the `CREATE FOREIGN TABLE LIKE` command, mirroring the functionality of `CREATE TABLE LIKE` for local tables, but ignoring inapplicable options.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"956435f8-3b2f-47a6-8756-8c54ded61802@dalibo.com","summary":"This patch introduces a new GUC, autovacuum_vacuum_max_threshold, which sets a hard cap on the number of dead tuples before autovacuum is triggered, overriding the calculation based on autovacuum_vacuum_threshold and autovacuum_vacuum_scale_factor. This is intended to ensure that large tables are vacuumed more regularly, addressing issues where the default scale factor leads to infrequent vacuums.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z24fyb3ipXKR38oS@paquier.xyz","summary":"The proposal aims to add a WAL-logging facility for pgstats kinds, allowing individual stats kinds to decide what data to WAL-log and how it's handled during recovery. This would enable replication of specific stats, assist in crash recovery, and potentially support historical tracking and injection point stats.","status":"LACKS_SUPPORT","activity":"ACTIVE","complexity":4,"problem":"Andres Freund strongly objects to the fundamental design, arguing that stats should be re-emitted during replay based on existing WAL records rather than WAL-logging the stats themselves. The author has withdrawn the patch for now.","would_benefit_from_new_reviewer":"NO"}, {"id":"CANtu0oiTgFW47QgpTwrMOVm3Bq4N0Y5bjvTy5sP0gYWLQuVgjw@mail.gmail.com","summary":"The proposed patch aims to prevent crashes caused by unexpected side effects from local injection points during installcheck, specifically in isolation and TAP tests, by disabling installcheck for injection point tests.","status":"LACKS_SUPPORT","activity":"ACTIVE","complexity":3,"problem":"Michael Paquier argues that disabling the tests hides an actual bug related to serializable transactions, rather than fixing it.","would_benefit_from_new_reviewer":"NO"}, {"id":"ff4e59305e5d689e03cd256a736348d3e7958f8f.camel@j-davis.com","summary":"This thread discusses a patch to add injection points for hash aggregation, allowing for more flexible testing and debugging. The initial patch included a refactoring of hash_agg_set_limits, but only the injection points part was committed.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAJ7c6TOyZ9bGNrDK6Z3Q0gr9ow8ZpOm+=+01mpE0dsdH4C+u9A@mail.gmail.com","summary":"The patch aims to improve code coverage for network address functions by adding new tests for functions like abbrev(inet), set_masklen(cidr,int4), netmask(inet), hostmask(inet), inet_client_addr(), inet_client_port(), inet_server_addr(), and inet_server_port(). The latest version includes tests for set_masklen with invalid netmask values and moves the named tests to src/test/ssl/t/003_sslinfo.pl.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The placement of the tests for inet_client_addr(), inet_client_port(), inet_server_addr(), and inet_server_port() in the ssl test suite is still under discussion, as they are not directly related to SSL functionality. Also, Michael Paquier mentioned the need to cover set_masklen(inet) for the -1 case.","would_benefit_from_new_reviewer":"NO"}]
