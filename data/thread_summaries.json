[{"id":"TYAPR01MB586654E2D74B838021BE77CAF5EEA@TYAPR01MB5866.jpnprd01.prod.outlook.com","summary":"The proposed patch aims to fix a bug in pg_ctl on Windows where it incorrectly returns a success code even if the postmaster has already been started. The fix involves ensuring that pg_ctl accurately identifies the postmaster PID and reports the correct status.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Multiple alternative solutions have been proposed (platform-independent approach, using CreateProcess), and it's unclear which direction to take. There's also some disagreement about whether the bug exists in versions prior to v17.","would_benefit_from_new_reviewer":"YES"}, {"id":"ZWlrdQarrZvLsgIk@pryzbyj2023","summary":"The patch aims to fix a rare race condition where the postgres server gets stuck in shutdown following an OOM kill of a child process and a subsequent pg_ctl stop command. The core issue is that the checkpointer process doesn't receive the shutdown signal in this scenario, leading to a hang.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":4,"problem":"The patch needs a rebase and consideration of Noah Misch's suggestion to align with restart_after_crash=off behaviors by clearing FatalError once the startup process is launched post-OOM recovery.","would_benefit_from_new_reviewer":"NO"}, {"id":"20231231.200218.1749113750714588065.horikyota.ntt@gmail.com","summary":"The patch aims to address a regression introduced in PG16 where the walreceiver process doesn't immediately respond to promotion requests due to a change in libpq connection handling. The proposed solution involves adjusting signal handling in the walreceiver to ensure timely termination upon receiving a promotion request, along with other related improvements.","status":"WAITING_FOR_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The latest feedback requests more clarity on the purpose and backport status of the patches, as well as more meaningful commit messages.","would_benefit_from_new_reviewer":"NO"}, {"id":"bbaaf9f9-ebb2-645f-54bb-34d6efc7ac42@fujitsu.com","summary":"The patch aims to address an unexpected duplicate for tablespace error that can occur during logical replication due to relfilenode collisions between temporary and permanent tables. The proposed solution involves modifying RelidByRelfilenumber to ignore temporary relations, as they require a backend ID to be uniquely identified, and documenting this behavior.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"Whether to exclude temporary relations from RelidByRelfilenumber and how to handle the asymmetry with pg_relation_filenode.","would_benefit_from_new_reviewer":"NO"}, {"id":"de52b282-1166-1180-45a2-8d8917ca74c6@enterprisedb.com","summary":"This thread discusses a long-standing data loss bug in the initial sync of logical replication, which is caused by insufficient cache invalidation when adding tables to a publication. The proposed solution involves distributing invalidation messages to in-progress transactions during logical decoding and selectively invalidating the cache to reduce performance degradation. The latest patches aim to address various scenarios, including ALTER PUBLICATION, ALTER SCHEMA, and different table types (partitioned, inherited).","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"There is a performance degradation of up to 30% during the logical decoding process, when distributing invalidations, which needs to be addressed. Potential scenarios causing regressions also need to be explored and understood.","would_benefit_from_new_reviewer":"YES"}, {"id":"1100715.1712265845@sss.pgh.pa.us","summary":"The patchset aims to improve the reliability and debuggability of TAP tests by replacing IPC::Run::timeout with IPC::Run::timer in certain cases, allowing for more graceful handling of timeouts and providing more informative error messages. Additionally, it includes minor improvements to the tab completion test and cleanup of background psql sessions.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The latest version of the patchset requires review to ensure that the changes to timeout handling in the TAP tests are correct and do not introduce regressions.","would_benefit_from_new_reviewer":"YES"}, {"id":"tencent_FA60D4EE3E14ACF0B936396551260A4FFD05@qq.com","summary":"The patch aims to ensure that historic snapshots correctly track transactions committed during the BUILDING_SNAPSHOT state. The author is addressing concerns about how the patch interacts with 'fast forward' scenarios during WAL replay, and whether existing fast-forward logic has issues of its own.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The main issue is how the proposed changes interact with WAL replay's 'fast forward' optimization, and whether the fast forward logic already has issues of its own.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEze2WgNjODiAiTU18E06_BrRK0nqwJ1kdS_bN61c2_DpFDSnQ@mail.gmail.com","summary":"The proposed patch aims to fix a bug where pages with non-standard layouts (like those in FSM/VM forks) are not correctly WAL-logged during CREATE DATABASE, leading to inconsistencies between primaries and replicas. The initial patch proposed treating all pages in the source database as having non-standard layouts, but this was met with resistance due to potential WAL volume increases.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The key issue is how to correctly WAL-log pages with non-standard layouts during CREATE DATABASE without causing a significant increase in WAL volume. Tom and Robert believe blindly treating all pages as non-standard would be a major regression.","would_benefit_from_new_reviewer":"NO"}, {"id":"tencent_8DEC9842690A9B6AFD52D4659EF0700E9409@qq.com","summary":"The patch aims to ensure that historic snapshots correctly track transactions committed while the snapshot is in the BUILDING_SNAPSHOT state, especially those involving catalog modifications. This is achieved by marking catalog-modifying transactions in the reorder buffer during snapshot building, even when fast-forwarding through the WAL.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether to use a single 'if' condition or separate the logic for handling catalog changes within the existing conditional structure in heap2_decode and heap_decode.","would_benefit_from_new_reviewer":"YES"}, {"id":"tencent_6AAF072A7623A11A85C0B5FD290232467808@qq.com","summary":"The proposed patch addresses a bug where transactions committed during the BUILDING_SNAPSHOT state are not tracked, potentially leading to logical replication failures. The patch tracks these transactions and includes a test case.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"Bertrand has requested some changes to the patch to make it more robust with respect to future changes to XLOG records, as well as some minor comment and whitespace cleanups.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAGECzQQD5f9ce-D1v6vCTT94hG=JbGdTHuf8vQ=HBLz9T4dA1g@mail.gmail.com","summary":"The patch aims to fix a bug where statement timeouts are incorrectly reported as user cancellations, leading to buildfarm failures. It achieves this by ensuring the correct error message is displayed when a statement is canceled due to a timeout.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Tom Lane raised a concern about disabling the statement timeout interrupt, and Jelte responded with a justification for the approach and an explanation of the difficulty of fully removing the interrupt. It's not clear if Tom was convinced.","would_benefit_from_new_reviewer":"YES"}, {"id":"ba0edc53-4b1f-4c67-92d1-29aeddb36a18@gmail.com","summary":"The patch aims to stabilize incremental sort cost estimation by considering equivalence classes when estimating the number of groups, which can be affected by the order of columns in GROUP BY clauses or slight changes in query text. The latest version focuses on teaching `estimate_num_groups` to process PathKey nodes and choose the correct number of distinct values by considering EquivalenceClass members.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The main question is whether the proposed approach correctly handles cases where ndistinct values have changed and if the performance impact is justifiable given the corner-case nature of the identified instability.","would_benefit_from_new_reviewer":"YES"}, {"id":"AM5PR83MB0178D3B31CA1B6EC4A8ECC42F7529@AM5PR83MB0178.EURPRD83.prod.outlook.com","summary":"This patch adds a non-blocking version of PQcancel to libpq, allowing cancellation requests to be sent without blocking the event loop. The approach involves creating a new connection for the cancellation, supporting all connection options, and introducing new API functions for starting and polling the cancellation process. This has undergone extensive revisions to address test flakiness, error handling, and API design.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+OCxoxwsgi8QdzN8A0OPGuGfu_1vEW3ufVBnbwd3gfawVpsXw@mail.gmail.com","summary":"This patch addresses a compilation issue on Windows when both OpenSSL and GSSAPI are enabled, caused by conflicting macros. The proposed solution involves creating a new header file, `pg-gssapi.h`, to encapsulate the GSSAPI includes and undefine the conflicting macro X509_NAME, ensuring consistent handling of GSSAPI dependencies across the codebase.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The current patch needs review to confirm if the ENABLE_GSS ifdef is truly unnecessary in libpq-be.h and whether the overall approach is robust enough to prevent future conflicts with other libraries that might include wincrypt.h.","would_benefit_from_new_reviewer":"YES"}, {"id":"20240523000548.58.nmisch@google.com","summary":"This patch series aims to improve the reliability of invalidation messages, especially those related to inplace updates, by ensuring they are delivered even in the face of errors during transaction commit. The latest patch (inplace160) has been modified to address a deadlock scenario and is awaiting further review.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The main issue is ensuring that invalidation messages for inplace updates are reliably delivered without introducing deadlocks or performance regressions. The latest concern revolves around potential interaction with catalog cache initialization.","would_benefit_from_new_reviewer":"YES"}, {"id":"70BF24D6-DC51-443F-B55A-95735803842A@amazon.com","summary":"This thread discusses and proposes a patch to fix a race condition that can lead to control file corruption, specifically in EXEC_BACKEND builds (like Windows). The proposed solution involves passing a copy of the initial control file data to child processes to avoid concurrent read/write issues.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The core issue now revolves around the best way to pass the control file information to child processes in EXEC_BACKEND environments, and whether to take a more future-proof approach that avoids reading from ControlFile memory directly.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFGqpvg-pRw=cdsUpKYfwY6D3d-m9tw8WMcAEE7HHWfm-oYWvw@mail.gmail.com","summary":"The proposed patch fixes an issue where psql on Windows fails to connect to a PostgreSQL server with GSSAPI enabled due to incorrect handling of WSAEWOULDBLOCK errors. The patch suggests using SOCK_ERRNO instead of errno in the gss_read function to properly handle non-blocking socket errors on Windows.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The reviewer questions why the proposed fix only addresses one call to pqsecure_raw_read() in gss_read() and not the second, and also whether the same fix should be applied to pqsecure_raw_write() in pqsecure_open_gss().","would_benefit_from_new_reviewer":"NO"}, {"id":"CANtu0oiktqQ2pwExoXqDpByXNCJa-KE5vQRodTRnmFHN_+qwHg@mail.gmail.com","summary":"The patch aims to fix a potential issue where non-MVCC index scans (using DirtySnapshot) can miss tuples due to concurrent updates, leading to false negatives in scenarios like unique constraint checks and logical replication. The latest version of the patch is under development.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The currently proposed solution does not guarantee the absence of false negatives, as it relies on XID values, which do not always reflect the transaction commitment order.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAccyYKrRojjO-weeXFs1EqLFHWSBfjBzObwVDv4u-ZxmU=7Rg@mail.gmail.com","summary":"The patch aims to fix a crash issue in standby servers during switchover scenarios, where the walreceiver process terminates due to WAL record mismatch and the startup process fails to open the WAL file, leading to a PANIC. The proposed solution involves comparing walrcv->receiveStart with recptr and resetting walrcv->flushedUpto if walrcv->receiveStart is greater than recptr.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The current patch might cause the primary to stream data from the requested location again, even if the standby has already valid data.","would_benefit_from_new_reviewer":"YES"}, {"id":"20140424101827.2714.39486@wrigleys.postgresql.org","summary":"The patch aims to prevent misleading entries in pg_stat_activity where the state is 'idle' but xact_start and query_start show old timestamps. The current proposed solution is to avoid exposing transaction and query start times for idle backends in pg_stat_activity.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The current patch filters the data in pg_stat_activity results, rather than preventing the incorrect data from being written in the first place. Alternative solutions, such as resetting the timestamp when the state is set to IDLE or in CommitTransactionCommand(), have been suggested.","would_benefit_from_new_reviewer":"YES"}, {"id":"CANtu0ojXmqjmEzp-=aJSxjsdE76iAsRgHBoK0QtYHimb_mEfsg@mail.gmail.com","summary":"This patch set aims to fix issues that arise when using ON CONFLICT UPDATE with REINDEX CONCURRENTLY or CREATE/DROP INDEX CONCURRENTLY. The core problem is a race condition where the arbiter indexes used by ON CONFLICT UPDATE are selected during planning but can change before execution due to concurrent index operations, leading to unexpected duplicate key value violates unique constraint errors and deadlocks. The solution involves considering indisready indexes alongside indisvalid indexes during the planning phase, ensuring at least one fully valid index is present.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding question is whether the current approach of considering indisready indexes alongside indisvalid indexes during planning is the correct and most robust solution to prevent the race condition and ensure consistent behavior of ON CONFLICT UPDATE in the presence of concurrent index operations.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+hUKGLO02j2WLiQ73iZ+CEY1G+LPmHo3PXaYTaFY9Hj222mEQ@mail.gmail.com","summary":"The proposed patch addresses a potential data loss issue related to concurrent WAL flushing and the InstallXLogFileSegment() function. It aims to ensure that newly created WAL segments are durable on disk before concurrent backends attempt to write to them, thus preventing a scenario where a power loss could lead to data loss or transaction inconsistencies.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether durable_rename() has a window that makes it less atomic than it seems for other uses as well, and if it does, what's the right generic approach to take, balancing contention and safety.","would_benefit_from_new_reviewer":"YES"}, {"id":"b611015f-b423-458c-aa2d-be0e655cc1b4@postgresql.org","summary":"The patch adds a TOAST table to pg_index to allow storage of larger expressions in indexes, which is particularly relevant for vector search techniques. It also includes fixes to prevent assertion failures related to snapshot management during concurrent index operations and adds assertions to ensure a valid snapshot is present when accessing TOAST tables.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":4,"problem":"The author is reconsidering some aspects of the patch related to snapshot handling in specific code paths and whether the snapshot checks should be column-based or more general.","would_benefit_from_new_reviewer":"NO"}, {"id":"18396-03cac9beb2f7aac3@postgresql.org","summary":"The patch relaxes an overly strict assertion in `gistFindCorrectParent()` that can cause failures when inserting large tuples into a GiST index, especially in cases involving page splits. The author has also identified a potential out-of-bounds read in `gistdoinsert()` and provided a patch for that as well.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether the identified issue in gistdoinsert() is a real issue that requires fixing.","would_benefit_from_new_reviewer":"YES"}, {"id":"0acde6ec-7413-4a27-a2be-49897ae67e61@postgrespro.ru","summary":"The patch aims to prevent the creation of empty .log files during log rotation when log_destination is set to 'csvlog'. The proposed solution involves checking the Log_destination parameter in the logfile_rotate_dest() function to ensure only relevant logs are rotated.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The main issue is determining the correct logic within logfile_rotate_dest() to prevent the creation of empty .log files while respecting the historical behavior of keeping the stderr log file descriptor open.","would_benefit_from_new_reviewer":"NO"}, {"id":"CANtu0ojmVd27fEhfpST7RG2KZvwkX=dMyKUqg0KM87FkOSdz8Q@mail.gmail.com","summary":"The patch fixes an issue in bt_index_parent_check where it incorrectly identifies valid indexes built concurrently as invalid, due to using SnapshotAny instead of an MVCC snapshot for the heap scan. The proposed solution modifies bt_index_parent_check to use an MVCC snapshot, aligning its behavior with index builds.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Andrey Borodin has raised a question about the snapshot usage in the patch, and it's unclear if the current snapshot handling is correct.","would_benefit_from_new_reviewer":"YES"}, {"id":"Z5sd5O9JO7NYNK-C@paquier.xyz","summary":"This patch aims to address issues with 2PC transaction handling during recovery, specifically related to CLOG lookups and GlobalTransactionData inconsistencies. It proposes refactoring the 2PC code to integrate FullTransactionIds more deeply and moving CLOG lookups to a later stage of recovery when the cluster is in a consistent state. Additionally, it addresses handling of future 2PC files and inconsistencies arising from backups.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding question is whether, upon encountering stale or future two-phase state files, recovery should fail entirely to alert the user to a potentially serious backup/restore issue, or whether the existing behavior of removing these files should be retained, particularly in back branches.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJDiXgj72Axj0d4ojKdRWG_rnkfs4uWY414NL=15sCvh7-9rwg@mail.gmail.com","summary":"The proposal aims to address the ability to access temporary tables of other sessions. Initially, the goal was to forbid dropping temporary tables of other sessions, but the discussion evolved to fixing a bug that allows unintended access to other sessions' temporary tables. The latest suggestion is to add a GUC to allow superusers to drop temp tables of other sessions, while disabling broken read/write functionality.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The main issue is deciding how to handle access to temporary tables of other sessions, balancing the desire to improve temp table performance by removing locks with the potential need for superusers to manage temporary tables in other sessions. Should the broken read/write functionality be disabled while allowing superusers to drop tables via a GUC?","would_benefit_from_new_reviewer":"NO"}, {"id":"873c33c5-ef9e-41f6-80b2-2f5e11869f1c@garret.ru","summary":"The patch series aims to address an issue where bitmap heap scans can return incorrect results due to a race condition with concurrent vacuum operations, specifically when the 'skip_fetch' optimization is enabled. The proposed solution is to disable this optimization, while longer-term fixes are explored.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The key issue is the race condition between bitmap heap scans and vacuum, leading to incorrect query results when the all-visible bit is set prematurely. Specifically, the bitmap heap scan relies on the visibility map (VM) optimization, and reads the VM bit of a heap page, assuming it's valid from the point that the bitmap scan was initiated, but a concurrent vacuum may have updated the bit in the meantime.","would_benefit_from_new_reviewer":"YES"}, {"id":"2a62f138c9dcb6fcf5889b076d123aa2@oss.nttdata.com","summary":"The patch aims to fix an issue in the `consume_xids` function where it incorrectly advances transaction IDs (XIDs), especially outside transaction blocks or during the first call within a transaction block, and also to improve its behavior and comments. It also aims to support larger block sizes (32k).","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The author needs to address review comments from Masahiko Sawada on the patches skip_xid_correctly.diff and support_blksz_32k.diff.","would_benefit_from_new_reviewer":"NO"}, {"id":"79755a2b18ed4fe5e29da6a87a1e00d1@postgrespro.ru","summary":"The patch aims to fix an issue where `check_foreign_key()` reuses a cached plan, leading to incorrect cascade DELETE operations after UPDATE commands on the primary key table when using a connection pooler. The proposed solution involves either adjusting static variables or restricting usage of `check_primary_key` and `check_foreign` functions to BEFORE triggers.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The current solution might not be robust enough to handle all cases, as users could create their own BEFORE triggers that trigger `check_primary_key` incorrectly.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACX+KaMz2ZoOojh0nQ6QNBYx8Ak1Dkoko=D4FSb80BYW+o8CHQ@mail.gmail.com","summary":"The patch modifies pg_prewarm to check SELECT privileges on the parent table when prewarming indexes, rather than checking privileges on the index itself. This aligns with the existing behavior where SELECT privileges on a table implicitly grant usage of its indexes.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Ensuring the implementation avoids deadlock by locking the table and index in the correct order, and confirming that checking SELECT privilege on the parent table is the appropriate approach.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEze2WiWt+9+OnqW1g9rKz0gqxymmt=oe6pKAEDrutdfpDMpTw@mail.gmail.com","summary":"The patch addresses a bug in the MD smgr internals where unlink requests for specific forks or segments incorrectly unlinked segment 0 of the main fork. The proposed solution has shifted from fixing the incorrect unlinking to restricting the functionality to only handle tombstone files, ensuring it's not misused as a general-purpose unreliable segment unlink mechanism.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The current patch renames register_unlink_segment() to register_unlink_tombstone() and asserts that mdunlinkfiletag only receives expected values. The primary question is whether this revised approach is the correct way to address the original issue.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAH2-Wz=PqOziyRSrnN5jAtfXWXY7-BJcHz9S355LH8Dt=5qxWQ@mail.gmail.com","summary":"The proposed patch addresses a race condition in GiST and SP-GiST index-only scans that can lead to incorrect query results when concurrent VACUUM operations recycle tuple IDs. The patch ensures that GiST and SP-GiST VACUUM operations acquire cleanup locks and that index-only scans hold onto leaf page buffer pins while accessing the visibility map or heap.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The primary issue is ensuring the correctness of GiST and SP-GiST index-only scans in the presence of concurrent VACUUM operations and tuple ID recycling.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEudQArbTWVSbxq608GRmXJjnNSQ0B6R7CSffNnj2hPWMUsRNg@mail.gmail.com","summary":"The patch fixes an API misuse in src/bin/pg_amcheck/pg_amcheck.c, replacing `free` with `PQfreemem` when freeing memory allocated by `PQescapeIdentifier` in the frontend.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"2039ac58-d3e0-434b-ac1a-2a987f3b4cb1@greiz-reinsdorf.de","summary":"The patch aims to fix a starvation issue in libpq's asynchronous API when dealing with servers that send SSL records larger than 8kB, specifically affecting clients like ruby-pg when connecting to databases like AWS RDS Aurora Serverless, YugabyteDB, and CockroachDB. The patch proposes repeatedly calling pqReadData() in PQconsumeInput() until all buffered SSL data is processed.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether other parts of libpq assume that a single call to pqReadData will drain the buffers.","would_benefit_from_new_reviewer":"YES"}, {"id":"B2FD26B4-8F64-4552-A603-5CC3DF1C7103@yesql.se","summary":"This patch allows the default interval for the \\watch command in psql to be configured via a new variable, WATCH_INTERVAL. This allows users to set a default other than the current two seconds.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"It is not clear if the latest version of the patch has been sufficiently reviewed.","would_benefit_from_new_reviewer":"YES"}, {"id":"Z73IsKBceoVd4t55@ip-10-97-1-34.eu-west-3.compute.internal","summary":"The patch aims to update the IO statistics of active walsenders more frequently, rather than only when the walsender exits. This allows for more accurate and timely monitoring of walsender activity using pg_stat_io.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the location of the flush in WalSndLoop() is the optimal place for the changes.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAM527d8kG2qPKvbfJ=OYJkT7iRNd623Bk+m-a4ngm+nyHYsHog@mail.gmail.com","summary":"This patch adds a --no-policies option to pg_dump, pg_dumpall, and pg_restore to exclude policies from backups and restores, which is useful when policies need to be redefined or when moving data between environments with different security requirements.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"The tests added for the patch are failing in CI, and the reviewer is unsure how to fix them.","would_benefit_from_new_reviewer":"YES"}, {"id":"CABUevEyTMyXC6OvCWkj+rPnHrfi8_Rw_+DD_jzgFFNPqgf+Oig@mail.gmail.com","summary":"The proposal is to add the default version of an extension to the output of \\dx in psql, to make it easier to determine when an extension needs to be updated via ALTER EXTENSION UPDATE. The patch also includes a minor fix to use the alias 'd' consistently for pg_description.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The latest patches need review to ensure the changes are correct and the approach is reasonable.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKK5BkESSc69sp2TiTWHvvOHCUey0rDWXSrR9pinyRqyfamUYg@mail.gmail.com","summary":"The patch proposes adding an option to libpq that allows it to check all IP addresses associated with a hostname when attempting to establish a connection with a specific `target_session_attrs`, rather than stopping after the first successful connection to an address. This is intended to improve high availability setups using DNS.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The author needs to rebase the patch, write a real commit message, adjust tests, add documentation, and reconsider the naming and implementation of the new option. The discussion revolves around whether this is a bug fix or a new feature.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAO_rXXBS0NictfmXodASjxqKgFDtUj_J1xUL100oeGJ3Mt+K8w@mail.gmail.com","summary":"This patch introduces the -k/--link option to pg_combinebackup, allowing it to use hard links instead of copying files, potentially improving performance and reducing disk usage. It also includes a new test file to ensure hard links are created as expected.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch needs to pass CFBot tests, which were failing due to assumptions about segment size. The author has addressed this, but further review of the new test and the changes is needed.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKiP-K85C8uQbzXKWf5wHQPkuygGUGcufke713iHmYWOe9q2dA@mail.gmail.com","summary":"This patch adds support for logging TLS secrets to a file specified by a connection parameter (sslkeylogfile) in the frontend (psql). This allows tools like Wireshark to decrypt TLS traffic. The patch includes changes to handle file permissions, documentation, and tests.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"Several issues were raised in the latest review, including the placement of the key.txt file, documentation of the NSS format, error handling, the use of chmod, LibreSSL version compatibility, Windows-specific skips in test code, and test output to stderr/stdout.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAD68Dp3L6yW_nWs+MWBs6s8tKLRzXaQdQgVRm4byZe0L-hRD8g@mail.gmail.com","summary":"This patch adds missing tab completion for the ONLY option in the VACUUM and ANALYZE commands, and also adds auto-completion of starting parenthesis '(' for these and other commands.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Need review of the provided patch.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKFQuwbwNue2bDA4_SW2UZ-Yrj91FVre76SJXVsvBrJf2cteUQ@mail.gmail.com","summary":"This patch aims to improve the documentation of NULL values in PostgreSQL by adding a dedicated section explaining their behavior and handling throughout the system. The patch introduces a new section in the documentation, covering topics such as the definition of NULL, its behavior in comparisons and expressions, and its impact on various SQL constructs.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issues revolve around wording choices and specific examples in the documentation, particularly related to JSON NULL values and the presentation of examples.","would_benefit_from_new_reviewer":"YES"}, {"id":"CADE6Lvg=tW7pNNLT=2c0W6G9egm8fFmmSHgmtV16AbuSuqZExw@mail.gmail.com","summary":"The proposed patch introduces a new psql metacommand, \\dh, to provide a concise overview of high-level (root) relations, including tables and indexes, intended to help DBAs and developers quickly identify the core structure of a database, particularly in environments with extensive partitioning. The discussion is currently focused on finding a better name or approach (extending existing commands) for this functionality.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The key issue currently being discussed is finding a suitable name for the new metacommand or determining the best approach for implementing the desired functionality (e.g., extending existing commands like \\dP or \\dt).","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKFQuwaS6DtSde4TWpk133mfaQbgh8d+Pkk0kDN=6jf6qEWbvQ@mail.gmail.com","summary":"The proposal is to move the standalone backup section in the PostgreSQL documentation to a more logical location under file system backups and to mention the -X argument. The discussion has expanded to consider a more comprehensive reorganization of the backup documentation.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The current structure of the backup documentation is incoherent, and the proposed patch doesn't go far enough to address this.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKFQuwa=iY13UkH2K4-Srut9iaXBi2FkLzWRxbok+mdSMPEDuA@mail.gmail.com","summary":"The patch aims to improve the clarity, conciseness, and presentation of hostssl-related documentation in PostgreSQL, addressing verbosity and repetition identified in the existing documentation.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"The thread is awaiting feedback on the proposed documentation changes.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGECzQQoc+V94TrF-5cMikCMaf-uUnU52euwSCtQBeDYqXnXyA@mail.gmail.com","summary":"The proposal is to rename protocol extensions to protocol options (or some other term) throughout the PostgreSQL documentation and codebase to avoid confusion with PostgreSQL extensions. The latest suggestion is to stick with extension.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"The main issue is choosing the best terminology to describe protocol-level features or parameters, with various options being considered and debated.","would_benefit_from_new_reviewer":"NO"}, {"id":"54d16298-da71-48f1-96e0-8f011cf5c6ce@dalibo.com","summary":"The proposal aims to improve the documentation of standalone backups by moving the relevant section from 'Tips and Examples' to a more prominent location within the 'Backup and Restore' chapter, and clarifying its relationship to PITR.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The main issue is finding the most appropriate section and title to accurately reflect the nature of standalone hot backups and their relation to continuous archiving and PITR.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKZiRmwBcALLrDgCyEhHP1enUxtPMjyNM_d1A2Lng3_6Rf4Qfw@mail.gmail.com","summary":"The proposal is to add a note to the documentation for the hot_standby_feedback setting, recommending that primary and standby servers have synchronized clocks to avoid issues with backend_xmin propagation. The discussion has evolved to address clock jumps on the standby, not just clock skew between primary and standby.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"The main issue is to determine the best way to word the documentation to account for both clock skew between primary and standby servers, and clock jumps (forward or backward) on the standby server, and whether backpatching to older versions is appropriate.","would_benefit_from_new_reviewer":"NO"}, {"id":"00e6eb5f5c793b8ef722252c7a519c9a@oss.nttdata.com","summary":"The patch aims to improve the documentation regarding when ALTER TABLE ADD COLUMN causes a table rewrite, including cases beyond volatile defaults, such as adding an IDENTITY column or a column with a domain data type that has constraints.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CAHut+PtxXLJFhwJFvx+M=Ux8WGHU85XbT3nDqk-aAUS3E5ANCw@mail.gmail.com","summary":"The proposal aims to improve the consistency of capitalization of TOAST (The Oversized-Attribute Storage Technique) in PostgreSQL documentation, distinguishing the acronym from the common word toast. The scope of the patch has been reduced to focus on uncontroversial changes in the documentation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Whether to consistently uppercase TOAST in all instances (e.g., TOAST table) or reserve it for references to the underlying technique, and whether derived terms like TOASTed improve readability.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAHut+Pt_7GV8eHSW4XQsC6rF13TWrz-SrGeeiV71=SE14DC4Jg@mail.gmail.com","summary":"The proposal is to add a new Examples subsection to the 29.6. Generated Column Replication documentation page to clarify and illustrate how generated columns are replicated in PostgreSQL, including self-contained examples that users can easily copy and paste to experiment with the feature.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Whether or not the addition of examples will significantly improve understanding of the feature, given that the documentation already describes it, is the main point of discussion.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxFgAh1--EMwOjMuANe=VTmjkNaZjH+AzSe04-8ZCGiESA@mail.gmail.com","summary":"The proposal is to split the func.sgml file into 31 individual sgml files, one for each section, with a new file name pattern of func- as the prefix, stored in the doc/src/sgml/func directory. A python script and a patch are provided to accomplish this.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The reviewer burden may be the biggest barrier to going forward, potentially addressed by breaking up the changes into smaller commits.","would_benefit_from_new_reviewer":"YES"}, {"id":"bf110561-f774-4957-a890-bb6fab6804e0@dalibo.com","summary":"The proposal is to improve the documentation for pgstatindex, specifically the avg_leaf_density and leaf_fragmentation statistics, to give users a better understanding of their meaning and impact.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"The remaining question is how leaf fragmentation slows down performance, even on SSDs, and whether this needs further clarification in the documentation.","would_benefit_from_new_reviewer":"NO"}, {"id":"TYVPR01MB113306AB19264E89AD360A40EE4522@TYVPR01MB11330.jpnprd01.prod.outlook.com","summary":"The proposal is to improve the documentation for building PostgreSQL with meson on Windows, specifically detailing how to handle dependencies using pkgconf, vcpkg, and the -Dextra_include_dirs and -Dextra_lib_dirs options.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"4c5dee3a-8381-4e0f-b882-d1bd950e8972@dalibo.com","summary":"The patch clarifies the documentation for pgstatindex, specifically explaining the meaning of index fragmentation as reported by leaf_fragmentation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKFQuwY0SK6JdCci1VJX6xsztRXgGeVEY-grkENZx+3CZpyPcQ@mail.gmail.com","summary":"This patch improves the documentation for custom settings, placeholders, and administrative functions like set_config and current_setting, clarifying the behavior around NULL values and placeholder creation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Whether the documentation should state that current_setting() returns a non-null value, even though it can return NULL when the missing_ok parameter is passed. However, this issue appears to be resolved.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKFQuwYgYR3rWt6vFXw=ZWZ__bv7PqvdOnHujG+UyqE11f+3sg@mail.gmail.com","summary":"The patch adds an Outputs section to the COMMIT reference page, documenting that COMMIT can output COMMIT or ROLLBACK depending on whether the transaction aborted. It also incorporates this information into the main description of COMMIT and the transaction section of the tutorial.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CACbFw60UOk6fCC02KsyT3OfU9Dnuq5roYxdw2aFisiN_p1L0bg@mail.gmail.com","summary":"The patch corrects a documentation error regarding the aggressive vacuum threshold for multixact members storage, changing it from 2GB to approximately 10GB and clarifying the maximum storage size as 20GB. It also adjusts the related documentation text.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"71eef655-c192-453f-ac45-2772fec2cb04@gmail.com","summary":"This patch corrects inaccuracies in the documentation and comments related to the Free Space Map (FSM) for indexes, specifically regarding the meaning of values tracked for index pages and the values used to denote used vs. unused pages.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGECzQTpdujCEt2SH4DBwRLoDq4HJArGDaxJSsWX0G=tNnzaVA@mail.gmail.com","summary":"The proposal aims to provide more flexible control over backtrace generation in PostgreSQL logs, by introducing new GUCs to specify when backtraces should be included based on log level and function name, replacing the backtrace_on_internal_error GUC with a more general backtrace_mode.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current design requires setting multiple GUCs to achieve the previous behavior of backtrace_functions, and it is being debated whether log_backtrace_mode and backtrace_functions should be additive or subtractive.","would_benefit_from_new_reviewer":"YES"}, {"id":"ZiYjn0eVc7pxVY45@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch aims to prevent orphaned object dependencies by acquiring a lock on each referenced object during dependency recording. The latest version (v19) addresses concerns about the getObjectDescription() function and provides object OIDs in error details. A special case is made for RelationRelationId objects where a lock is acquired only if one doesn't already exist.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether the current locking strategy, particularly the special handling of RelationRelationId objects, is sufficient and doesn't introduce unnecessary locking.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKFQuwYfMV-2SdrP-umr5SVNSqTn378BUvHsebetp5=DhT494w@mail.gmail.com","summary":"The patch aims to improve the documentation for CREATE TABLE, addressing issues like the meaning of 'unlogged' in partitioned tables, clarifying 'persistence modes' (temporary and unlogged), shortening excessively long CREATE TABLE syntax lines, and extracting column_storage syntax into a named reference.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"The best way to describe the 'persistence modes' of tables (default, temporary, and unlogged) in the documentation, specifically whether 'reliability' is the correct term.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEZATCXpGyfjXCirFk9au+FvM0y2Ah+2-0WSJx7MO368ysNUPA@mail.gmail.com","summary":"This patch proposes adding the gamma() and lgamma() functions to PostgreSQL, which are useful for statistical analysis and combinatorial computations. The latest version (v4) aims to conform to the POSIX specification for these functions, particularly regarding error handling and special values.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The current implementation of gamma() returns an error for inputs very close to 0 but returns Infinity for an input of 0, raising a question of consistency. Also, there are concerns raised around platform-specific behavior of the underlying C library functions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJ7c6TPtOp6+kFX5QX3fH1SVr7v65uHr-7yEJ=GMGQi5uhGtcA@mail.gmail.com","summary":"This patch proposes to add casts between bytea and integer types (int2, int4, int8). The conversion uses big-endian (network order) and two's complement representation. The original proposal to add get_bytes() and set_bytes() functions has been dropped due to lack of support.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch appears to be feature-complete and incorporates suggestions from previous reviews. The outstanding issue is whether the current implementation and documentation are satisfactory.","would_benefit_from_new_reviewer":"YES"}, {"id":"CADrsxdYj2SMquRgf=DS9d_qLMW_gnF7PxzRp0VKTM7OfBsPpVg@mail.gmail.com","summary":"The proposal is to disallow empty values for the column_name, schema_name, and table_name options in CREATE/ALTER FOREIGN TABLE statements, specifically within the postgres_fdw validator. This prevents errors when the remote query attempts to use an empty column name, and promotes consistency with SQL syntax restrictions.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAEze2Wg-+EV4HdbQiut7X3KQd39xwmrpV4CeCmoJFFjH8cGdhw@mail.gmail.com","summary":"The thread discusses two main proposals: 1) Expanding the applicability of the existing min/max aggregate optimization to cases with ORDER BY clauses when the ordering is compatible with the aggregate's sort operator. 2) Introducing aggregate prosupport functions to allow more flexible optimization of aggregates, such as unconditionally removing ORDER BY clauses from min/max aggregates where the order doesn't affect the result, or changing count(non-nullable) to count(*).","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The latest patch introducing prosupport helpers for aggregates is failing CI tests, with a potential deadlock issue caused by the introduction of a new index in the regression tests.","would_benefit_from_new_reviewer":"NO"}, {"id":"vximpev4vsyqvzvjn3qxb2apltuaxw7j4uxc4lggyjh3ejjbzx@66clgfgm6vlk","summary":"The proposal introduces two new system views: pg_system_versions, to display core version, compiler, LLVM, and other component versions, and pg_system_libraries, to show linked shared objects. The main goal is to facilitate bug reporting by providing easy access to version information.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The thread is discussing which version information should be included in the pg_system_versions view and how to handle potential duplicate entries when registering components. Also, there are some documentation build issues.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAHewXN=8aW4hd_W71F7Ua4+_w0=bppuvvTEBFBF6G0NuSXLwUw@mail.gmail.com","summary":"The patch proposes removing an unnecessary check in the semijoin_target_ok() function within postgres_fdw.c. The check `!bms_is_member(var->varno, outerrel->relids)` is considered redundant because if `bms_is_member(var->varno, innerrel->relids)` is true, then the former check must also be true.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+E0NR4S+NC6+QHyY_vUuQZMzLhKqczMx-jJVqtjAxF6+=JwAA@mail.gmail.com","summary":"This patch introduces a new parameter, max_log_size, to truncate logged queries based on byte size, providing a safeguard against excessive log file growth due to large queries or blobs. The latest version includes documentation, fixes for compilation warnings, and addresses issues with special characters.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAN55FZ0h_YoSqqutxV6DES1RW8ig6wcA8CR9rJk358YRMxZFmw@mail.gmail.com","summary":"This patch adds three functions to pg_buffercache: pg_buffercache_evict_all(), pg_buffercache_mark_dirty(), and pg_buffercache_mark_dirty_all(). These functions allow for bulk eviction and marking of buffers as dirty, primarily for benchmarking and testing purposes. Andres suggested a version of pg_buffercache_evict_all() that evicts a specific relation and raised concerns about potentially problematic behavior of pg_buffercache_mark_dirty() due to potentially dirtying buffers even while its relation is locked exclusively.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue is a potential race condition in pg_buffercache_mark_dirty(), where it can pin and dirty a buffer even while its relation is locked exclusively, which some code might not expect.","would_benefit_from_new_reviewer":"NO"}, {"id":"4f0cea802476d23c6e799512ffd17aff@postgrespro.ru","summary":"The patch allows postgres_fdw to deparse ArrayCoerceExpr, enabling pushdown of expressions like 'field = ANY($1)' when selecting data from foreign tables with varchar(N) fields in prepared statements using generic plans. This addresses an issue where type casts from varchar[] to text[] were not being properly handled.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"The patch changes cast behavior when local and foreign types are mismatched, and it's unclear if the committer will approve of this change.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAFY6G8eLyz7+sccegZYFj=5tAUR-GZ9uEq4Ch5gvwKqUwb_hCA@mail.gmail.com","summary":"This patch replaces ReadBufferExtended usage with the read stream API in the amcheck extension, with the goal of enabling future benefits from the AIO project.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"Whether READ_STREAM_SEQUENTIAL should always be set or only when skip_option == SKIP_PAGES_NONE.","would_benefit_from_new_reviewer":"NO"}, {"id":"dd4d1b59-d0fe-49d5-b28f-1e463b68fa32@gmail.com","summary":"This proposal aims to allow extension maintainers to embed module information, such as name and version, into the binary file using a new PG_MODULE_MAGIC_EXT macro. This information would then be accessible via a new system SRF function, enabling easier identification and version tracking for modules, especially those not installed via CREATE EXTENSION.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The latest discussion points out the lack of documentation, the correct naming convention for the function, and whether the in-core libraries should be switched to use PG_MODULE_MAGIC_EXT. Also, it questions whether we should include an analogue to pg_text_semver.","would_benefit_from_new_reviewer":"NO"}, {"id":"93e7f77bf4e1ef4640e4ee733f9e2a78@postgrespro.ru","summary":"The patch aims to display the plperl version in the meson setup summary screen, which currently only shows 'YES' or 'NO'. The latest version of the patch attempts to use perl's 'version' instead of 'api_versionstring' to align with the configure script.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The discussion centers on whether to use 'version' or 'api_versionstring' from perl, and how to potentially add color to the output without being too hacky.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+14426e8dbmMjGLu8jO8CQAb9-FKiM-CQhvQHUB=3OnJwWpzQ@mail.gmail.com","summary":"This thread proposes integrating Coccinelle, a pattern matching and code transformation tool, into PostgreSQL development to identify bugs, enforce APIs, and improve coding patterns. The initial patches include a coccicheck.py script, build system integration, and example semantic patches for common problems like incorrect palloc usage and converting palloc to palloc_array/palloc_object.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main question is whether the conversion of palloc to palloc_array/palloc_object should be applied across stable branches or only to HEAD, and how conservative the automated replacements should be.","would_benefit_from_new_reviewer":"YES"}, {"id":"07d5fd6a-71f1-4ce8-8602-4cc6883f4bd1@oss.nttdata.com","summary":"The patch optimizes FastPathTransferRelationLocks() by avoiding recalculating the fast-path group on each loop iteration, skipping backends with no fast-path locks, and applying similar optimizations to GetLockConflicts().","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether clearing databaseid on backend exit would be beneficial, although the author seems hesitant.","would_benefit_from_new_reviewer":"YES"}, {"id":"146349e4-4687-4321-91af-f235572490a8@eisentraut.org","summary":"The proposal is to update the Unicode data to version 16.0.0. Concerns were raised about the potential need to reindex indexes using the builtin collation provider after the update. A pg_upgrade check is proposed to mitigate potential problems.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether updating Unicode data will cause issues with existing indexes, and how to best mitigate those issues during upgrades.","would_benefit_from_new_reviewer":"YES"}, {"id":"603c8f070905281830g2e5419c4xad2946d149e21f9d@mail.gmail.com","summary":"The patch aims to improve the readability of EXPLAIN ANALYZE output by displaying fractional digits for row counts when the node is executed multiple times (nloops > 1), providing more accurate information when the average number of rows is less than one. The consensus is to display two fractional digits whenever nloops > 1.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CB11ADBC-0C3F-4FE0-A678-666EE80CBB07@amazon.com","summary":"This patch series aims to fix an issue where pg_trgm indexes can return incorrect results when replicating between systems with different default char signedness (e.g., x86 and ARM). It achieves this by adding a default_char_signedness field to the control file, which is initialized during initdb and can be modified by pg_resetwal for testing or by pg_upgrade when upgrading from older versions. The pg_trgm extension then uses this setting to ensure consistent behavior across platforms.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"20250121122937.edfdba2b3dfa3dba330a6b66@sraoss.co.jp","summary":"The proposal is to add a function, get_extension_version, that allows an extension to determine its own version, and to allow version specifications in the requires list of extension control files. The primary motivation is to avoid errors or segfaults during extension updates when there's a mismatch between the installed binary and the SQL objects.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The main issue is that the use case for the get_extension_version function isn't well-justified, and the author hasn't provided a convincing argument for why it's needed, especially given existing backwards compatibility mechanisms. Additionally, the initial patch failed to compile.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAGECzQQh6VSy3KG4pN1d=h9J=D1rStFCMR+t7yh_Kwj-g87aLQ@mail.gmail.com","summary":"The patchset aims to increase the soft open file limit (RLIMIT_NOFILE) to the hard limit on startup for both pgbench and the postmaster process when necessary. For the postmaster, the intention is to adjust RLIMIT_NOFILE dynamically based on max_files_per_process, and the current number of open files.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The remaining open issues involve refactoring system call wrappers, addressing potential issues when the soft limit is lowered after files have been opened, ensuring correct behavior when calling set_max_fds() multiple times, and dealing with interactions between RLIMIT_NOFILE changes and subprocesses.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAPpHfdsjtZLVzxjGT8rJHCYbM0D5dwkO+BBjcirozJ6nYbOW8Q@mail.gmail.com","summary":"This patch implements a new utility command `WAIT FOR LSN 'target_lsn' [, TIMEOUT 'timeout'][, THROW 'throw']` to allow waiting for a given LSN to replay on a standby server, providing a mechanism for read-your-writes consistency. The command avoids holding snapshots that could block WAL replay and introduces minimal changes to the parser.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether the chosen syntax is suitable for potential future extensions of the `WAIT` command to handle other wait conditions, such as waiting for a specific transaction ID to be replayed.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+q6zcWtUbT_Sxj0V6HY6EZ89uv5wuG5aefpe_9n0Jr3VwntFg@mail.gmail.com","summary":"The proposed patch aims to prevent pg_stat_statements from creating separate entries for queries that only differ in the number of constants within an IN clause or array, by providing a GUC to squash or merge the values in these lists. The latest version of the patch series moves the GUC out of pg_stat_statements and handles implicit type conversions but doesn't handle prepared statements or all cases of FuncExpr.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"There's ongoing discussion about whether to include support for prepared statements in the first version of the patch, and how to handle FuncExpr and datatype conversions without introducing too much complexity or regressions in normalized query output. There is also some debate about how this interacts with cases where query IDs are used by other extensions.","would_benefit_from_new_reviewer":"NO"}, {"id":"pxr5b3z7jmkpenssra5zroxi7qzzp6eswuggokw64axmdixpnk@zbwxuq7gbbcw","summary":"The proposal aims to replace the existing pg_attribute_noreturn macro with a more standard-compliant and portable approach, utilizing _Noreturn from C11 when available, __attribute__((noreturn)) for GCC-compatible compilers, and __declspec((noreturn)) for MSVC. It also includes improvements to pg_nodiscard support.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The handling of noreturn for function pointers presents a challenge due to inconsistencies in how different compilers treat __attribute__((noreturn)) and _Noreturn, leading to potential incompatibilities.","would_benefit_from_new_reviewer":"YES"}, {"id":"b8b8502915e50f44deb111bc0b43a99e2733e117.camel@cybertec.at","summary":"The proposal is to change the default value of the `log_lock_waits` setting to `on`. This would cause the server to log any lock wait that exceeds the `deadlock_timeout` setting. The main motivation is to provide better out-of-the-box diagnostics for performance problems related to lock contention.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":1,"problem":"The main concern is that enabling `log_lock_waits` by default might increase log volume and create noise in the logs, although there's a consensus that lock waits are indicative of problems.","would_benefit_from_new_reviewer":"NO"}, {"id":"b4220d15-2e21-0e98-921b-b9892543cc93@dalibo.com","summary":"This patch set introduces a new GUC, `log_parallel_workers`, to control logging of parallel worker usage in queries and utility commands (VACUUM, CREATE INDEX, REINDEX). The GUC has options for logging all parallel worker activity or only when there is a shortage of workers.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"Whether to include logging of parallel workers for utility statements, given that some of these commands already provide similar information via VERBOSE or DEBUG1.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAOYmi+=60deN20WDyCoHCiecgivJxr=98s7s7-C8SkXwrCfHXg@mail.gmail.com","summary":"The purpose of the proposed patch is to improve the visibility of slow or hanging authentication processes in pg_stat_activity. The patch introduces a 'starting' state for backends during authentication, adds wait events for external authentication calls (PAM, Kerberos, LDAP, SSPI), and breaks apart the pgstat_bestart function to better track backend state during the connection process.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The key issue currently being discussed is whether it's safe to expose SSL/GSS details (specifically certificate subject data) in pg_stat_activity before client authentication is complete, and whether the pgstat_bestart_security() function should be re-entrant.","would_benefit_from_new_reviewer":"NO"}, {"id":"ZlGYokUIlERemvpB@ip-10-97-1-34.eu-west-3.compute.internal","summary":"The proposed patch aims to add relfilenode statistics to track dirtied blocks, written blocks, etc., on a per-relation basis. The primary motivation is to enable write counters for relations, as the relation OID isn't available during buffer writeout. The current approach involves adding a PGSTAT_KIND_RELFILENODE and a relfile attribute to PgStat_HashKey.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The main issue is determining the best way to handle relation rewrites (e.g., CLUSTER, VACUUM FULL) and whether to preserve stats across these rewrites, and how to design the user experience around these new stats (should the user even be aware of the underlying relfilenode stats).","would_benefit_from_new_reviewer":"YES"}, {"id":"45AC9B0A-2B45-40EE-B08F-BDCF5739D1E1@yandex-team.ru","summary":"This patch series aims to add amcheck verification support for GiST and GIN indexes, similar to the existing support for B-tree indexes. The latest version includes fixes and improvements based on review feedback, including a memory leak fix and a fix for incorrect maxoff calculation for GIN indexes, plus a reproducible test case for a GIN index tuple order error. The GiST part is also supposed to include support to pg_amcheck.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The gin_index_check() is still reported to have a tuple order bug in the code by Mark Dilger. This may either be an actual bug or something wrong with how the tests are interpreting correct tuple order.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAH2L28v8mc9HDt8QoSJ8TRmKau_8FM_HKS41NeO9-6ZAkuZKXw@mail.gmail.com","summary":"This patch introduces a new function, pg_get_process_memory_contexts(), to expose memory context statistics for any PostgreSQL backend or auxiliary process. It uses dynamic shared memory (DSA) for inter-process communication and handles concurrent requests, displaying older statistics if the latest data cannot be retrieved within a reasonable time. The function is restricted to superusers and users with pg_read_all_stats privileges.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The latest patch is causing errors with 'can't attach the same segment more than once', indicating a synchronization issue with the DSA. Also, it's not clear how many memory context entries can fit into the shared memory region.","would_benefit_from_new_reviewer":"NO"}, {"id":"d68c3ae31672664876b22d2dcbb526d2@postgrespro.ru","summary":"This patch adds the pg_log_query_plan function, which allows superusers to log the query plan of a specified backend process to the server log. The latest version attempts to address re-entrancy issues and avoid deadlocks by wrapping all plan nodes to delay the EXPLAIN code execution and checking for held locks, though these approaches have faced criticism. Recent discussions focus on finding a safer and more robust approach, with some suggestions including moving more auto_explain code into core or using a CHECK_FOR_INTERRUPTS flag.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The primary outstanding issue is ensuring the safety and stability of the patch by avoiding re-entrancy problems and deadlocks when EXPLAIN code is executed within CHECK_FOR_INTERRUPTS, with ongoing debate about the best approach to achieve this.","would_benefit_from_new_reviewer":"YES"}, {"id":"411280a186cc26ef7034e0f2dfe54131@oss.nttdata.com","summary":"The proposal is to add more detailed logging information when a 'FOR UPDATE NOWAIT' lock acquisition fails, including information about lock holders and waiters. The logging is controlled by a new GUC parameter, log_lock_failure. The current focus is on row-level locks, with potential expansion to other lock types later.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The current discussion revolves around how to best implement the logging functionality, particularly in relation to cases where dontWait is true, and how to avoid unwanted logging from SKIP LOCKED. The author is currently evaluating the suggestion from the reviewer to add a 'logLockFailure' argument to LockAcquireExtended().","would_benefit_from_new_reviewer":"NO"}, {"id":"bee34abe-fe87-49b3-8523-8ae19e641ccf@yandex.ru","summary":"This patch set aims to provide more detailed, cumulative statistics about vacuum operations, including resource consumption for tables, indexes, and databases. The statistics are intended to help database administrators tune vacuum settings and identify potential bottlenecks or inefficiencies. A GUC, `track_vacuum_statistics`, controls whether extended statistics for relations are collected or not, while database-level statistics are always gathered.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The primary remaining issue revolves around the size of the statistics being added and how to make the `track_vacuum_statistics` GUC effectively reduce memory consumption when disabled. It has been suggested that vacuum statistics be moved to a separate hash table.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAH2-WzkRqvaqR2CTNqTZP0z6FuL4-3ED6eQB0yx38XBNj1v-4Q@mail.gmail.com","summary":"This patch adds an Index Searches: N line to EXPLAIN ANALYZE output for index scans, displaying the total number of primitive index searches performed. This instrumentation is particularly useful for understanding the behavior of skip scans and SAOP scans, and also for ensuring that users have visibility into how the pg_stat_all_indexes.idx_scan counter is incremented.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue is where to store the state that tracks the number of index searches (IndexScanDesc, BTScanOpaque, or a global counter).","would_benefit_from_new_reviewer":"YES"}, {"id":"Z3zqc4o09dM/Ezyz@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch proposes adding per-backend WAL statistics, accessible via a new function `pg_stat_get_backend_wal()`. The proposal has evolved through several versions based on reviewer feedback, and has recently been simplified following related work on I/O statistics and WAL statistics. The current plan is to keep only `wal_records`, `wal_fpi`, `wal_bytes`, and `wal_buffers_full` in the new function.","status":"WAITING_FOR_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue is the removal of wal_write, wal_sync, and related time columns from pg_stat_wal. The author has split this discussion into a separate thread and will update this patch series based on the conclusion of that discussion.","would_benefit_from_new_reviewer":"NO"}, {"id":"fe99e0ca-e564-480e-b865-5f0cee30bc60@tantorlabs.com","summary":"The patch aims to reduce spinlock contention in pg_stat_statements by introducing a mechanism to avoid tracking some queries. The latest proposal replaces the sample rate with a threshold based on query execution time: queries exceeding the threshold are tracked, while others are ignored.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"Sami Imseih argues that sample rate is a better fit than execution time threshold, as the most frequent queries (which cause spinlock contention) are still captured with sampling, while execution time may not correlate well with queries of interest, and long queries are already less frequent. It is unclear whether Ilia will revert back to the previous approach or address the concern.","would_benefit_from_new_reviewer":"NO"}, {"id":"cb103623-8ee6-4ba5-a2c9-f32e3a4933fa@dunslane.net","summary":"This thread discusses a patch to add non-text (archive) format support to pg_dumpall, allowing for dumping and restoring the entire database cluster in a more efficient manner. The patch introduces new options to pg_dumpall (-F) and pg_restore (-g, --exclude-database) and modifies the dump and restore procedures to handle multiple databases.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Several minor code style, documentation, and corner case issues are being discussed, including the use of pg_fatal vs pg_log_error, handling of sync option, and the interaction of various pg_restore options. The largest remaining issue is how to properly implement --exclude-database when pg_restore has no database connection.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAKRu_b_smAHK0ZjrnL5GRxnAVWujEXQWpLXYzGbmpcZd3nLYw@mail.gmail.com","summary":"This patch introduces logging of durations for connection establishment, including authentication and forking, to aid in debugging slow connection times. It proposes to log the total connection time as well as breakdown into fork and authentication duration.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Should TimestampTz or instr_time be used for measuring durations, considering potential inaccuracies due to time changes? Also, should the timestamp be recorded at the beginning of SubPostmasterMain?","would_benefit_from_new_reviewer":"YES"}, {"id":"192f7185defa370d083e3a237727b066@postgrespro.ru","summary":"The patch excludes the mutex field from the pgssEntry structure when writing and reading the pg_stat_statements dump file. This aims to improve the code's correctness by avoiding the unnecessary serialization of the mutex.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The primary question is whether the benefit of code correctness justifies the change, given the minimal performance or space savings.","would_benefit_from_new_reviewer":"YES"}, {"id":"c20f6340eb26f3b736abc59471bfada8@oss.nttdata.com","summary":"The proposal is to add storage I/O statistics (reads and writes) to the EXPLAIN ANALYZE output, accessible via the BUFFERS option, providing insights into disk I/O activity beyond what shared buffer statistics offer. The patch uses ru_inblock and ru_oublock from getrusage() to measure storage I/O.","status":"LACKS_SUPPORT","activity":"ACTIVE","complexity":3,"problem":"The main issue is incompatibility with asynchronous I/O (AIO), particularly worker-based AIO, which Andres Freund hopes will be the default mechanism soon. He argues that the patch provides misleading stats when AIO is used, thus hindering the adoption of AIO.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAP53Pkyow59ajFMHGpmb1BK9WHDypaWtUsS_5DoYUEfsa_Hktg@mail.gmail.com","summary":"This patchset introduces a facility to optionally track Plan IDs based on hashing plan nodes during the treewalk in setrefs.c, controlled by the 'compute_plan_id' GUC. It also includes a pg_stat_plans contrib extension for illustration, which records the first plan text with EXPLAIN (COSTS OFF) and tracks plan statistics.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The naming of the jumbling/fingerprinting process and related node attributes is under discussion, particularly as the code is being generalized beyond just queries.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKZiRmxh6KWo0aqRqvmcoaX2jUxZYb4kGp3N=q1w+DiH-696Xw@mail.gmail.com","summary":"This patch proposes to add basic NUMA observability to PostgreSQL by extending pg_buffercache to show the NUMA zone ID for each buffer. The discussion is focused on finding an accurate and efficient way to determine the NUMA node location of pages in the buffer cache, considering issues with syscall overhead and potential interference with kernel memory management.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The current approach using numa_move_pages/move_pages may not be accurate across different backends due to page migration, and using get_mempolicy on every page is too expensive. The key question is whether to sample the buffer cache instead of checking every page, and if so, how to best implement the sampling.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAA5RZ0vyWd4r35uUBUmhngv8XqeiJUkJDDKkLf5LCoWxv-t_pw@mail.gmail.com","summary":"This proposal aims to allow extensions to set a plan identifier (planId) that can be exposed in pg_stat_activity (via pg_stat_get_activity) to help users identify long-running or high-load plans and correlate them with plan text provided by the extension. This involves adding a planId field to PgBackendStatus and PlannedStmt, and providing APIs for extensions to set the planId.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the provided APIs and the mechanism for ensuring only one extension sets the planId are appropriate.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAEP4nAx-Mp52k=tyAEJrD5SS4nOJm60uz4J3KgtKfTt2qPRyzA@mail.gmail.com","summary":"The proposal is to add a new function, pg_accept_connections_start_time(), which returns the time when the database became ready to accept connections, providing a more accurate measure of uptime than pg_postmaster_start_time(). There is discussion about the naming of the function and whether to extend pg_ctl status or provide a SQL function to parse postmaster.pid.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"The main issues are the naming of the function and whether to extend pg_ctl status or provide a SQL function to parse postmaster.pid to expose the relevant data.","would_benefit_from_new_reviewer":"NO"}, {"id":"02db8cd8e1f527a8b999b94a4bee3165@oss.nttdata.com","summary":"The proposal is to change the log level of a specific log message related to hot standby waiting for a non-overflowed snapshot from DEBUG1 to NOTICE, to make it easier for users to diagnose potential issues with hot standby becoming inaccessible after a restart due to subtransaction overflow.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"cf85f46f-b02f-05b2-5248-5000b894ebab@enterprisedb.com","summary":"This patch series aims to improve performance for index scans by implementing a batched heap prefetching mechanism, and integrates it with the read stream API. It introduces a new AM callback (amgettuplebatch) for fetching TIDs in batches.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The key outstanding issues involve: Kill prior tuple, and the balance of responsibilities between indexam.c and index AMs regarding resources and buffer pins.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJVSvF6s1LgXF6KB2Cz68sHzk+v+O_vmwEkaon=H8O9VcOr-tQ@mail.gmail.com","summary":"This proposal introduces a 'query_work_mem' GUC, aiming to improve memory management for OLAP queries by distributing a total query work_mem limit to individual SQL operators, allowing them to spill to disk rather than crashing the query. The current implementation involves storing work_mem estimates and limits in plan nodes and providing a hook for extensions to customize memory allocation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main concern is the scope of the patch set and the overall complexity of the changes, specifically whether all the proposed changes are necessary for the initial goal of storing work_mem in each Plan node and using that to enforce the memory limit.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJ2pMkZNCgoUKSE+_5LthD+KbXKvq6h2hQN8Esxpxd+cxmgomg@mail.gmail.com","summary":"This thread discusses a patch to reduce planning time for queries on tables with many partitions. The latest version (v32) focuses on optimizing the search for EquivalenceMembers and RestrictInfos by avoiding child members in EquivalenceClass, using an iterator mechanism and maintaining indexes for RestrictInfos. The patch aims to balance planning time with memory usage, with ongoing efforts to improve code maintainability and adapt to recent changes in the Postgres code base.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current implementation, while improving planning time, has increased memory consumption during planning and requires ongoing refactoring to reduce code redundancy.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAAaqYe8Bo4bf_i6qKj8KBsmHMYXhe3Xt6vOe3OBQnOaf3_XBWg@mail.gmail.com","summary":"This patch series aims to enhance the predtest module to understand boolean values and IS <boolean> expressions, which will allow the query planner to better utilize partial indexes in cases where boolean predicates are involved. The latest iteration refactors the refutation logic to avoid expensive double recursion.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"Tom Lane is still not happy with the logic in predicate_refuted_by_recurse, even after the author attempted to address his concerns by modifying the recursion strategy. The author has provided an updated patch reflecting these changes, but review is still needed.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAExHW5s=bCLMMq8n_bN6iU+Pjau0DS3z_6Dn6iLE69ESmsPMJQ@mail.gmail.com","summary":"This patchset aims to reduce memory consumption and improve planning time for queries involving partition-wise joins by avoiding repeated translations of RestrictInfo nodes and by using a hash table to store derived clauses. It involves several patches that introduce a hash table to store and retrieve child RestrictInfos, compact PlannerInfo to maintain its size, use the RestrictInfo hash table for storing Equivalence Class members, and avoid translating RestrictInfo repeatedly.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"While the patchset improves planning time for queries with a high number of partitions and joins, it introduces a regression in planning time for queries with a lower number of partitions and joins, and the cause of this regression is still being investigated.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAN55FZ3n8Gd+hajbL=5UkGzu_aHGRqnn+xktXq2fuds=1AOR6Q@mail.gmail.com","summary":"This patch proposes using read streams in autoprewarm to improve performance. The patch also counts the number of free buffers at the start of autoprewarm to avoid unnecessary I/Os.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CANtu0oiLc-+7h9zfzOVy2cv2UuYk_5MUReVLnVbOay6OgD_KGg@mail.gmail.com","summary":"This patch aims to improve CREATE/REINDEX CONCURRENTLY performance by enabling the xmin horizon to propagate more freely during concurrent index builds, and by building concurrent indexes with a single heap scan using a new Short-Term Index Replacement (STIR) access method as an auxiliary index. Snapshots are reset regularly to minimize the impact on vacuum.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"The patch set is large and complex, making it difficult to review. The author is waiting for feedback and further testing, including more varied benchmark scenarios.","would_benefit_from_new_reviewer":"YES"}, {"id":"CADkLM=cB0rF3p_FuWRTMSV0983ihTRpsH+OCpNyiqE7Wk0vUWA@mail.gmail.com","summary":"This thread discusses a patchset that introduces functions to import and export PostgreSQL statistics, enabling faster upgrades and planner testing. The latest iteration focuses on pg_dump integration, specifically handling different object types and implementing logic to skip or load statistics based on command-line flags. The aim is to provide better default behavior for users upgrading to PG 18 while minimizing surprises and disruptions to existing workflows. The patch has gone through many rounds of iteration and code review.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The current discussion revolves around the optimal way to handle --analyze-in-stages in vacuumdb post upgrade when imported stats are available, trading off between a clean API and potential surprise for existing users; additionally there is the question of whether to support pg_upgrade and/or pg_dump's interactions for extended statistics.","would_benefit_from_new_reviewer":"NO"}, {"id":"415721CE-7D2E-4B74-B5D9-1950083BA03E@yesql.se","summary":"The patchset introduces special-case executor expression steps for common combinations to improve performance and simplify JIT generated code. It includes specific optimizations for strict functions with 1 or 2 arguments and replaces EEOP_DONE with EEOP_DONE_RETURN and EEOP_DONE_NO_RETURN to optimize steps that only need side effects. The patchset has been split into two commits for better commit history readability.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the latest rebased version (v4) is ready for commit, or if there are any further objections.","would_benefit_from_new_reviewer":"YES"}, {"id":"6ab4003f-a8b8-4d75-a67f-f25ad98582dc@enterprisedb.com","summary":"This thread discusses a patch to enable parallel CREATE INDEX for GIN indexes, including optimizations for merging TID lists, compressing data, and handling wraparound issues. The latest version incorporates feedback, fixes bugs, and includes performance evaluations.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"While the primary patches seem ready, the proposed optimization to use a single tuplesort needs more exploration to understand its mixed performance impact. Also need confirmation to know if we are splitting the memory correctly.","would_benefit_from_new_reviewer":"NO"}, {"id":"52257607-57f6-850d-399a-ec33a654457b@postgrespro.ru","summary":"The proposed patch aims to improve the cost estimation of Hash Join when multiple join clauses are present, which currently uses a conservative approach that can lead to suboptimal plan selection (choosing Merge Join over Hash Join). The latest version of the patch employs extended statistics to estimate the HashJoin bucket size more accurately.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The conservatism in the original cost estimation is being questioned, specifically whether to calculate the minimum or maximum bucket size among clauses, and the need for regression tests.","would_benefit_from_new_reviewer":"YES"}, {"id":"uvrtrknj4kdytuboidbhwclo4gxhswwcpgadptsjvjqcluzmah@brqs62irg4dt","summary":"This patch series introduces asynchronous I/O (AIO) to Postgres, aiming to improve performance, especially in I/O-bound workloads. The latest version (v2.4) includes batch mode for IO submission, addresses error handling, and incorporates feedback on naming and code structure. It also integrates improvements to read_stream.c and includes a tap test suite.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"There is no clear cut way to reliably trigger a warning in transaction callbacks if an AIO batch has been started but not ended before transaction termination; finding the appropriate balance between improving IO performance and managing resource consumption.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAH2-Wzmn1YsLzOGgjAQZdn1STSG_y8qP__vggTaPAYXJP+G4bw@mail.gmail.com","summary":"This thread discusses a patch that adds skip scan functionality to nbtree indexes, allowing for more efficient index scans when leading columns are omitted from the query predicate. The patch aims to improve performance, particularly in data warehousing use cases, by treating composite indexes as a series of subindexes. The latest version focuses on minimizing regressions in less favorable cases and includes fixes for issues related to parallel index scans and corner cases.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The primary outstanding issue is balancing performance improvements in favorable cases with avoiding regressions in less favorable cases. The author is currently working on refining the skipskip optimization to manage the CPU overhead of maintaining skip arrays and is seeking feedback on a new approach.","would_benefit_from_new_reviewer":"YES"}, {"id":"437ccbcf-8f80-2919-411d-a3af88becf6c@cybertec.at","summary":"This patch adds sort support for range types and btree_gist indexes, which significantly improves index creation speed and can improve index quality. The latest version has addressed concerns about memory leaks and includes a fix for cidr sortsupport.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAKRu_aj-P7YyBz_cPNwztz6ohP+vWis=iz3YcomkB3NpYA--w@mail.gmail.com","summary":"This patch aims to trigger autovacuums more proactively on insert-heavy tables by considering only the unfrozen portion of the table when calculating the vacuum insert threshold. It introduces a new field, relallfrozen, to pg_class to estimate the unfrozen percentage of the table, aiming to reduce IO overhead and improve performance by vacuuming pages before they are evicted from shared buffers, and also to reduce the number of anti-wraparound vacuums.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether relallfrozen should be treated like relallvisible for the statistics import/export work and whether the cap on relallfrozen during vacuum/analyze/create index updates is appropriate, or if an assert is better.","would_benefit_from_new_reviewer":"YES"}, {"id":"0184212d-1248-4f1f-a42d-f5cb1c1976d2@tantorlabs.com","summary":"The proposed patch aims to improve performance by replacing `IN VALUES` constructs with `ANY` expressions in WHERE clauses. This involves transforming the `VALUES` list into an array, which can then be used with `ANY`. Recent updates include addressing type coercion issues and refactoring code to avoid duplication.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The latest patch series has been submitted for review, addressing code duplication and type coercion. The outstanding question is whether the approach to finding a suitable operator and type for the left expression, and coercing the left expression to a suitable type, is correct and complete.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAD21AoAEfCNv-GgaDheDJ+s-p_Lv1H24AiJeNoPGCmZNSwL1YA@mail.gmail.com","summary":"The proposal aims to improve vacuum performance by enabling parallel heap vacuum, allowing multiple workers to process a single heap table concurrently. The latest patch focuses on parallelizing the second pass over the heap, with preliminary changes to the parallel vacuum infrastructure. The author is working to integrate this with the existing eager vacuum scan feature.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issue is how to best integrate parallel heap vacuum with the eager vacuum scan, and the author is now focusing on parallelizing the second pass of vacuum.","would_benefit_from_new_reviewer":"YES"}, {"id":"DBD427E0-7E57-41D3-AEE1-7DFFA3CAB4EE@yandex-team.ru","summary":"This patchset aims to improve the performance of index vacuuming in PostgreSQL by using the read_stream API for B-tree, GiST, and SP-GiST indexes. The primary goal is to prepare for potential future performance gains with DIRECT_IO.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":4,"problem":"The patch requires the author to consider reviewer feedback about setting autovacuum off and adding tap testing to the GiST and SP-GiST vacuum patches, as well as more general concerns about interactions between the buffer access strategy and larger reads, especially WAL syncs.","would_benefit_from_new_reviewer":"NO"}, {"id":"8216639.NyiUUSuA9g@aivenlaptop","summary":"The proposal aims to improve the performance of SQL functions by utilizing the plancache.c machinery, allowing them to use custom plans and avoid generic plans, particularly benefiting queries over partitioned tables. The latest iteration implements a simplified version of plpgsql's plan cache for SQL functions, addressing issues related to plan revalidation and target list matching, and includes fixes for identified performance regressions and potential core dumps during revalidation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The key issue currently being discussed is how to handle SQL functions whose query trees are modified between rewrite and planning, particularly concerning target list matching and potential data type mismatches during revalidation, and how to ensure correct plan invalidation and revalidation behavior in various scenarios.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAN-LCVPxnWB39CUBTgOQ9O7Dd8DrA_tpT1EY3LNVnUuvAX1NjA@mail.gmail.com","summary":"This patch modifies the path cost calculation for Append nodes to consider fractional path costs, potentially leading to better plan choices when a LIMIT clause is present. It aims to improve performance, particularly in scenarios involving partitions and foreign data wrappers.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether to use root->tuple_fraction directly in add_paths_to_append_rel, given that it may not perfectly reflect the tuple fraction at the RelOptInfo level. Also, the patch author is waiting for other reviewers to weigh in.","would_benefit_from_new_reviewer":"YES"}, {"id":"dc6a29eb78064f5a3305049d8cd453c5@postgrespro.ru","summary":"This patch enables pushing joins with function RTEs to PostgreSQL data sources, improving the efficiency of queries that join foreign tables with the results of function calls, particularly for the postgres_fdw. The latest version addresses some earlier issues, including correct deparsing of functions returning records, and provides performance benchmarks.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The issue with setting newrte->functions to NIL persists, and the author is seeking suggestions on how to correctly associate the function list with the RTE in postgresExplainForeignScan() and get_tupdesc_for_join_scan_tuples() after the RTEs are flattened.","would_benefit_from_new_reviewer":"YES"}, {"id":"Zyvop-LxLXBLrZil@nathan","summary":"The proposed patch introduces a new catalog-swap mode for pg_upgrade that speeds up the file transfer step by moving the entire data directory from the old cluster to the new cluster and then swapping the catalog relation files. This approach is intended to be faster than the current method of linking or copying individual files, especially for clusters with many relations.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The author is planning to get the patches into a more reviewable state, but it is not clear what specific issues remain outstanding.","would_benefit_from_new_reviewer":"YES"}, {"id":"TYYPR01MB82310B308BA8770838F681619E5E2@TYYPR01MB8231.jpnprd01.prod.outlook.com","summary":"This patch introduces a new `STATS` option for the `EXPLAIN` command to display information about which extended statistics were used during query planning and estimation. The most recent suggestion is to output the statistics in a summary section of the plan, without including clauses.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The main point of contention is whether to include the specific clauses that the extended statistics are used for, or to simply list the names of the extended statistics used in the query plan, and whether single expression statistics should be supported.","would_benefit_from_new_reviewer":"NO"}, {"id":"OSZPR01MB8499D4884C4541159FA00ECC8B132@OSZPR01MB8499.jpnprd01.prod.outlook.com","summary":"This patch proposes optimized hex_encode and hex_decode functions using Scalable Vector Extension (SVE) for ARM (aarch64) machines, leveraging CPU intrinsics to process data blocks in parallel. The latest version addresses a compilation issue on macOS by casting 'size_t' to 'uint64' before passing it to 'svwhilelt_b8'.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The latest patch addresses a macOS-specific compilation issue, but it needs review to ensure correctness and portability across different ARM architectures and compilers.","would_benefit_from_new_reviewer":"YES"}, {"id":"20241220032226.9a3429207417d28b7e482024@sraoss.co.jp","summary":"This patch enables the use of btree and SP-Gist indexes for ILIKE forward matching, which is not currently possible when the pattern contains case-varying characters. The patch modifies the planner to handle OR clauses returned by support functions and provides an example implementation for ILIKE with two clauses covering the upper and lower case variations of the first case-varying character.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The discussion centers around whether the proposed approach of only considering the first case-varying character is sufficient, or whether a more deeply integrated solution like skip scans is needed to handle multiple case variations, especially with Unicode support.","would_benefit_from_new_reviewer":"YES"}, {"id":"39b39e7a-41b4-4f34-b3f5-db735e74a723@postgrespro.ru","summary":"The proposal aims to improve WAL write performance by removing the WALBufMappingLock, a global lock that serializes the initialization of WAL pages. It replaces the lock with a lock-free algorithm using atomic variables and a condition variable to coordinate backends during WAL page initialization, along with a second patch to make attempts on XLogInsertLock to be more efficient.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"The patch caused failures on buildfarm, particularly on aarch64 architectures, leading to hangs. The patch has been reverted.","would_benefit_from_new_reviewer":"NO"}, {"id":"010101936e4aaa70-b474ab9e-b9ce-474d-a3ba-a3dc223d295c-000000@us-west-2.amazonses.com","summary":"This patch adds support for SVE (Scalable Vector Extension) popcount instructions to PostgreSQL, improving the performance of bit counting operations on ARMv8-A architectures. It also provides implementations for popcount and popcount_masked and uses attribute target to compile arch-specific function.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether or not to remove the buffer alignment section, and why loop unrolling by two provides a performance benefit compared to not unrolling or unrolling more aggressively.","would_benefit_from_new_reviewer":"YES"}, {"id":"PH8PR11MB82869FF741DFA4E9A029FF13FBF72@PH8PR11MB8286.namprd11.prod.outlook.com","summary":"This patch aims to improve the performance of the SSE4.2 CRC32C algorithm by using the pclmulqdq instruction and processing 64 bytes at a time. The patch also includes runtime CPU detection to ensure the correct CRC32C implementation is used based on the available hardware features and build flags.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issues are related to how to best handle runtime CPU capability detection, particularly on MSVC, and the best way to structure the code to handle potential future inlining and maintainability concerns as more CRC implementations (e.g., AVX-512) are added.","would_benefit_from_new_reviewer":"NO"}, {"id":"0b1f670d-b39d-4966-bf32-f0d502ebc564@postgrespro.ru","summary":"The patch aims to improve query planning by enabling pull-up of EXISTS subqueries when the join condition is written in the JOIN ON clause, instead of the WHERE clause. The latest version of the patch also handles cases with constant quals in the subquery and addresses issues related to LIMIT.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The patch caused failures in postgres_fdw tests, particularly related to LIMIT, which the author is currently addressing.","would_benefit_from_new_reviewer":"NO"}, {"id":"817d244237878cebdff0bc363718feaf49a1ea7d.camel@j-davis.com","summary":"The proposed patch series aims to reduce the memory footprint of HashAgg by reducing the size of the TupleHashEntryData struct, primarily by storing additional data alongside the tuple and switching to a Bump allocator for table entries. The latest iteration focuses on avoiding regressions in performance, especially for by-reference types, while still achieving substantial memory savings.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"There appears to be a performance slowdown for by-reference types in some cases when using the Bump allocator, which needs further investigation.","would_benefit_from_new_reviewer":"YES"}, {"id":"78574B24-BE0A-42C5-8075-3FA9FA63B8FC@amazon.com","summary":"The patch expands the cases where heap-only tuple (HOT) updates are possible for expression and partial indexes by evaluating expressions and predicates to determine if index updates are truly needed. The latest version (v7) focuses on this single optimization and reverts other changes that were related to PHOT.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main issue is to efficiently determine if expression indexes need to be updated, and how to pass this information without unnecessary overhead or breaking separation of concerns.","would_benefit_from_new_reviewer":"YES"}, {"id":"30aa0030-f694-44ef-a19d-6ef7ddb69374@postgrespro.ru","summary":"This patch replaces the msgnumLock spinlock in sinvaladt.c with atomic operations on maxMsgNum, using memory barriers for synchronization, to improve performance by reducing contention. The patch also changes minMsgNum and nextThreshold to uint32 for consistency and addresses a wraparound issue.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether to change the signed arguments of SIInsertDataEntries, SIGetDataEntries, SICleanupQueue to unsigned, and if there are any benefits from removing MSGNUMWRAPAROUND limit.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAApHDvpMpRQvsTqZo3FinXkgytwxwF8sCyZm83xDj-1s_hLe+w@mail.gmail.com","summary":"The initial patch aimed to correct the CHUNKHDRSZ value used in nodeAgg.c for memory accounting. However, the discussion evolved into exploring ways to reduce memory usage in HashAgg, specifically by using a Bump allocator for tuple hash table entries and per-group states. The latest version of the patch has been moved to another thread related to reducing memory usage of HashAgg.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":4,"problem":"The latest patch needs to be rebased, and the overall strategy for memory management in HashAgg needs to be refined and reviewed in the other related thread.","would_benefit_from_new_reviewer":"NO"}, {"id":"1ea167aa-457d-422a-8422-b025bb660ef3@vondra.me","summary":"The proposed patch aims to improve the planning time for OLTP star-join queries by implementing a fast-path planning mode that avoids exploring all possible join orders for dimension tables. This involves detecting star-join patterns, identifying dimension tables joined to a fact table via foreign keys (or LEFT JOINs with unique constraints), and forcing these dimensions to be joined last in an arbitrary order, thereby reducing the complexity of the join order search.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The key issue currently being discussed is how to reliably identify star-join patterns and ensure that reordering joins does not lead to incorrect or illegal plans, especially in the presence of outer joins or other join restrictions. The discussion also involves whether to consider joins that increase cardinality or whether to just push all dimension joins to the end.","would_benefit_from_new_reviewer":"YES"}, {"id":"9789f79b-34f0-49ee-9852-783392a3615c@sigaev.ru","summary":"The proposal aims to improve the selectivity estimation in `var_eq_non_const()` by incorporating MCV (Most Common Values) knowledge, using a quadratic mean of the existing estimation and the MCV selectivities, to avoid underestimation and improve plan selection.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"Tom Lane questions the statistical interpretation of using the quadratic mean of MCV selectivities and how the number of MCVs affects the result's accuracy.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAFj8pRDY+m9OOxfO10R7J0PAkCCauM-TweaTrdsrsLGMb1VbEQ@mail.gmail.com","summary":"This proposal introduces schema variables, persistent database objects holding session-based, non-transactional in-memory values of any type. It aims to facilitate porting complex projects to PostgreSQL from other databases and provides a secure alternative to GUCs for storing session-specific data, with access rights control and binary data storage.  The latest iteration of the patch includes support for scalar, composite, and array variables, default values, and aims to address concerns about identifier collisions with a new VARIABLE(varname) syntax and associated warnings. Recent changes focused on bug fixes, code refactoring, and rebasing against the current master branch.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"The thread is focused on reviewing a large and complex patchset; key issues being addressed are now relating to the identifier collision with a suggestion to add a VARIABLE syntax and also the implementation of a non-transactional feature with security implication. There is a general call for reviewers who are willing to engage deeply.","would_benefit_from_new_reviewer":"YES"}, {"id":"ee410de1-1e0b-4770-b125-eeefd4726a24@eisentraut.org","summary":"This patch modifies PL/Python to use the Python limited API, which provides stronger ABI stability, allowing PL/Python to be built against one Python 3.x version and used with a different Python 3.x version at runtime. The latest patchset disables the limited API on Windows/MSVC due to build issues, but enables it on other platforms.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The primary issue is whether disabling the limited API on Windows/MSVC is an acceptable workaround for the build problems encountered.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFj8pRA3d0ARQEMbABa1n6q25AUdNmyO8aGs56XNf9pD4sRMjQ@mail.gmail.com","summary":"This patch proposes to allow the standard SQL syntax `argname => value` for named arguments when opening cursors in plpgsql, in addition to the existing `argname := value` syntax. The patch has been updated to address reviewer feedback regarding test cases.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFj8pRD053CY_N4=6SvPe7ke6xPbh=K50LUAOwjC3jm8Me9Obg@mail.gmail.com","summary":"This thread proposes and refines a patch to implement session variables in PostgreSQL. The proposal includes the ability to create, drop, grant, revoke, alter, select, and let session variables. It also encompasses support for temporary session variables, default expressions, not null constraints, immutable variables, and integration with PL/pgSQL and pg_dump, all while addressing concerns about identifier collisions and memory management. The current focus is on addressing a concern raised regarding the lack of safety because the implementation does not account for the possibility of name collisions between session variables and column names in queries.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The primary outstanding issue is how to handle potential naming collisions between session variables and column names in SQL queries, with a current implementation that prioritizes column names and provides an optional warning, but with some concerns this approach isn't safe enough.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFj8pRB7V0FCZ6fZv4LG9voAQQMc3A+dO5nJYzRJKLuew38G2Q@mail.gmail.com","summary":"This patch introduces a new `strict_expr_check` option for plpgsql, which aims to enforce stricter parsing rules for expressions and disallow undocumented syntax, such as `var := column FROM tab`, requiring the use of ANSI standard `var := (SELECT column FROM tab)`. The latest iteration rewrites the patch to perform post-parser checks, making it less invasive.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether to accept the patch and enable the `strict_expr_check` option, potentially by default, to enforce stricter syntax rules in plpgsql.","would_benefit_from_new_reviewer":"YES"}, {"id":"84a8a89e-adb8-47a9-9d34-c13f7150ee45@manitou-mail.org","summary":"The proposed patch aims to fix a client-side performance issue in pgbench when running large scripts, specifically an O(N^2) complexity in ParseScript and process_backslash_command due to repeated scanning for line numbers. Tom Lane provided a patch that eliminates the overhead by tracking line ends and avoiding rescanning, and further improved it by deferring line number calculation until it's actually needed.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether Tom Lane's v2 patch series adequately addresses the performance issue and potential bugs in pgbench's script parsing.","would_benefit_from_new_reviewer":"YES"}, {"id":"7cac7e66-9a3b-4e3f-a997-42aa0c401f80@gmail.com","summary":"The proposed patch optimizes the lower(), upper(), and casefold() functions by using a modified binary search on ranges of Unicode codepoints, reducing table sizes and improving performance. The latest version is v3, and Jeff Davis is currently reviewing it.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Jeff Davis suggested using the top 5 bits of the offset to indicate flags for HAS_LOWER, HAS_UPPER, HAS_FOLD, HAS_SPECIAL, and HAS_TITLE, but Alexander Borisov believes this would add complexity without significant performance gain and has suggested sticking with v3.","would_benefit_from_new_reviewer":"NO"}, {"id":"CWZBBRR6YA8D.8EHMDRGLCKCD@neon.tech","summary":"The thread discusses removing the HAVE_USELOCALE configure check and tidying up locale thread safety in the ECPG library, focusing on using thread-safe locale APIs and addressing issues related to locale handling in ECPG and the broader PostgreSQL codebase, with the ultimate goal of paving the way for multi-threading support.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding issue revolves around ensuring correct and robust error handling when creating the 'C' locale, and determining the best approach to initializing and managing the 'C' locale in pgtypeslib and ecpglib while avoiding problematic dependencies.","would_benefit_from_new_reviewer":"YES"}, {"id":"3766675.7eaCOWfIcx@thinkpad-pgpro","summary":"This patch introduces a new option engine to refactor and unify options processing in PostgreSQL, aiming for reusability and maintainability. It detaches option processing and validation from the code that uses the options, providing a single API for defining options across different parts of the system, including core access methods, contrib access methods, and opclasses.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The patch is large and complex, making it difficult to review. The author is considering splitting the patch into smaller parts to ease review.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+hUKGJqVe0+Pv9dvC9dSums_PXxGo9SWcxYAMBguWJUGbWz-A@mail.gmail.com","summary":"This patch set aims to replace the thread-unsafe nl_langinfo() and localeconv() functions with thread-safe alternatives, nl_langinfo_l() and pg_localeconv_r(), respectively, and also remove setlocale() calls from check_locale(). The pg_localeconv_r() implementation uses different strategies based on the operating system, including Windows, Glibc, macOS/*BSD, and a baseline POSIX implementation with a lock.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The error handling for _create_locale() on Windows and whether per-category locale checking is necessary are still being discussed. Also, the author needs to unify error handling in patch 0002.","would_benefit_from_new_reviewer":"NO"}, {"id":"CABBtG=cDTCBDCBK7McSy6bJR3s5xUTOg0vSFfuW8oLdUYyCscA@mail.gmail.com","summary":"The patch aims to remove a duplicated call to smgrclose() in the smgrDoPendingDeletes() function, as the function smgrdounlinkall() already closes the SMgrRelation object. The change was split into two patches, with the second addressing similar redundant code in the smgrdestroy function.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"2830211e1b6e6a2e26d845780b03e125281ea17b.camel@j-davis.com","summary":"The patch series refactors collation and ctype behavior into method tables and provides a way to hook the creation of a pg_locale_t, enabling extensions to create custom method tables, potentially replacing ICU or controlling libc behavior. The latest version (v15) addresses earlier feedback and includes performance testing, but shows some potential slowdown in worst-case UTF8 scenarios and ILIKE on en_US with LATIN9.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"There is a performance regression in some worst-case scenarios that needs to be addressed before the patch can be committed, or a decision needs to be made that the regression is acceptable given the benefits of the code organization and future extensibility.","would_benefit_from_new_reviewer":"YES"}, {"id":"stj36ea6yyhoxtqkhpieia2z4krnam7qyetc57rfezgk4zgapf@gcnactj4z56m","summary":"The proposed patchset aims to improve performance and correctness when setting hint bits, particularly in the context of asynchronous I/O (AIO) and checksums. It introduces a new buffer flag, BM_SETTING_HINTS, to manage concurrent access and prevent data corruption during I/O. The patchset also incorporates optimizations like batch-mode MVCC checks and avoids unnecessary page copying during WAL logging, and contains infrastructure to detect potentially unsafe buffer accesses.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"Odd bimodal performance distribution observed during benchmarking of WAL-logged relations, making performance analysis difficult.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+TgmoYutMw1Jgo8BWUmB3TqnOhsEAJiYO=rOQufF4gPLWmkLQ@mail.gmail.com","summary":"The proposal is to refactor the explain.c file by moving some code chunks into separate files (explain_format.c and explain_dr.c) to reduce its size and improve maintainability.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CAJ7c6TOy7fUW9MuNeOWor3cSFnQg9tgz=mjXHDb94GORtM_Eyg@mail.gmail.com","summary":"The patch refactors SLRU to always use long file names, removing the `SlruCtl->long_segment_names` flag and simplifying the code and API. It includes corresponding changes to `pg_upgrade` and provides manual testing steps.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The biggest issue was whether to add TAP tests for pg_upgrade, but the author and a reviewer decided to rely on buildfarm instead. Now, the outstanding need is for someone to review the provided patch and manual testing steps.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+hUKGJc4s+Wyb3EFOQNN9VVK+Qv40r2LK41o9PkS9ThxviTvQ@mail.gmail.com","summary":"This patch series aims to replace explicit casts to (unsigned long long) when using printf-like functions with uint64_t values, instead using the PRIu64 macro from <inttypes.h> to improve code clarity and avoid compiler warnings, particularly in cross-compilation environments. It also modernizes some integer parsing routines in pgbench.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The main outstanding issue is the handling of off_t, which may have different sizes across platforms, potentially causing issues even with the PRI* macros. Also, the patch series needs review.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAAKRu_ZwCwWFeL_H3ia26bP2e7HiKLWt0ZmGXPVwPO6uXq0vaA@mail.gmail.com","summary":"This thread discusses a series of patches aimed at refactoring BitmapHeapScan to use the streaming read API and improve performance. The latest patch set (v32) focuses on cleaning up the layering violations by pushing prefetch-related code into the heap AM and modifying the TIDBitmap API for better iterator management. The streaming read API implementation, while present, is not the primary focus for immediate inclusion due to ongoing performance investigations, but improvements in prefetching are still being sought.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Reproducing and addressing a performance regression related to effective_io_concurrency in parallel bitmap heap scans is the primary challenge. There are also concerns about the interaction with kernel read-ahead, with or without streaming.","would_benefit_from_new_reviewer":"YES"}, {"id":"149ff9264db27cdf724b65709fbbaee4bf316835.camel@j-davis.com","summary":"This patch introduces the ability to create subscriptions using a foreign server object instead of a connection string. The connection details are managed separately from the subscription, allowing for easier updates and privilege separation, and leverages foreign data wrappers (FDWs) like postgres_fdw to establish connections. The latest version delegates conninfo creation to the FDW.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The current patch relies heavily on postgres_fdw, making it potentially difficult to test standalone, and it is not clear if the overall direction is agreed upon.","would_benefit_from_new_reviewer":"YES"}, {"id":"97820ce8-a1cd-407f-a02b-47368fadb14b@tantorlabs.com","summary":"This patch aims to eliminate repetitive code in SLRU bootstrap functions by introducing a common function, BootStrapSlruPage, for nullifying SLRU pages. The latest version refactors the approach based on review feedback, incorporating SimpleLruZeroAndLogPage and WriteSlruZeroPageXlogRec.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The current implementation of WriteSlruZeroPageXlogRec is considered a modularity violation, and the documentation style needs to be adjusted to provide individual comments for each function.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAPhYifF25q5xUQWXETfKwhc0YVa_6+tfG9Kw4bCvCjpCWxYs2A@mail.gmail.com","summary":"The proposed patch extends the postgres_fdw_get_connections function to return the remote server backend PID for each connection, which is useful for monitoring, deadlock detection, and distributed statistics.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The documentation in doc/src/sgml/postgres-fdw.sgml needs to be reviewed for clarity and completeness after being updated in the latest patch.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAMPB6wfe4zLjJL8jiZV5kjjpwBM2=rTRme0UCL7Ra4L8MTVdOg@mail.gmail.com","summary":"This patch adds a 'pid' parameter to the pg_replication_origin_session_setup function to allow specifying which backend process acquired the replication origin. This enables parallel application of logical replication changes.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The latest version of the patch lacks tests, but adding tests for replication functions appears to be a broader need.","would_benefit_from_new_reviewer":"YES"}, {"id":"e2636c5d-c031-43c9-a5d6-5e5c7e4c5514@pgmasters.net","summary":"The patchset aims to harden recovery by allowing pg_backup_stop() to return a copy of pg_control with a flag set to prevent recovery if the backup_label file is missing. The patchset is split into two parts: one that updates the control file flag during base backups, and another that provides an SQL function to retrieve the pg_control file.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The current implementation requires copying data twice to address alignment issues with -fsanitize=alignment, and it is not clear if this is the best way to handle the data alignment. Also, is the SQL function implementation worthwhile.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACLU5mSr+t+6K_Ww6z1fk_=jP=5-U0CEqMsHjii8uG_6UWQo-g@mail.gmail.com","summary":"The proposal aims to simplify recovery after accidental table drops (and potentially database drops, truncate table, or large deletes/updates) by logging the LSN before the drop occurs. This would allow for easier restoration to the point before the drop.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":2,"problem":"The author asked about extending this to DROP DATABASE, TRUNCATE TABLE, DELETE (without WHERE), and UPDATE (without WHERE). Also, there are questions about the log message format and whether temporary and unlogged tables should be treated differently.","would_benefit_from_new_reviewer":"NO"}, {"id":"b81db436-8262-4575-b7c4-bc0c1551000b@app.fastmail.com","summary":"This patch proposes to introduce a new GUC, `max_replication_origin_sessions`, separate from `max_replication_slots`, to control the maximum number of simultaneously configured replication origins on a subscriber. This aims to clarify the purpose of `max_replication_slots` and allow for independent configuration of replication slots and origins.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The latest version of the patch needs to update the documentation in logical-replication.sgml.","would_benefit_from_new_reviewer":"NO"}, {"id":"OS0PR01MB5716BE80DAEB0EE2A6A5D1F5949D2@OS0PR01MB5716.jpnprd01.prod.outlook.com","summary":"This thread discusses a patch to improve conflict detection for update_deleted scenarios in logical replication, which occurs when an apply worker cannot find the target tuple to be updated because it was removed by another origin. The latest iteration implements a GUC parameter to limit the time dead tuples are retained and automatically invalidate slots when limits are reached. Previous designs involving subscription-level parameters and complex slot management have been discarded in favor of a simpler, GUC-controlled approach.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current design may cause excessive dead tuple accumulation and performance degradation on the subscriber. A strategy is needed to avoid a situation where some subscriptions retain dead tuples, impacting overall database performance, even when it's no longer beneficial for those subscriptions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAA4eK1LC+KJiAkSrpE_NwvNdidw9F2os7GERUeSxSKv71gXysQ@mail.gmail.com","summary":"This thread discusses adding the ability to logically replicate sequences, focusing on a design that involves copying sequence values during CREATE SUBSCRIPTION and ALTER SUBSCRIPTION REFRESH PUBLICATION. The latest iteration includes mechanisms for detecting and warning about mismatched sequence parameters between publisher and subscriber, and refactoring the code.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The main outstanding questions revolve around the approach to ALTER SUBSCRIPTION syntax to encompass only sequences , only tables or both and whether to create replication slots for sequence-only replications.","would_benefit_from_new_reviewer":"YES"}, {"id":"06c02ef916d85e77778e5cdfdf67a3df@postgrespro.ru","summary":"The proposed patch introduces a new SQL function to distinguish between a server in point-in-time recovery (PITR) mode and an ordinary replica, which `pg_is_in_recovery()` cannot currently do. This involves adding a flag to track if a standby.signal file was found at startup, refactoring recovery flags into a bitmask, and providing a SQL wrapper function to expose these flags.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The latest version of the patch has been submitted, addressing previous feedback about using a bitmask for recovery flags and providing a text array SQL wrapper, but it is unclear if the changes fully address the concerns about local vs shared flag usage, and usefulness of the tests.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAO6_XqoZb2czT=i=VBQjwBwwo3d21cnMm-EpfYfx0m-O+abFrQ@mail.gmail.com","summary":"This patch addresses a regression where recovery can be blocked for extended periods due to a client write being blocked, specifically when the client connection is broken and the server process holds a buffer pin. The patch aims to handle recovery conflict interrupts during blocked client writes by terminating the session, but faces challenges with interrupt handling during error reporting.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current implementation struggles to reliably handle recovery conflict interrupts when they occur during error reporting, as interrupts are held at that time. This can lead to incomplete protection against blocked recovery.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAD21AoCVLeLYq09pQPaWs+Jwdni5FuJ8v2jgq-u9_uFbcp6UbA@mail.gmail.com","summary":"The proposal aims to allow users to enable logical decoding without a server restart when wal_level is set to 'replica'. The latest approach involves making wal_level a PGC_SIGHUP parameter and using a background worker, managed by a new 'bgtask worker' infrastructure, to handle the online transition between different wal_levels. This involves reserving background worker slots to guarantee the background worker can launch.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current outstanding issue revolves around the design and implementation of the background task infrastructure and ensuring a smooth, reliable transition between wal_levels without disrupting existing functionalities like physical replication.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAHv8RjLPdFP=kA5LNSmWZ=+GMXmO+LczvV6p9HJjsXxZz10KGA@mail.gmail.com","summary":"This patch introduces the '--enable-two-phase' option to the 'pg_createsubscriber' utility, allowing users to enable two-phase commit for subscriptions during their creation. If the option is not specified, two-phase commit will be disabled. The patch has gone through multiple rounds of review and revisions.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The latest patch needs to be rebased.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHv8RjKhA=_h5vAbozzJ1Opnv=KXYQHQ-fJyaMfqfRqPpnC2bA@mail.gmail.com","summary":"This patch enhances pg_createsubscriber by adding the '--all' option, which automatically fetches all non-template databases from the source server and creates corresponding subscriptions on the target server. The patch also ensures that the new option cannot be used with other incompatible options.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The test suite is not adequately testing the new --all functionality, specifically regarding replication and subscription creation in each target database.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHv8RjL4OvoYafofTb_U_JD5HuyoNowBoGpMfnEbhDSENA74Kg@mail.gmail.com","summary":"This patch adds a '--cleanup-existing-publications' option to the pg_createsubscriber utility to remove publications replicated from the source server, preventing conflicts when converting a physical standby to a logical subscriber. The cleanup targets only publications that existed on the source server, leaving manually created publications on the subscriber intact.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The option name and the logic of dropping publications (specifically whether to conditionally drop *all* publications or just the one related to the command) are still under discussion.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAGfChW51P944nM5h0HTV9HistvVfwBxNaMt_s-OZ9t=uXz+Zbg@mail.gmail.com","summary":"This patch aims to optimize logical decoding by filtering out irrelevant changes (those not part of any publication) before they are assembled into transactions. This reduces disk I/O from spill files and potentially reduces memory usage, especially in cases with large transactions that include changes to unpublished tables. The current approach uses a hash cache and throttling mechanism to minimize overhead when filtering is not beneficial.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current implementation may not be correctly detecting concurrent aborts due to caching and may require a new approach for invalidating the relation cache. There are also questions about the handling of toast tables and the best threshold for throttling.","would_benefit_from_new_reviewer":"YES"}, {"id":"20240424115242.236b499b2bed5b7a27f7a418@sraoss.co.jp","summary":"This patch extends ALTER DEFAULT PRIVILEGES to support large objects, allowing default privileges to be set for large objects so that users other than the owner can use them without needing a GRANT every time a large object is created.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CABdArM7FW-_dnthGkg2s0fy1HhUB8C3ELA0gZX1kkbs1ZZoV3Q@mail.gmail.com","summary":"This patch introduces a new conflict detection type, 'multiple_unique_conflicts', in logical replication to identify when an incoming row violates multiple UNIQUE constraints, allowing users to resolve multiple conflicts at once instead of one at a time.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The reviewer questions the usefulness of collecting statistics for the new conflict type and suggests including the column names causing the conflict in the logs.","would_benefit_from_new_reviewer":"NO"}, {"id":"508d0505-8b7a-4864-a681-e7e5edfe32aa@iki.fi","summary":"The proposal aims to increase the entropy of the query cancellation key by making it longer, thus improving security. The implementation involves bumping the minor protocol version to 3.2, providing a libpq option to specify the desired protocol version, and using a constant-time comparison function for the cancellation key. The latest version of the patch is split into multiple commits to better isolate changes, and uses OpenSSL's CRYPTO_memcmp for timingsafe comparison.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"What should be the maximum size of the cancel key that the client can expect, and what is the best approach to document that?","would_benefit_from_new_reviewer":"YES"}, {"id":"1C81CD0D-407E-44F9-833A-DD0331C202E5@yesql.se","summary":"This patch adds server-side SNI (Server Name Indication) support to PostgreSQL, allowing the server to select different SSL certificates based on the hostname provided by the client during the TLS handshake. A new configuration file, pg_hosts.conf, is used to map hostnames to specific certificates, keys, and CA certificates. The patch also introduces a new GUC, ssl_snimode, to control how the hostname TLS extension is handled.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issue is whether there are any remaining bugs or unexpected behaviors, particularly related to server reloading, and whether there are any blockers preventing the patch from being committed. Also, the interaction of SNI settings with HBA clientname settings is documented as not supported.","would_benefit_from_new_reviewer":"YES"}, {"id":"c763235a2757e2f5f9e3e27268b9028349cef659.camel@oopsware.de","summary":"This patch adds modern SHA-2 based password hashes (sha256crypt and sha512crypt) to pgcrypto, providing more secure alternatives to existing hashing algorithms. The patch aims to be compatible with crypt() on FreeBSD and Linux, as well as openssl passwd with -5 and -6 switches. The latest discussion revolves around how strictly to validate salt strings, especially regarding invalid characters and minimum lengths.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"How strictly should the salt string be validated? Should invalid characters be rejected, and what should be the minimum acceptable salt length?","would_benefit_from_new_reviewer":"NO"}, {"id":"Zz91RagtQg2s9497@nathan","summary":"The proposal aims to improve row-security tracking in Postgresql to prevent future vulnerabilities by accumulating row-security information globally rather than relying on manual propagation. The latest suggestion is to use a query tree walker to look for hasRowSecurity flags, and to redefine Query.hasRowSecurity to only summarize the situation for the Query's own rtable entries.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The key issue is how to reliably propagate row-security information to the top-level query without introducing performance regressions or creating code that is difficult to maintain and prone to omissions.","would_benefit_from_new_reviewer":"NO"}, {"id":"ce35e97b-cf34-3f5d-6b99-2c25bae49999@postgrespro.ru","summary":"This patch series aims to implement k-Nearest Neighbors (kNN) search for btree indexes, allowing for faster ORDER BY distance queries. The latest version (v19) rebased onto current master, addresses an inconsistency introduced by commit 5bf748b86. The author is pursuing an approach involving two simultaneous scans over the B-tree (forward and backward).","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":4,"problem":"The current implementation faces challenges including descending order support, potential slowdowns compared to btree_gist, and an inconsistency with a recent commit.","would_benefit_from_new_reviewer":"YES"}, {"id":"ZWlohtKAs0uVVpZ3@paquier.xyz","summary":"This patch proposes the implementation of sequence access methods, allowing users to define custom methods for generating sequence values. This would enable features like global sequences, custom computations (e.g., snowflake IDs), and potentially custom data types for sequences.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The key issue currently being discussed is whether the proposed abstraction levels are appropriate, specifically concerning the separation of computation logic from storage and data type concerns, and how to support custom data types for sequence values.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGECzQQzDqDzakBkR71ZkQ1N1ffTjAaruRSqppQAKu3WF+6rNQ@mail.gmail.com","summary":"This patch introduces the 'owned_schema' option for Postgresql extensions, allowing extension authors to specify that a new, dedicated schema should be created for the extension's objects during installation. This enhances security by mitigating search_path injection vulnerabilities and simplifies extension management.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"The biggest outstanding question is how to best handle migration of existing extensions to utilize the new 'owned_schema' feature, as the current implementation only supports new extensions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACG=ezaWg7_nt-8ey4aKv2w9LcuLthHknwCawmBgEeTnJrJTcw@mail.gmail.com","summary":"The proposal aims to make multixact offsets 64 bits to avoid potential overflow issues. It involves changes to data types, output formatting, and pg_upgrade to handle the conversion, including dealing with potential wraparound scenarios during upgrades from older versions.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issue is ensuring comprehensive test coverage for pg_upgrade, especially for edge cases such as handling pre-existing multixact wraparound and potentially buggy pre-9.5 installations (oldestOffsetKnown==false).","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+hUKGLM+t+SwBU-cHeMUXJCOgBxSHLGZutV5zCwY4qrCcE02w@mail.gmail.com","summary":"This patch introduces a new 'file_copy_method' GUC to control whether CREATE DATABASE uses file cloning (copy-on-write) or a regular copy. It aims to improve the speed and reduce disk usage of database cloning on systems that support copy-on-write, such as XFS, BTRFS, ZFS, and APFS. The GUC defaults to 'copy' and can be set to 'clone' if the system supports it.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether the current implementation using copy_file_range() truly qualifies as cloning, and whether FICLONE should be used instead of copy_file_range() for broader availability.","would_benefit_from_new_reviewer":"YES"}, {"id":"E7C7BFFB-8857-48D4-A71F-88B359FADCFD@justatheory.com","summary":"This thread discusses a proposal to add a new GUC, `extension_control_path`, which acts like `dynamic_library_path` but for extension control files. The aim is to allow easier installation and testing of extensions outside the core installation tree, particularly in containerized environments. The latest iteration of the patch strips '$libdir/' from module_pathname and uses prefix for installation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The interaction between the proposed `extension_control_path` and the existing 'directory' parameter in extension control files is unclear and potentially problematic, particularly in how it affects SQL file lookups.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAAJ_b962c5AcYW9KUt_R_ER5qs3fUGbe4az-SP-vuwPS-w-AGA@mail.gmail.com","summary":"This thread discusses adding the ability to define CHECK and FOREIGN KEY constraints as NOT ENFORCED, as per the SQL Standard 2023. The latest iteration involves refactoring and addressing issues related to the interaction between NOT ENFORCED, VALID, and inheritance. The current focus is on determining the correct behavior and state transitions when altering constraint enforceability and validity.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The key issue is defining the correct and standard-compliant behavior regarding the interaction between NOT ENFORCED, VALID, and inheritance, specifically how altering enforceability affects the VALID status and whether validation should be automatically triggered.","would_benefit_from_new_reviewer":"NO"}, {"id":"CACJufxFiW=4k1is=F1J=r-Cx1RuByXQPUrWB331U47rSnGz+hw@mail.gmail.com","summary":"The patch aims to speed up the process of adding NOT NULL constraints to a table by using an index scan to quickly check for existing null values in the column. This optimization applies when the leading key column of a B-tree index matches the column being constrained.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch is awaiting review after some cosmetic changes and simplifications to the isolation tests.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFj8pRDK89FtY_yyGw7-MW-zTaHOCY4m6qfLRittdoPocz+dMQ@mail.gmail.com","summary":"The proposal is to introduce a new command, REPACK, to replace VACUUM FULL and CLUSTER. REPACK will reclaim storage occupied by dead tuples by rewriting the table to a new disk file, obeying fillfactor settings. REPACK CONCURRENTLY will allow this process to happen with minimal locking using logical replication.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issues are how to handle UNLOGGED tables, the impact of long-running snapshots on vacuuming other tables, and how to enable logical decoding transiently for the target table without performance penalties.","would_benefit_from_new_reviewer":"NO"}, {"id":"E72EAA49-354D-4C2E-8EB9-255197F55330@enterprisedb.com","summary":"The patch series aims to clean up the index access method API by addressing layering violations and limitations, introducing testing infrastructure, and generalizing strategy numbers. It includes changes to allow non-core index AMs in replica identity full, speculative insertion, foreign key constraints, and merge join. The latest focus is integrating GiST support using CompareType and simplifying the API by removing opcintype.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current outstanding issue revolves around the best way to simplify the gist strategy translation function by dropping the opcintype from the API.","would_benefit_from_new_reviewer":"YES"}, {"id":"cnthxg2eekacrejyeonuhiaezc7vd7o2uowlsbenxqfkjwgvwj@qgzu6eoqrglb","summary":"This patch set proposes a method to change the shared_buffers setting in PostgreSQL without requiring a server restart. This is achieved by using multiple shared memory mappings and the mremap system call to resize the shared memory region. The discussion has evolved to focus on reserving address space in advance to avoid address conflicts during resizing and synchronizing the change across backends.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The key issue currently being discussed is how to reliably reserve address space for the shared memory mappings to avoid conflicts with other allocations and the synchronization of the change across all backends to prevent data corruption or crashes.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxHVxnyRYy67hiPePNCPwVBMzhTQ6FaL9_Te5On9udG=yg@mail.gmail.com","summary":"The patch aims to allow `COPY table_name TO` for materialized views, which is currently disallowed, potentially improving performance. It addresses concerns about asymmetry in COPY functionality, as materialized views would only support COPY TO.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The primary concern is whether introducing a relation kind that supports only one direction of COPY (TO but not FROM) is a desirable and consistent design choice for PostgreSQL, and how it interacts with existing restrictions.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxHitd5LGLBSSAPShhtDWxT0ViVKTHinkYW-skBX93TcpA@mail.gmail.com","summary":"The proposed patch aims to refactor AlterDomainAddConstraint to improve error messages and simplify the syntax. It changes error messages related to NOT NULL and CHECK constraints, disallows NO INHERIT for check constraints on domains, and simplifies the grammar for adding constraints to domains.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The primary issue is improving the clarity and correctness of error messages, particularly regarding NO INHERIT, NOT ENFORCED and deferrability constraints for domains.","would_benefit_from_new_reviewer":"YES"}, {"id":"CADkLM=dpz3KFnqP-dgJ-zvRvtjsa8UZv8wDAQdqho=qN3kX0Zg@mail.gmail.com","summary":"This patchset introduces functions (pg_set_extended_stats, pg_clear_extended_stats, and pg_restore_extended_stats) to set, clear, and restore extended statistics, analogous to the existing functions for relation/attribute statistics. It also includes input functions for pg_ndistinct and pg_dependencies, with validation to ensure the statistics are meaningful for the target object.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issue is whether the current input/output format for pg_ndistinct and pg_dependencies should be changed to a more processing-friendly format, and whether the attribute number validation is sufficient.","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxHTBkymh06D4mGKNe1YfRNFN+gFBybmygWk=PtMqu00LQ@mail.gmail.com","summary":"This patch proposes adding function argument names to the `substring` and `substr` functions to improve readability of `\\df` output. The author also considered updating documentation related to these functions.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":2,"problem":"Whether to add a note to the documentation about `substring` being a valid alias for `substr`, and how to handle the different calling conventions (keywords vs. commas).","would_benefit_from_new_reviewer":"NO"}, {"id":"262624.1738460652@sss.pgh.pa.us","summary":"This patch series aims to add cross-type index comparison support to the btree_gin extension, allowing queries to use the gin index even when the query value's datatype differs from the indexed column's datatype. This is achieved by leveraging the existing 'partial match' feature of GIN and adding non-error-throwing conversion routines.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main questions revolve around the documentation of comparePartial() and whether to refactor core routines to expose xxx2yyy_opt_overflow interfaces to avoid code duplication.","would_benefit_from_new_reviewer":"YES"}, {"id":"c73a1746-0cd0-6bdd-6b23-3ae0b7c0c582@postgrespro.ru","summary":"This thread discusses the implementation of `SPLIT PARTITION` and `MERGE PARTITIONS` commands in PostgreSQL. The latest iteration aims to address security concerns and other issues identified in previous versions, focusing on refactoring the `createPartitionTable` function and handling object dependencies correctly. The thread has seen many revisions and detailed feedback, and is currently under review.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Key issues are related to security around partition ownership, potential issues with functional indexes, correct duplication of per-partition constraints or triggers, and potential code duplication (relation_openrv). The long-standing architectural issue involving reliance on ProcessUtility continues to be a central concern.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAFY6G8ercA1KES=E_0__R9QCTR805TTyYr1No8qF8ZxmMg8z2Q@mail.gmail.com","summary":"This patch enables SCRAM authentication for dblink connections when using dblink_fdw without requiring a plain-text password on user mapping properties. It also includes refactoring of the get connection routines and adds validations to ensure the proper use of SCRAM authentication.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current outstanding questions relate to the best way to enforce the use of SCRAM keys and whether to create a common function for dblink_connstr_has_scam_require_auth and dblink_connstr_has_pw.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAG0ozMpD27fCyVFoa82G7uV4md4wVYw7DWC-PVA6P5=1v35tsA@mail.gmail.com","summary":"This proposal introduces a feature to print execution plans of active queries in an in-memory shared object so that other sessions can visualize them with a new view: pg_stat_progress_explain. The latest version uses timeouts instead of sampling for instrumented plans, reuses objects allocated at query start, uses DSA for shared memory, and provides GUCs to control instrumentation.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether the current implementation of instrumentation is appropriate or whether the progressive_explain GUC should have off|explain|analyze values to control instrumentation.","would_benefit_from_new_reviewer":"YES"}, {"id":"67fa8560-8d61-5d06-8178-fc9c7684db90@uni-muenster.de","summary":"This patch introduces a new function, xmlcanonicalize(xml, bool keep_comments), to serialize XML documents in their canonical form, as described in the W3C Canonical XML Version 1.1 specification. This function allows users to keep or remove XML comments from the canonical XML output.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"CACJufxHArQysbDkWFmvK+D1TPHQWWTxWN15cMuUaTYX3xhQXgg@mail.gmail.com","summary":"This patch implements NOT NULL constraints on virtual generated columns, which will raise an error if the generated expression evaluates to NULL during INSERT.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The patch needs review to ensure the implementation in ExecConstraints is correct and efficient.","would_benefit_from_new_reviewer":"YES"}, {"id":"CA+renyUApHgSZF9-nd-a0+OPGharLQLO=mDHcY4_qQ0+noCUVg@mail.gmail.com","summary":"This mailing list thread discusses a proposed patch to add SQL:2011 application-time support (valid-time) to Postgresql, allowing the definition of periods and temporal constraints. After several rounds of reviews, revisions and commits of portions of the patch, some core design issues regarding the behavior of temporal primary keys in the presence of empty ranges and the interaction with logical replication have been discovered, leading to a provisional decision to revert the recently committed portions to allow for further discussion and refinement.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":5,"problem":"The key issue currently being discussed is how to handle empty ranges in temporal primary keys and the correct behavior of RESTRICT constraints in temporal foreign keys. Should empty ranges be forbidden, and should RESTRICT constraints consider the time periods or just the non-temporal components of a foreign key?","would_benefit_from_new_reviewer":"YES"}, {"id":"20230601235909.0e1572c27e59112f9d0cbe86@sraoss.co.jp","summary":"The proposed patch adds Incremental View Maintenance (IVM) to Postgresql, allowing materialized views to be updated automatically and incrementally when underlying tables are modified, supporting features like DISTINCT and aggregates (count, sum, avg, min, max). The latest version (v34) addresses previous review comments, fixes bugs, and rebases the patch-set.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":5,"problem":"Recent feedback has pointed out several areas for improvement, including code style, SQL design, regression test organization, better EXPLAIN integration, and resolving function OID range concerns, and addressing various test failures. The patch also needs to address the comments from Cloudberry DB regarding Tuple Access Method, and isimmv/reloption choice.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAKAnmmJcXyLeBUJfqCx+-gRmkooDPnH7OmM4o=2HJRXzbMkP_g@mail.gmail.com","summary":"This patch introduces a new GUC, cleartext_passwords_action, to warn about, allow, or disallow the use of clear text passwords in CREATE USER and ALTER USER commands. The aim is to improve security by discouraging the practice of sending passwords in the clear, which can lead to them being exposed in various logs and system tools.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether a warning is appropriate given the uncertainty of removing support for plaintext passwords entirely and whether logging errors related to disallowed passwords increases the likelihood of passwords being logged.","would_benefit_from_new_reviewer":"YES"}, {"id":"7b99d466-985f-4d27-8c93-9b98c6945ebb@uni-muenster.de","summary":"This patch implements XMLCast (SQL/XML X025), which enables conversions between SQL and XML data types. It allows casting an XML value to a SQL data type (converting XSD literals to their SQL equivalents) and casting from a SQL data type to XML (translating the SQL value to its corresponding XSD data type). Recent updates include removing the libxml2 dependency in `unescape_xml()` and adding regression tests for XMLCast backward parsing.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The main outstanding question is whether the behavior of XMLCast regarding times and intervals is consistent with existing PostgreSQL XML features like XMLTABLE, and if any code sharing is possible or desirable.","would_benefit_from_new_reviewer":"YES"}, {"id":"20231204.153548.2126325458835528809.kou@clear-code.com","summary":"The proposal aims to make the COPY format extendable by introducing CopyToRoutine and CopyFromRoutine structures and refactoring the existing code to use them. The latest focus is on achieving this without negatively impacting the performance of existing text, csv, and binary formats, while also ensuring the design is suitable for future extensions. A key consideration is whether function calls involved in setting callbacks impact performance.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The current design, while enabling extensibility, may introduce performance regressions due to function pointer indirection, particularly in COPY FROM operations. It is unclear how to reconcile the need for a clean, extensible API with the requirement to maintain the performance of core COPY formats.","would_benefit_from_new_reviewer":"YES"}, {"id":"20230625.210509.1276733411677577841.t-ishii@sranhm.sra.co.jp","summary":"This thread discusses a patch to implement a subset of the Row Pattern Recognition (RPR) feature from SQL standards in Postgresql, focusing on the WINDOW clause (R020). The latest patches implement basic pattern matching with '+' and '*' quantifiers, and allow aggregates to be used with RPR. The author is working to improve performance, fix bugs, and address coding style.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":5,"problem":"The current patch struggles with very large window frames, and the author has been working on performance optimization. It is also not clear if the implemented feature set is sufficient for a minimally viable RPR feature for Postgres.","would_benefit_from_new_reviewer":"YES"}, {"id":"a855795d-e697-4fa5-8698-d20122126567@eisentraut.org","summary":"This thread discusses a proposed patch for implementing SQL Property Graph Queries (SQL/PGQ) in PostgreSQL, following the SQL:2023 standard. The patch aims to provide a way to query graph-structured data using SQL, by mapping graph queries to relational operations.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"Junwang Zhao has provided a patch with several refactors, fixes, and tests. Ashutosh Bapat has requested that the changes be submitted as a patch in the full patch-set.","would_benefit_from_new_reviewer":"NO"}, {"id":"4BCECCD5-4F40-4313-9E98-9E16BEB0B01D@gmail.com","summary":"The proposal is to extend the functionality of the jsonb_strip_nulls function to also remove null values from arrays, and to add a json implementation, by adding an optional boolean argument. The first argument is the json or jsonb value, the second optional argument is a boolean controlling whether to strip nulls from arrays as well as objects.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAK98qZ1JNNAx4QneJG+eX7iLesOhd6A68FNQVvvHP6Up_THf3A@mail.gmail.com","summary":"The proposal is to add SQL:2023 JSON simplified accessor support (dot notation) for JSONB, allowing access to fields using dot notation (e.g., colname.field.field...) instead of the current non-standard syntax. The latest iteration (v7) implements this by leveraging jsonb's type subscripting and translating dot notation into jsonpath expressions.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The main question is whether the current approach of generalizing the existing jsonb typesubscript support function to handle both bracket subscripting and dot notation, by translating dot notation into a jsonpath expression, is the most efficient and maintainable solution.","would_benefit_from_new_reviewer":"YES"}, {"id":"d22cfe49-1567-4848-b7b7-9e1fe75f8828@uni-muenster.de","summary":"This patch proposes adding the XMLDocument function to PostgreSQL, as specified in SQL/XML. In PostgreSQL's implementation, the function simply returns its input XML argument unchanged, providing compatibility with the SQL standard without altering the data itself, as PostgreSQL's XML type inherently satisfies the standard's requirements for document nodes.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"Whether a generic identity function should be created for this purpose or the current implementation is sufficient.","would_benefit_from_new_reviewer":"NO"}, {"id":"0427cced-93df-4e50-aaa0-645438a2dbe4@uni-muenster.de","summary":"This patch adds flags to XMLSerialize to control the inclusion or exclusion of the XML declaration and to specify the XML version. The VERSION flag allows specifying the version in the XML declaration. INCLUDING/EXCLUDING XMLDECLARATION flags allow including or removing the XML declaration in the XMLSerialize output.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether to raise an error or just a warning for unsupported XML versions when using the VERSION flag with DOCUMENT type XML values.","would_benefit_from_new_reviewer":"YES"}, {"id":"CANqtF-oXKe0M=0QOih6H+sZRjE2BWAbkW_1+9nMEAMLxUJg5jA@mail.gmail.com","summary":"This patch introduces the ability to set index visibility using ALTER INDEX and CREATE INDEX commands, allowing indexes to be marked as VISIBLE or INVISIBLE to the query planner. It also introduces a GUC `use_invisible_index` to force the use of invisible indexes.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"Whether ALTER INDEX ATTACH PARTITION should change the attached partition's visibility status.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAGPqQf0KitkNack4F5CFkFi-9Dqvp29Ro=EpcWt=4_hs-Rt+bQ@mail.gmail.com","summary":"This patch adds support for NOT VALID and VALIDATE CONSTRAINT options to named NOT NULL constraints. It involves changing the data type of pg_attribute.attnotnull to CHAR, adding support for the new constraint options, updating pg_dump to handle invalid NOT NULL constraints, and adding related test cases.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"There are concerns about the correctness of handling inheritance, potential issues with pg_upgrade, and ensuring all callers of findNotNullConstraintAttnum() and findNotNullConstraint() are covered by tests that catch invalid constraints. Also, the documentation needs to be updated.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAF1DzPVfOW6Kk=7SSh7LbneQDJWh=PbJrEC_Wkzc24tHOyQWGg@mail.gmail.com","summary":"This patch adds the ability to change the inheritability status of named NOT NULL constraints using ALTER TABLE ALTER CONSTRAINT SET INHERIT/NO INHERIT. Previously, constraints declared as NO INHERIT could not be changed back to INHERIT. The latest version of the patch has been revised to align with recent changes in the ALTER TABLE infrastructure.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The latest patch (v5) needs review to ensure it correctly implements the inherit/no inherit state change, especially with the recent refactoring of ALTER TABLE ALTER CONSTRAINT and how it interacts with inheritance and partitioning.","would_benefit_from_new_reviewer":"YES"}, {"id":"237def1a-e318-40fa-baa3-0e3195be564e@uni-muenster.de","summary":"This patch implements the XMLNAMESPACES option for the XMLElement function, allowing users to specify XML namespaces within the scope of an XML element. The patch includes support for DEFAULT and NO DEFAULT namespaces and addresses concerns raised during review, including interactions with XMLTABLE and potential issues with ColumnRef usage.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"The latest version fixes a bug related to XMLNAMESPACES in views and prevents makeString from being called with a NULL parameter; it is waiting for review to ensure these latest changes are satisfactory.","would_benefit_from_new_reviewer":"YES"}, {"id":"57957aca-3eae-4106-afb2-3008122b9950@eisentraut.org","summary":"The proposed patch allows pg_upgrade to handle upgrades between PostgreSQL clusters with different checksum settings. It automatically sets or unsets checksums during the upgrade process when using the --copy mode, potentially with an explicit flag to control this behavior.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The main issue is whether the checksum adjustment should be automatic within the --copy mode or controlled by an explicit flag (--enable-checksums). Also, the lack of clarity around the Windows code path in the --copy mode needs to be resolved.","would_benefit_from_new_reviewer":"NO"}, {"id":"Z5O1bpcwDrMgyrYy@nathan","summary":"This patch introduces a `--missing-only` option to vacuumdb that can be used with `--analyze-only` and `--analyze-in-stages` to only analyze relations that are missing statistics, particularly useful after pg_upgrade. The patch also refactors the catalog query for analyze in stages to be reusable and includes adjustments for extended statistics and inheritance.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the added checks for extended statistics and inheritance are correct and whether the server version check is appropriate.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAP+B4TD=iy-C2EnsrJgjpwSc7_4pd3Xh-gFzA0bwsw3q8u860g@mail.gmail.com","summary":"This patch introduces a feature to display the query execution plans used by remote PostgreSQL servers within the EXPLAIN command output for queries involving foreign tables via postgres_fdw. A GUC is proposed to enable this functionality.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Ensuring the accuracy and relevance of remote plans, especially concerning ANALYZE and timing options, and handling SQL deparsing with parameters.","would_benefit_from_new_reviewer":"YES"}, {"id":"408f399e7de1416c47bab7e260327ed5ad92838c.camel@cybertec.at","summary":"This patch introduces a new GUC parameter, log_suppress_errcodes, that allows superusers to suppress ERROR and FATAL messages with specified SQLSTATEs from being logged, primarily in client backends, reducing log spam. The default value is an empty string so that no errors are suppressed by default.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The author is considering feedback from a reviewer regarding code style and the handling of locale-dependent functions in the alphanumeric check.","would_benefit_from_new_reviewer":"NO"}, {"id":"e5d472c7-e9be-4710-8dc4-ebe721b62cea@pgbackrest.org","summary":"This patch improves the verification of the recovery_target_timeline GUC by adding endptr checking to catch conversion errors and range checking to exclude values < 1 and greater than UINT_MAX, and improves error message clarity.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"Michael Paquier has suggested using strtou64(), allowing a recovery_target_timeline of 1, and using a more generic format string for translations.","would_benefit_from_new_reviewer":"NO"}, {"id":"e85c6671-1600-4112-8887-f97a8a5d07b2@app.fastmail.com","summary":"This patch proposes to change log_min_messages to allow different log levels to be set depending on the backend type. The syntax is changed to accept a comma-separated list of elements in the form LOGLEVEL:BACKENDTYPE, allowing specific log levels for different backend processes.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The syntax and behavior of setting a default log level for all backend types while also specifying exceptions for particular backend types is being discussed, specifically around using 'ALL' keyword vs. just specifying the log level without a backend type.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHut+PtX8P0EGhsk9p=hQGUHrzxeCSzANXSMKOvYiLX-EjdyNw@mail.gmail.com","summary":"The patch adds a test case to verify that CREATE SUBSCRIPTION fails when the subscriber table is missing expected columns. The latest proposal is to add the test to 008_diff_schema.pl, as suggested by a reviewer.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"Whether the added test provides sufficient value to justify its maintenance cost, although the latest suggestion is to add it to an existing test file, which should address that concern.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAExHW5uF5V=Cjecx3_Z=7xfh4rg2Wf61PT+hfquzjBqouRzQJQ@mail.gmail.com","summary":"This thread proposes adding a new test case to pg_upgrade to dump and restore objects left behind by regression tests, in order to improve coverage of dump/restore functionality and detect anomalies. The test will be enabled via PG_TEST_EXTRA and will test all dump formats. Some adjustments are necessary to accommodate differences in column order in child tables, and this logic is being externalized into a new Perl module.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The main outstanding issues are how best to handle the differences in column order between the original and restored dumps and concerns regarding test runtime, even with the PG_TEST_EXTRA gating. Also whether AdjustDump's interface is optimal.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAN55FZ0GXrojT2yUTrST5McJk8UWmYxUX8b696XjL01B1pKsxg@mail.gmail.com","summary":"This thread discusses adding NetBSD and OpenBSD to the Postgres CI, which has now been committed. The discussion has shifted to addressing performance discrepancies between these new CI environments and existing Linux/FreeBSD environments, and potentially enabling these tasks on cfbot.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"Performance of NetBSD and OpenBSD CI tasks is significantly slower than Linux and FreeBSD, and it's unclear why. There is also discussion of enabling these tasks on CFBot.","would_benefit_from_new_reviewer":"NO"}, {"id":"ZuGOyYht8behJlSC@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch renames 'ci-os-only' to 'ci-task-only' in the .cirrus.tasks.yml file, allowing users to run specific CI tasks, such as compiler warnings, independently.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"18dcfb7f-5deb-4487-ae22-a2c16839519a@gmail.com","summary":"Parallel publication and subscription tests can fail due to concurrent tuple updates on the pg_database entry. The proposed solution is to prevent these tests from running in parallel.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":2,"problem":"Whether disabling parallel execution is the right solution, or if a more robust fix is needed.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAExHW5tK-QqayUN0+N3MF5bjV6vLKDCkRuGwoDJwc7vGjwCygQ@mail.gmail.com","summary":"The proposed patch aims to add functionality to Meson to allow running selected tests under src/test/regress, similar to `make check-tests`, by enabling the use of the TESTS environment variable. The discussion resulted in splitting the patch into two: one to bring meson inline with make for regress/regress tests, and another to extend that support to other suites.","status":"WAITING_FOR_COMMITTER","activity":"INACTIVE","complexity":3,"problem":"The first part of the patch (adding make check-tests behavior to meson) is marked as ready for committer, but it is not yet committed. A second patch extending test selection behavior exists but needs additional work related to feature parity with make.","would_benefit_from_new_reviewer":"NO"}, {"id":"18146-04e908c662113ad5@postgresql.org","summary":"This thread discusses a bug where rows reappear after an auto-vacuum failure, particularly on Windows systems. The proposed solution involves putting RelationTruncate() into a critical section to prevent data corruption in case of truncation failure. The fix also includes ensuring the sync request for the truncation is processed before the checkpoint record is written, and addresses related issues in pg_truncate_visibility_map(). A patch was applied to back branches, but reverted due to an ABI mistake; another patch was then created and pushed.","status":"DONE","activity":"ACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CANOn0EzoMyxA1m-quDS1UeQUq6FNki6+GGiGucgr9tm2R78rKw@mail.gmail.com","summary":"The patch adds regression tests for ecpg command notices (errors and warnings), focusing on notices implemented in ecpg.addons. The author is rewriting the patch based on a reference implementation using the TAP test mechanism provided by Fujii Masao.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The author is rewriting the patch to use the TAP test mechanism instead of the initial approach involving shell scripts, bat files, and python code. We are waiting to see the updated patch.","would_benefit_from_new_reviewer":"NO"}, {"id":"CACJufxFazq-bfyhiO0KBojR=yOr84E25Rqf6mHB0Ow0KPidkKw@mail.gmail.com","summary":"This patch adds a regression test for `pg_stat_progress_copy.tuples_skipped` to verify that the `pgstat_progress_update_param(PROGRESS_COPY_TUPLES_SKIPPED)` function works as intended during COPY operations.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"YES"}, {"id":"Z6oQXc8LmiTLfwLA@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch aims to fix a race condition in the 035_standby_logical_decoding.pl test, which can occur in rare circumstances on slow machines, by adding an injection point to prevent the catalog_xmin of a logical slot on the standby from advancing past the conflict point. It also includes some adjustments to injection points, specifically adding the ability to wakeup() and detach() while ensuring that no process can wait in between.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether the injection point module should be bumped to 1.1.","would_benefit_from_new_reviewer":"YES"}, {"id":"c3d617d4-1696-4aa7-8a4d-5a7d19cc5618@pgbackrest.org","summary":"The thread discusses a patch to fix logging inconsistencies when an invalid recovery timeline is detected. The original patch corrected the checkpoint and TLI values used in logging. A subsequent patch, proposed by Benoit Lobréau, aims to improve the error message by clarifying whether the checkpoint information comes from the control file or the backup label.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"The latest discussion revolves around how to best format the error message to indicate whether the checkpoint information comes from the control file or backup label, while also considering translation.","would_benefit_from_new_reviewer":"NO"}, {"id":"CANOn0Ez_t5uDCUEV8c1YORMisJiU5wu681eEVZzgKwOeiKhkqQ@mail.gmail.com","summary":"This thread discusses and resolves a bug in ecpg where it fails to warn about unsupported `COPY FROM STDIN` statements. The fix involves correcting the logic that checks for this unsupported syntax, and the patch has been applied to master and supported release branches. The author is now working on adding a regression test for this fix.","status":"DONE","activity":"INACTIVE","complexity":2,"problem":"The original issue has been resolved and committed. The next step is to create a regression test, but that will be handled in a separate patch and commitfest entry.","would_benefit_from_new_reviewer":"NO"}, {"id":"20240410212344.GA1824549@nathanxps13","summary":"The patch allows changing the `autovacuum_max_workers` GUC without requiring a server restart. The final implementation introduces a new GUC, `autovacuum_worker_slots`, which determines the maximum number of autovacuum workers that can be launched, and `autovacuum_max_workers` can be dynamically adjusted up to this limit. The default value of autovacuum_worker_slots is determined during initdb based on max_connections.","status":"DONE","activity":"DONE","complexity":3,"problem":"The patch initially introduced too many new semaphores, breaking some buildfarm members. This was resolved by adjusting the default value of the new GUC, `autovacuum_worker_slots`, during initdb.","would_benefit_from_new_reviewer":"NO"}, {"id":"17821-dd8c334263399284@postgresql.org","summary":"This thread discusses a bug where an assertion fails in heap_update() due to heap pruning, specifically when updating system catalog tuples retrieved from the syscache. The core issue is that a tuple's page can be pruned after the tuple is retrieved from the syscache but before it is updated, leading to corruption. A patch has been proposed to address this by making the ItemIdIsNormal() check a runtime check, returning TM_Deleted if the item ID is not normal.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The key issue is how to handle the race condition where a page is pruned between the time a tuple is retrieved from syscache and the time it is updated, and whether the proposed solution adequately prevents data corruption.","would_benefit_from_new_reviewer":"YES"}, {"id":"18741-e4ef6f7aa8a956cb@postgresql.org","summary":"The patch aims to prevent attaching a partition to a partitioned table if the partition references another partitioned table through a foreign key, unless the referenced table is a parent of the attacher or a regular non-partitioned table. This avoids inconsistencies and errors during partition detachment.","status":"WAITING_FOR_REVIEW","activity":"INACTIVE","complexity":3,"problem":"Whether to disallow attaching a partition referencing an unrelated partitioned table, and how to minimize the impact on existing setups.","would_benefit_from_new_reviewer":"YES"}, {"id":"GV1P251MB1004DDEE2EE8B2AE12C3C37CCD3F2@GV1P251MB1004.EURP251.PROD.OUTLOOK.COM","summary":"The proposed patch aims to fix potential SIGSEGV and FPE issues in `pg_controldata` when dealing with corrupted or mismatched `pg_control` files (e.g., from different architectures). The SIGSEGV fix involves checking for NULL return values from `localtime()`, and the FPE fix addresses potential negative values for WAL segment size by adding a check or casting to unsigned where appropriate.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":3,"problem":"Whether to change the WAL segment size to an unsigned type, or if a check before `XLByteToSeg()` is sufficient to address the FPE issue.","would_benefit_from_new_reviewer":"YES"}, {"id":"CAA5RZ0ujeNgKpE3OrLtR=eJGa5LkGMekFzQTwjgw=rzaLufQLQ@mail.gmail.com","summary":"The proposed patch prevents the use of `COPY FREEZE` on foreign tables, as this optimization is not applicable to remote tables and could mislead users. The patch throws an error when attempting to use `COPY FREEZE` on a foreign table.","status":"DONE","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAM6Zo8woa62ZFHtMKox6a4jb8qQ=w87R2L0K8347iE-juQL2EA@mail.gmail.com","summary":"The proposed patch addresses a race condition that can lead to upgrade failures due to orphan role entries in the pg_auth_members catalog. The fix involves adding missing dependencies for pg_auth_members entries and modifying pg_dumpall to handle and warn about dangling role OIDs. Two patches have been proposed: one to fix the race condition and another to improve pg_dumpall's handling of dangling OIDs.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"Tom Lane indicated he would be updating patch 0001 to remove the conditional CommandCounterIncrement call, and we are waiting for him to post the updated patch.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAEudQApsZ8sdoRsn_oE=KEwkSMjh-sgsjuGWaE6CmHwQ+3xt1g@mail.gmail.com","summary":"The patch aimed to address a potential null pointer dereference in src/backend/optimizer/path/allpaths.c, identified by Coverity, by removing an Assert and adding a null check. However, Tom Lane argued that the Assert serves as a valuable logic cross-check and that the situation the patch addresses is not a bug.","status":"LACKS_SUPPORT","activity":"INACTIVE","complexity":2,"problem":"Tom Lane argued that the Assert is intentional and the proposed change is not an improvement, leading to the patch being withdrawn.","would_benefit_from_new_reviewer":"NO"}, {"id":"tencent_F34922C91C41E76C734773E767C9FBDB9906@qq.com","summary":"The patch fixes a potential memory leak in pg_amcheck by ensuring PQclear(result) is called before disconnectDatabase(conn).","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CP8P284MB24965CB63DAC00FC0EA4A475EC462@CP8P284MB2496.BRAP284.PROD.OUTLOOK.COM","summary":"The patch modifies the \\conninfo meta-command in psql to display connection information in a tabular format, including details about SSL and GSSAPI, and now replaces the previous free-form output of \\conninfo. The latest iteration retrieves information from libpq APIs and adds server superuser and hot standby information. After significant discussion, the patch has been committed.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"18815-2a0407cc7f40b327@postgresql.org","summary":"The proposed patch addresses a segmentation fault in the logical replication worker when replicating huge partitioned tables with BRIN indexes in Postgresql 17. The root cause is duplicate calls to ExecOpenIndices and ExecCloseIndices, leading to issues with brininsertcleanup. A patch has been created and applied by the reporter, resolving the issue.","status":"DONE","activity":"ACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAEP4nAzqiT6VbVC5r3nq5byLTnPzjniVGzEMpYcnAHQyNzEuaw@mail.gmail.com","summary":"This patch adds tab completion for the ALTER USER RESET and ALTER DATABASE RESET commands in psql, so that it only shows currently set variables for the user/database.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"bebd457e-5b43-46b3-8fc6-f6a6509483ba@uni-muenster.de","summary":"This patch adds the missing [NO] INDENT flag to XMLSerialize backward parsing, ensuring that the indentation option is correctly preserved when views are created and dumped for upgrades.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"198a8d1e-0792-4e7f-828e-902aa342f36e@Spark","summary":"This patch updates outdated comments in nodeAgg.c, which were referencing a removed function, lookup_hash_entry().","status":"DONE","activity":"ACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CADrHaBFMWsMxGoPBPqY570HSDQZeJ3BtJHhSbUg5LFdErZX6ug@mail.gmail.com","summary":"The purpose of this thread was to address the inconsistency in how Postgresql handles timezone offsets, specifically the POSIX-style interpretation of UTC+n which is opposite to the ISO standard. Ultimately, the solution was to improve the documentation to better explain this behavior and warn users about potential confusion.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAKAnmm+7o93fQV-RFkGaN1QnP-0D4d3JTykD+cLueqjDMKdfag@mail.gmail.com","summary":"This patch enhances psql by providing more intuitive titles for commands like \\dt, \\di, etc., which list database relations. Instead of always displaying List of relations, the patch aims to show more specific titles like List of tables or List of views when only one type of relation is requested.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":2,"problem":"Tom Lane has suggested using pg_log_error_internal (or similar) to avoid translating the 'List of ???' string. The author, Greg Sabino Mullane, has not yet responded or provided a new patch with this suggestion.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAO6_XqroE7JuMEm1sWz55rp9fAYX2JwmcP_3m_v51vnOFdsLiQ@mail.gmail.com","summary":"This patch adds pipelining support to psql, enabling users to test pipelined query behavior using psql regression tests, with new meta-commands such as \\startpipeline, \\endpipeline, \\syncpipeline, \\flushrequest, \\flush, and \\getresults, along with prompt interpolation and variables to track pipeline status.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"The main patch has been committed, but there are two smaller patches related to tests and prompt support that are waiting to be committed after a few days of buildfarm testing.","would_benefit_from_new_reviewer":"NO"}, {"id":"20241225.123704.1194662271286702010.ishii@postgresql.org","summary":"This patch adds new APIs to the StringInfo package, `makeStringInfoExt` and `initStringInfoExt`, that allow callers to specify the initial allocation size of the StringInfo object. The existing APIs, `makeStringInfo` and `initStringInfo`, are modified to call the new extended APIs with the default size of 1024.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z4chOKfnthRH71mw@nathan","summary":"The patch converts libpgport's pqsignal() to a void function, removing bogus return values and addressing related issues with signal handling on Windows, including removing signal redefinitions and fixing calls to pqsignal() with invalid signal numbers in frontend programs.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+COZaB+9CN_f63PPRoVhHjYmCwwmb_9CWLxqCJdMWDqs1a-JA@mail.gmail.com","summary":"The proposal is to remove the non-compiling, likely unused functions PrintBufferDescs and PrintPinnedBufs from bufmgr.c.","status":"DONE","activity":"INACTIVE","complexity":1,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHewXNku-o46-9cmUgyv6LkSZ25doDrWq32p=oz9kfD8ovVJMg@mail.gmail.com","summary":"The patch fixes a potential unsafe access to the BufferDescriptors array in BufferGetLSNAtomic() when dealing with local buffers, which could lead to an out-of-bounds read. The patch has been committed and backpatched through version 13.","status":"DONE","activity":"ACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAA5RZ0trTUL6_vpvW79daGgkp7B-ZtWUc5yrPz5Sjm8Ns4KRgQ@mail.gmail.com","summary":"The initial proposal was to improve DEBUG1 logging for CREATE INDEX to provide more information about parallel workers. However, the discussion evolved to consider a VERBOSE option for CREATE INDEX and ALTER TABLE to output more detailed information, and whether extending EXPLAIN to cover these commands would be a better approach. The author is now planning to withdraw the patch, pending further discussion.","status":"LACKS_SUPPORT","activity":"INACTIVE","complexity":3,"problem":"The best approach for providing more detailed logging for CREATE INDEX and ALTER TABLE is still under debate, with concerns about the scalability and consistency of a VERBOSE option versus the complexity of extending EXPLAIN.","would_benefit_from_new_reviewer":"NO"}, {"id":"Z6aIy4aywxUZHAo6@nathan","summary":"The patch aims to standardize the descriptions of special values for GUCs (Grand Unified Configuration parameters) in PostgreSQL, ensuring consistency in wording, placement, and formatting across different GUCs. The effort began by patching the entire GUC configuration and has since been narrowed to focus on the auto_explain extension.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":2,"problem":"The current outstanding issue relates to the auto_explain extension, specifically around the descriptions for the log_min_duration and log_parameter_max_length parameters and their special values. Ilia has provided a v9 patch to resolve this.","would_benefit_from_new_reviewer":"YES"}, {"id":"ZmaXmWDL829fzAVX@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch adds a new field to the pg_stat_progress_vacuum view, reporting the total amount of time a vacuum process has spent sleeping due to cost_delay. It also adds this information to the output of VACUUM/ANALYZE (VERBOSE) and to autovacuum logs, controlled by the track_cost_delay_timing parameter.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAA5RZ0uVOGBYmPEeGF2d1B_67tgNjKx_bKDuL+oUftuoz+=Y1g@mail.gmail.com","summary":"This patch adds new columns to pg_stat_all_tables to track the cumulative time spent performing vacuum and analyze operations (both auto and manual) per relation. The goal is to allow users to easily track and trend vacuum/analyze performance over time.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z6SOha5YFFgvpwQY@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch series moves wal_buffers_full to the WalUsage structure to allow reporting in pg_stat_statements, EXPLAIN, and VACUUM/ANALYZE (VERBOSE). It also reorders fields in pg_stat_statements to group WAL-related statistics together.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"098A3E67-E4A6-4086-9C66-B1EAEB1DFE1C@yandex-team.ru","summary":"This thread discusses a patch to speed up sorting within the intarray contrib module by using specialized sorting functions, and refactors the code for improved readability. The final patch makes the specialized sort function private to intarray.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"64486b0b-0404-e39e-322d-0801154901f3@postgrespro.ru","summary":"The proposed patch implements self-join elimination, an optimization that removes inner joins of a table with itself on a unique column. The latest iteration focuses on improving the code's structure and addressing potential issues related to equal propagation and queries involving lateral references and table sampling.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"The primary outstanding issue is ensuring the patch correctly handles all cases, particularly those involving expression propagation and interactions with lateral references and tablesample, in addition to ongoing concerns about the overall complexity of the code and the number of planner structures that need to be considered.","would_benefit_from_new_reviewer":"NO"}, {"id":"CA+HiwqFGkMSge6TgC9KQzde0ohpAycLQuV7ooitEEpbKB0O_mg@mail.gmail.com","summary":"This thread discusses a patch to improve the performance of generic plans involving partitioned tables by deferring locking of prunable partitions until executor initialization, after initial pruning has taken place. The latest iteration focuses on implementing this by rearchitecting locking and plan validity checks, making the executor responsible for managing this, addressing concerns about data races and code fragility. The most recent concern regards how this might interact with partitioned tables and what should happen with a transiently broken plan when a rule invalidates it. A solution has been found for that as well, and the author is looking for a committer.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":5,"problem":"To address a crash and a new failure mode due to certain concurrent actions during rule or view execution, it's important to ensure the executor handles broken plans robustly.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAKRu_Yf3gvXGcCnqqfoq0Q8LX8UM-e-qbm_B1LeZh60f8WhWA@mail.gmail.com","summary":"This thread discusses a patch set to confine vacuum skip logic to lazy_scan_skip, refactor the code for readability, and enable vacuum to use the streaming read API. The latest iterations focus on fixing valgrind errors, addressing potential corner cases with DISABLE_PAGE_SKIPPING, and optimizing the interaction between streaming reads and the vacuum buffer access strategy.","status":"DONE","activity":"ACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAKRu_ZF_KCzZuOrPrOqjGVe8iRVWEAJSpzMgRQs=5-v84cXUg@mail.gmail.com","summary":"The patch implements a mechanism to eagerly scan all-visible pages during normal vacuums in order to amortize the cost of aggressive vacuums, and introduces a GUC, vacuum_max_eager_freeze_failure_rate, to control the maximum fraction of pages that VACUUM may scan and fail to set all-frozen in the visibility map before disabling eager scanning. This helps to avoid situations where a lot of work is deferred until an aggressive vacuum, which is then very expensive.","status":"DONE","activity":"ACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"50fe6779-ee2d-4256-bc64-cd661bc4029a@gmail.com","summary":"The patch improves statistics estimation in PostgreSQL by considering GROUP BY clauses as unique constraints, similar to DISTINCT clauses, to improve row estimations in joins over groupings.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CACxu=vJaKFNsYxooSnW1wEgsAO5u_v1XYBacfVJ14wgJV_PYeg@mail.gmail.com","summary":"The patch set aims to improve the performance of expanded objects in plpgsql by allowing extension functions to participate in in-place updates. It introduces a new optimization rule for updates of expanded objects and refactors the pl_funcs.c code to reduce duplication.","status":"DONE","activity":"INACTIVE","complexity":4,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"3068812.1738206654@sss.pgh.pa.us","summary":"The proposal aimed to replace CaseTestExpr with Params during eval_const_expressions to improve code maintainability and address bugs related to the loose connection between CaseTestExpr and the node supplying its value. It also included converting ArrayCoerceExpr and JsonExpr to use Params, and removing related dead code.","status":"LACKS_SUPPORT","activity":"INACTIVE","complexity":4,"problem":"CASE expressions that would have been seen as equal() may not be equal after the transformation, potentially breaking index expression matching in queries.","would_benefit_from_new_reviewer":"NO"}, {"id":"CALzhyqzmZ6b9Sbp4jCORJV48t4kz2a1EqR3z4DUxX4RfRYR2xA@mail.gmail.com","summary":"The proposed patch aims to mitigate the quadratic planning time for ordered paths over partitioned tables by caching the position of the previously found EM in find_ec_member_matching_pathkeys(). However, there are concerns that this is a superficial fix. An alternative patch series from Yuya Watari provides a more comprehensive solution, which seems to address the same issue.","status":"LACKS_SUPPORT","activity":"INACTIVE","complexity":2,"problem":"The main issue is whether to apply a quick, potentially fragile fix or focus on a more comprehensive refactoring. The quick fix is viewed as a kludge, while the larger patch series appears to address the problem effectively.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAJ7c6TO3X88dGd8C4Tb-Eq2ZDPz+9mP+KOwdzK_82BEz_cMPZg@mail.gmail.com","summary":"The proposal aims to refactor the bytea_sortsupport() function and related code in adt/varlena.c to improve maintainability, reduce the risk of bugs, and potentially optimize performance by separating bytea-specific logic from the common logic shared with string types. The ultimate goal is to move all bytea-related code into a new bytea.c file.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"The main issue is whether to proceed with a more ambitious refactoring that involves moving all bytea-related code into a separate file, rather than just refactoring the sort support functions.","would_benefit_from_new_reviewer":"NO"}, {"id":"7bed6c08-72a0-4ab9-a79c-e01fcdd0940f@vondra.me","summary":"The thread discusses a patch to address the batch explosion issue in hash joins by adjusting the memory limit to better account for spill files. The main patch focuses on balancing memory usage between the hash table and batch files, and was committed. An additional patch to postpone hashtable growth is not being pursued for PG18.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z7RkQ0EfYaqqjgz/@ip-10-97-1-34.eu-west-3.compute.internal","summary":"This patch removes wal_[sync|write][_time] from pg_stat_wal, as this information is already available in pg_stat_io, and cleans up related code. The change aims to encourage monitoring tools to use pg_stat_io for WAL statistics due to its greater context and granularity, and simplifies the implementation of per-backend WAL statistics.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAHv8Rj+deqsQXOMa7Tck8CBQUbsua=+4AuMVQ2=MPM0f-ZHbjA@mail.gmail.com","summary":"This patch adds a warning to pg_createsubscriber when max_slot_wal_keep_size is not set to -1 on the publisher, as this can lead to replication failures. The warning is displayed during a dry run of pg_createsubscriber.","status":"DONE","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAD21AoDht9Pz_DFv_R2LqBTBbO4eGrpa9Vojmt5z5sEx3XwD7A@mail.gmail.com","summary":"This patch aims to improve logical decoding performance by skipping the collection of decoded changes for already-aborted transactions. It introduces a CLOG lookup to check the transaction status and caches the result, avoiding unnecessary disk or network I/O, especially for large, rolled-back transactions.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CALj2ACW4aUe-_uFQOjdWCEN-xXoLGhmvRFnL8SNw_TZ5nJe+aw@mail.gmail.com","summary":"This patch introduces the `idle_replication_slot_timeout` GUC, enabling automatic invalidation of replication slots that have been inactive for a specified duration. A separate discussion has been started for the XID age based invalidation parameter.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"The thread discusses design decisions related to implementing an inactive timeout for replication slots, including whether to sync last_inactive_time from primary to standby, and test-related cleanups. Since the patches have been committed, the discussion has waned and the remaining problems have been addressed.","would_benefit_from_new_reviewer":"NO"}, {"id":"d1b467a78e0e36ed85a09adf979d04cf124a9d4b.camel@vmware.com","summary":"This patchset adds OAuth 2.0 support to Postgresql, enabling federated authentication and authorization. It includes client and server-side components using libcurl and offers extension points for custom client flows and server-side token validation. The discussion is currently focused on addressing details like naming conventions, warning about potential issues such as asynchronous DNS support in libcurl, and improving overall build processes. Recently some related smaller pieces have been committed to the code base.","status":"WAITING_FOR_COMMITTER","activity":"ACTIVE","complexity":4,"problem":"Finding a balance between flexibility and maintainability by carefully choosing the right interfaces and APIs for custom client flows and server validation, as well as resolving long-standing build issues, refactoring code for better consistency and security, and addressing the requirements of multiple operating systems.","would_benefit_from_new_reviewer":"NO"}, {"id":"CAPBGcbxo9ASzq14VTpQp3mnUJ5omdgTWUJOvWV0L6nNigWE5jw@mail.gmail.com","summary":"The proposal is to add AES-128-CFB mode support to the pgcrypto extension. A patch was submitted by Umar Hayat, reviewed by Alvaro Herrera and Daniel Gustafsson, and ultimately committed by Daniel Gustafsson after a small documentation change.","status":"DONE","activity":"INACTIVE","complexity":2,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"Z24fyb3ipXKR38oS@paquier.xyz","summary":"The proposal aims to introduce a new WAL-logging facility for pgstats kinds, allowing each kind to decide what data to WAL-log and how to handle it during recovery, using a central facility with a new RMGR called PgStat. However, there is strong disagreement about the usefulness of WAL logging statistics directly, rather than rebuilding them from WAL records of underlying operations.","status":"LACKS_SUPPORT","activity":"ACTIVE","complexity":4,"problem":"The core issue is whether it's appropriate to WAL-log statistics directly, or if they should be rebuilt from existing WAL records of the underlying operations they represent. Andres Freund strongly objects to the approach.","would_benefit_from_new_reviewer":"NO"}, {"id":"a368248e-69e4-40be-9c07-6c3b5880b0a6@eisentraut.org","summary":"This thread discusses a patch to implement virtual generated columns in Postgresql. The latest iteration focuses on moving the expansion of virtual generated columns to the planner to address issues with outer join semantics and subqueries, and refactoring code to reduce duplication.","status":"WAITING_FOR_AUTHOR","activity":"ACTIVE","complexity":4,"problem":"The primary outstanding issue is ensuring correct handling of virtual generated columns with outer join semantics, by expanding virtual generated columns in the planner. There's also a need to refactor code duplication between pullup_replace_vars() and ReplaceVarsFromTargetList().","would_benefit_from_new_reviewer":"NO"}, {"id":"582b2613-0900-48ca-8b0d-340c06f4d400@eisentraut.org","summary":"This patch allows using text position search functions (position, strpos, replace, split_part, string_to_array, string_to_table) with nondeterministic collations.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAGECzQTg2hcmb5GaU53uuWcdC7gCNJFLL6mnW0WNhWHgq9UTgw@mail.gmail.com","summary":"This thread discusses a proposal to add a new protocol message to allow clients to change GUCs (or, more generally, protocol parameters) after connection establishment. It involves infrastructure changes to libpq to support protocol version negotiation and a new ParameterSet message, along with mechanisms for managing protocol-only settings and handling downgrades. The author has shifted the core discussion on protocol changes to the longer cancel keys thread.","status":"WAITING_FOR_REVIEW","activity":"ACTIVE","complexity":4,"problem":"The key issue currently is reaching a consensus on whether to redefine the existing PQprotocolVersion function or introduce a new function PQfullProtocolVersion, and more generally to decide between using the _pq_.xxx mechanism, or introducing a protocol version bump, in conjunction with the protocol parameters.","would_benefit_from_new_reviewer":"YES"}, {"id":"42d3f855-2275-4361-a42a-826172ca2dc4@Spark","summary":"This patch adds the ability to use the LIKE clause with CREATE FOREIGN TABLE, allowing users to easily create foreign tables with the same column definitions and constraints as an existing table. Inapplicable options such as INCLUDING INDEXES and INCLUDING COMPRESSION are ignored.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAAJ_b96Bp=-ZwihPPtuaNX=SrZ0U6ZsXD3+fgARO0JuKa8v2jQ@mail.gmail.com","summary":"The patch allows NOT VALID foreign key constraints on partitioned tables. When merging a NOT VALID FK constraint from a child table with a VALID parent constraint, it implicitly validates the child constraint against its existing data and marks it as VALID.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"956435f8-3b2f-47a6-8756-8c54ded61802@dalibo.com","summary":"This patch introduces a new GUC, autovacuum_vacuum_max_threshold, to set an upper limit on the number of tuples to delete/update/insert prior to vacuuming, aiming to ensure larger tables are vacuumed more frequently and avoid runaway bloat. The GUC provides a hard cap on the threshold calculated using autovacuum_vacuum_threshold and autovacuum_vacuum_scale_factor.","status":"DONE","activity":"ACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}, {"id":"CAJ7c6TOyZ9bGNrDK6Z3Q0gr9ow8ZpOm+=+01mpE0dsdH4C+u9A@mail.gmail.com","summary":"The patch aims to improve code coverage for network address functions by adding new tests for functions like abbrev(inet), set_masklen(cidr,int4), netmask(inet), hostmask(inet), inet_client_addr(), inet_client_port(), inet_server_addr(), and inet_server_port(). The latest version addresses reviewer feedback and includes new tests for set_masklen and moves the named tests to src/test/ssl/t/003_sslinfo.pl.","status":"WAITING_ON_AUTHOR","activity":"ACTIVE","complexity":3,"problem":"The placement of the tests for inet_client_addr(), inet_client_port(), inet_server_addr(), and inet_server_port() within the SSL test suite is not ideal, and Michael Paquier has suggested set_masklen(inet) could be covered for the -1 case.","would_benefit_from_new_reviewer":"NO"}, {"id":"8bb3af8a-796c-440f-b775-d05437b75e6f@eisentraut.org","summary":"This patch allows subfield references in column references without parentheses, implementing SQL standard rules for identifier chains of three or more items, where A.B.C can now be interpreted as correlation A, column B, field C, similar to (A.B).C. It raises an error if both possible interpretations apply.","status":"WAITING_ON_AUTHOR","activity":"INACTIVE","complexity":3,"problem":"Whether the correlation checks can be done using transformIndirection() after constructing an A_Indirection node, and the minor inconvenience of view definitions being modified to use indirection after being dumped and restored.","would_benefit_from_new_reviewer":"NO"}, {"id":"CANtu0oiTgFW47QgpTwrMOVm3Bq4N0Y5bjvTy5sP0gYWLQuVgjw@mail.gmail.com","summary":"The patch aims to prevent crashes caused by unexpected interactions between backends when using local injection points, particularly during installcheck, by disabling TAP and isolation tests for injection points. However, a similar change has already been made by Noah Misch, so the author suggests closing the entry.","status":"LACKS_SUPPORT","activity":"ACTIVE","complexity":2,"problem":"Whether disabling tests is the correct solution, or whether the underlying race condition should be addressed instead.","would_benefit_from_new_reviewer":"NO"}, {"id":"ff4e59305e5d689e03cd256a736348d3e7958f8f.camel@j-davis.com","summary":"This thread discusses adding injection points to hash aggregation, allowing for customized behavior and testing. The initial patch included forcing partition fan-out and a minor refactor. The injection point part of the patch has been committed, while the refactor was submitted as a separate patch.","status":"DONE","activity":"INACTIVE","complexity":3,"problem":"N/A","would_benefit_from_new_reviewer":"NO"}]
